<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classPscf_1_1Basis">
<title>Pscf::Basis&lt; D &gt; Class Template Reference</title>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary></indexterm>
<para>

<para>Symmetry-adapted basis for pseudo-spectral scft. </para>
 
</para>
<para>
<computeroutput>#include &lt;Basis.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classPscf_1_1Basis_1_1Star">Star</link></para>

<para>List of wavevectors that are related by space-group symmetries. </para>
</listitem>
            <listitem><para>class <link linkend="_classPscf_1_1Basis_1_1Wave">Wave</link></para>

<para>Wavevector used to construct a basis function. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classPscf_1_1Basis_1aba2091a6bf2dc3a9cc82f2ce9262b29d">Basis</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_classPscf_1_1Basis_1a0c5588999baf2ba21ae76a3d8bf2cd65">~Basis</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Basis_1a3a6bf3ad823bd8795038c3d2390c435f">makeBasis</link> (const <link linkend="_classPscf_1_1Mesh">Mesh</link>&lt; D &gt; &amp;mesh, const <link linkend="_classPscf_1_1UnitCell">UnitCell</link>&lt; D &gt; &amp;unitCell, std::string groupName)</para>

<para>Construct basis for a specific grid and space group. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Basis_1a66fb2252c2b0f1953ac380124f77dbe3">makeBasis</link> (const <link linkend="_classPscf_1_1Mesh">Mesh</link>&lt; D &gt; &amp;mesh, const <link linkend="_classPscf_1_1UnitCell">UnitCell</link>&lt; D &gt; &amp;unitCell, const <link linkend="_classPscf_1_1SpaceGroup">SpaceGroup</link>&lt; D &gt; &amp;group)</para>

<para>Construct basis for a specific grid and space group. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Basis_1aa4c60265e2031cf0bd9b72a42cd1aa00">update</link> ()</para>

<para>Update values after change in unit cell parameters. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Basis_1af9a597de566186cf18cd1e3f32557a99">outputWaves</link> (std::ostream &amp;out, bool outputAll=false) const</para>

<para>Print a list of all waves to an output stream. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Basis_1a585436ef20f1b89c6aab1ba3f97e15aa">outputStars</link> (std::ostream &amp;out, bool outputAll=false) const</para>

<para>Print a list of all stars to an output stream. </para>
</listitem>
            <listitem><para>bool <link linkend="_classPscf_1_1Basis_1a1d54b8408c248dc90b764e24fde721c1">isValid</link> () const</para>

<para>Returns true if valid, false otherwise. </para>
</listitem>
            <listitem><para>int <link linkend="_classPscf_1_1Basis_1a4a094fa3025849c0b92e3cea3c276269">nWave</link> () const</para>

<para>Total number of wavevectors. </para>
</listitem>
            <listitem><para>int <link linkend="_classPscf_1_1Basis_1a3479377a98886e6e160a04e09a06439c">nBasisWave</link> () const</para>

<para>Total number of wavevectors in uncancelled stars. </para>
</listitem>
            <listitem><para>int <link linkend="_classPscf_1_1Basis_1a9698b594fef645478474472d57bc08aa">nStar</link> () const</para>

<para>Total number of stars. </para>
</listitem>
            <listitem><para>int <link linkend="_classPscf_1_1Basis_1a13ed27641b796e2e077d443fb7458b7b">nBasis</link> () const</para>

<para>Total number of nonzero symmetry-adapted basis functions. </para>
</listitem>
            <listitem><para>const <link linkend="_classPscf_1_1Basis_1_1Star">Star</link> &amp; <link linkend="_classPscf_1_1Basis_1aa5423219c8a82622dc5b691317a050b1">star</link> (int i) const</para>

<para>Get a <link linkend="_classPscf_1_1Basis_1_1Star">Star</link>, access by integer index. </para>
</listitem>
            <listitem><para>const <link linkend="_classPscf_1_1Basis_1_1Wave">Wave</link> &amp; <link linkend="_classPscf_1_1Basis_1a89037c222b32863b02ffa44bb83b38f6">wave</link> (int i) const</para>

<para>Get a specific <link linkend="_classPscf_1_1Basis_1_1Wave">Wave</link>, access by integer index. </para>
</listitem>
            <listitem><para>int <link linkend="_classPscf_1_1Basis_1a8f8ac5fb0d7061f99f532073d6cd5445">waveId</link> (<link linkend="_classPscf_1_1IntVec">IntVec</link>&lt; D &gt; vector) const</para>

<para>Get integer index of a <link linkend="_classPscf_1_1Basis_1_1Wave">Wave</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;int D&gt;
class Pscf::Basis&lt; D &gt;</title></simplesect>


<para>Symmetry-adapted basis for pseudo-spectral scft. </para>
<para>
Definition at line 27 of file Basis.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classPscf_1_1Basis_1aba2091a6bf2dc3a9cc82f2ce9262b29d"/>    <section>
    <title>Basis()</title>
<indexterm><primary>Basis</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>Basis</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput><link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::<link linkend="_classPscf_1_1Basis">Basis</link></computeroutput></para><para>

<para>Default constructor. </para>
</para>
<para>
Definition at line 27 of file Basis.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1a0c5588999baf2ba21ae76a3d8bf2cd65"/>    <section>
    <title>~Basis()</title>
<indexterm><primary>~Basis</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>~Basis</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput><link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::~<link linkend="_classPscf_1_1Basis">Basis</link></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 39 of file Basis.tpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classPscf_1_1Basis_1a3a6bf3ad823bd8795038c3d2390c435f"/>    <section>
    <title>makeBasis()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>makeBasis</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>makeBasis</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::makeBasis (const <link linkend="_classPscf_1_1Mesh">Mesh</link>&lt; D &gt; &amp; mesh, const <link linkend="_classPscf_1_1UnitCell">UnitCell</link>&lt; D &gt; &amp; unitCell, std::string groupName)</computeroutput></para><para>

<para>Construct basis for a specific grid and space group. </para>
</para>

<para>Proposal: Initially implementation functions correctly only for identity group, withgroupName == &apos;I&apos;. </para>
<para>
Definition at line 46 of file Basis.tpp.</para>
<para>
References Util::Log::file(), Pscf::SymmetryGroup&lt; SpaceSymmetry&lt; D &gt; &gt;::makeCompleteGroup(), Pscf::makeGroupFileName(), UTIL_CHECK, and UTIL_THROW.</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1a66fb2252c2b0f1953ac380124f77dbe3"/>    <section>
    <title>makeBasis()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>makeBasis</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>makeBasis</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::makeBasis (const <link linkend="_classPscf_1_1Mesh">Mesh</link>&lt; D &gt; &amp; mesh, const <link linkend="_classPscf_1_1UnitCell">UnitCell</link>&lt; D &gt; &amp; unitCell, const <link linkend="_classPscf_1_1SpaceGroup">SpaceGroup</link>&lt; D &gt; &amp; group)</computeroutput></para><para>

<para>Construct basis for a specific grid and space group. </para>
</para>
<para>
Definition at line 87 of file Basis.tpp.</para>
<para>
References Pscf::Mesh&lt; D &gt;::size(), and UTIL_THROW.</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1aa4c60265e2031cf0bd9b72a42cd1aa00"/>    <section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>update</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::update</computeroutput></para><para>

<para>Update values after change in unit cell parameters. </para>
</para>
<para>
Definition at line 647 of file Basis.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1af9a597de566186cf18cd1e3f32557a99"/>    <section>
    <title>outputWaves()</title>
<indexterm><primary>outputWaves</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>outputWaves</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::outputWaves (std::ostream &amp; out, bool outputAll = <computeroutput>false</computeroutput>
) const</computeroutput></para><para>

<para>Print a list of all waves to an output stream. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream to which to write </para>
</entry>
                            </row>
                            <row>
                                <entry>outputAll</entry>
                                <entry>
<para>output cancelled waves only if true </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 671 of file Basis.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1a585436ef20f1b89c6aab1ba3f97e15aa"/>    <section>
    <title>outputStars()</title>
<indexterm><primary>outputStars</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>outputStars</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::outputStars (std::ostream &amp; out, bool outputAll = <computeroutput>false</computeroutput>
) const</computeroutput></para><para>

<para>Print a list of all stars to an output stream. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream to which to write </para>
</entry>
                            </row>
                            <row>
                                <entry>outputAll</entry>
                                <entry>
<para>output cancelled waves only if true </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 706 of file Basis.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1a1d54b8408c248dc90b764e24fde721c1"/>    <section>
    <title>isValid()</title>
<indexterm><primary>isValid</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>isValid</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>bool <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::isValid</computeroutput></para><para>

<para>Returns true if valid, false otherwise. </para>
</para>
<para>
Definition at line 743 of file Basis.tpp.</para>
<para>
References Pscf::MeshIterator&lt; D &gt;::atEnd(), Pscf::MeshIterator&lt; D &gt;::begin(), Pscf::Vec&lt; D, T &gt;::negate(), and Pscf::MeshIterator&lt; D &gt;::position().</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1a4a094fa3025849c0b92e3cea3c276269"/>    <section>
    <title>nWave()</title>
<indexterm><primary>nWave</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>nWave</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>int <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::nWave<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Total number of wavevectors. </para>
</para>
<para>
Definition at line 278 of file Basis.h.</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1a3479377a98886e6e160a04e09a06439c"/>    <section>
    <title>nBasisWave()</title>
<indexterm><primary>nBasisWave</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>nBasisWave</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>int <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::nBasisWave<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Total number of wavevectors in uncancelled stars. </para>
</para>
<para>
Definition at line 282 of file Basis.h.</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1a9698b594fef645478474472d57bc08aa"/>    <section>
    <title>nStar()</title>
<indexterm><primary>nStar</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>nStar</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>int <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::nStar<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Total number of stars. </para>
</para>
<para>
Definition at line 286 of file Basis.h.</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1a13ed27641b796e2e077d443fb7458b7b"/>    <section>
    <title>nBasis()</title>
<indexterm><primary>nBasis</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>nBasis</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>int <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::nBasis</computeroutput></para><para>

<para>Total number of nonzero symmetry-adapted basis functions. </para>
</para>
<para>
Definition at line 666 of file Basis.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1aa5423219c8a82622dc5b691317a050b1"/>    <section>
    <title>star()</title>
<indexterm><primary>star</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>star</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>const <link linkend="_classPscf_1_1Basis">Basis</link>&lt; D &gt;::<link linkend="_classPscf_1_1Basis_1_1Star">Star</link> &amp; <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::star (int i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get a <link linkend="_classPscf_1_1Basis_1_1Star">Star</link>, access by integer index. </para>
</para>
<para>
Definition at line 296 of file Basis.h.</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1a89037c222b32863b02ffa44bb83b38f6"/>    <section>
    <title>wave()</title>
<indexterm><primary>wave</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>wave</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>const <link linkend="_classPscf_1_1Basis">Basis</link>&lt; D &gt;::<link linkend="_classPscf_1_1Basis_1_1Wave">Wave</link> &amp; <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::wave (int i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get a specific <link linkend="_classPscf_1_1Basis_1_1Wave">Wave</link>, access by integer index. </para>
</para>
<para>
Definition at line 291 of file Basis.h.</para>
    </section><anchor xml:id="_classPscf_1_1Basis_1a8f8ac5fb0d7061f99f532073d6cd5445"/>    <section>
    <title>waveId()</title>
<indexterm><primary>waveId</primary><secondary>Pscf::Basis&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Basis&lt; D &gt;</primary><secondary>waveId</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>int <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>&lt; D &gt;::waveId (<link linkend="_classPscf_1_1IntVec">IntVec</link>&lt; D &gt; vector) const</computeroutput></para><para>

<para>Get integer index of a <link linkend="_classPscf_1_1Basis_1_1Wave">Wave</link>. </para>
</para>
<para>
Definition at line 300 of file Basis.h.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
Basis.hBasis.tpp</section>
</section>
