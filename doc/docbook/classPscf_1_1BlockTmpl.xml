<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classPscf_1_1BlockTmpl">
<title>Pscf::BlockTmpl&lt; TP &gt; Class Template Reference</title>
<indexterm><primary>Pscf::BlockTmpl&lt; TP &gt;</primary></indexterm>
<para>

<para>Class template for a block in a block copolymer. </para>
 
</para>
<para>
<computeroutput>#include &lt;BlockTmpl.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Pscf::BlockTmpl&lt; TP &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classPscf_1_1BlockTmpl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classPscf_1_1BlockTmpl_1a3853efb61d318e2c6319d0d29554aced">BlockTmpl</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classPscf_1_1BlockTmpl_1a0b78af53b57076836fb03b08cc62f0f6">~BlockTmpl</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classPscf_1_1BlockTmpl_1a3d0952d6a99d241b1a5c12078cfe4799">setKuhn</link> (double <link linkend="_classPscf_1_1BlockTmpl_1a150e0213180f94ccfc6525a92bfdaacb">kuhn</link>)</para>

<para>Set monomer statistical segment length. </para>
</listitem>
            <listitem><para>TP &amp; <link linkend="_classPscf_1_1BlockTmpl_1a3fa54e799dc13d2429b3372d637cdc8c">propagator</link> (int directionId)</para>

<para>Get a Propagator for a specified direction. </para>
</listitem>
            <listitem><para>const TP &amp; <link linkend="_classPscf_1_1BlockTmpl_1a8dd68705b983acd44a449234a4eae455">propagator</link> (int directionId) const</para>

<para>Get a const Propagator for a specified direction. </para>
</listitem>
            <listitem><para>TP::CField &amp; <link linkend="_classPscf_1_1BlockTmpl_1a77403ab547316b48cc5a761c8eee93d8">cField</link> ()</para>

<para>Get the associated monomer concentration field. </para>
</listitem>
            <listitem><para>double <link linkend="_classPscf_1_1BlockTmpl_1a150e0213180f94ccfc6525a92bfdaacb">kuhn</link> () const</para>

<para>Get monomer statistical segment length. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class TP&gt;
class Pscf::BlockTmpl&lt; TP &gt;</title></simplesect>


<para>Class template for a block in a block copolymer. </para>



<para>Class TP is a concrete propagator class. A BlockTmpl&lt;TP&gt; object has:</para>

<para><itemizedlist>
<listitem>
<para>two TP propagator objects, one per direction</para>
</listitem><listitem>
<para>a single monomer concentration field</para>
</listitem><listitem>
<para>a single kuhn length</para>
</listitem></itemizedlist>
</para>

<para>Each implementation of self-consistent field theory (SCFT) is defined in a different sub-namespace of <link linkend="_namespacePscf">Pscf</link>. Each such implementation defines a concrete propagator class and a concrete block class, which ar named Propagator and Block by convention.The Block class in each implementation is derived from BlockTmpl&lt;Propagator&gt;, using the following syntax: <literallayout><computeroutput>class&#32;Block&#32;:&#32;public&#32;BlockTmpl&lt;Propagator&gt;
{
&#32;&#32;....
}
</computeroutput></literallayout> The algorithms for taking one step of integration of the modified diffusion equation and for computing the monomer concentration field arising from monomers in one block must be implemented in the Block class. These algorithms must be implemented in member functions of the concrete Block class with the following interfaces: <literallayout><computeroutput>//&#32;---------------------------------------------------------------
//&#32;Take&#32;one&#32;step&#32;of&#32;integration&#32;of&#32;the&#32;modified&#32;diffusion&#32;equation.
//&#32;---------------------------------------------------------------
void&#32;step(Propagator::QField&#32;const&#32;&amp;&#32;in,&#32;Propagator::QField&amp;&#32;out);

//&#32;---------------------------------------------------------------
//&#32;Compute&#32;monomer&#32;concentration&#32;field&#32;for&#32;this&#32;block.
//
//&#32;\param&#32;prefactor&#32;&#32;numerical&#32;prefactor&#32;of&#32;phi/(Q*length)
//&#32;---------------------------------------------------------------
void&#32;computeConcentration(double&#32;prefactor);
</computeroutput></literallayout> These core algorithms are implemented in the Block class, rather than the Propagator class, because the data required to implement these algorithms generally depends on the monomer type and contour length step size ds of a particular block, and can thus be shared by the two propagators associated with a particular block. The data required to implement these algorithms cannot, however, be shared among propagators in different blocks of the same monomer type because the requirement that the length of each block be divided into an integer number of contour length steps implies that different blocks of arbitrary user-specified length must generally be assumed to have slightly different values for the step size ds.</para>

<para>The step() function is called in the implementation of the PropagatorTmpl::solve() member function, within a loop over steps. The computeConcentration() function is called in the implementation of the <link linkend="_classPscf_1_1PolymerTmpl_1a723466d0f7535df23e92bc18bc904871">PolymerTmpl::solve()</link> member function, within a loop over all blocks of the molecule that is called after solution of the modified diffusion equation for all propagators. </para>
<para>
Definition at line 89 of file BlockTmpl.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classPscf_1_1BlockTmpl_1a3853efb61d318e2c6319d0d29554aced"/>    <section>
    <title>BlockTmpl()</title>
<indexterm><primary>BlockTmpl</primary><secondary>Pscf::BlockTmpl&lt; TP &gt;</secondary></indexterm>
<indexterm><primary>Pscf::BlockTmpl&lt; TP &gt;</primary><secondary>BlockTmpl</secondary></indexterm>
<computeroutput>template&lt;class TP &gt; </computeroutput><para><computeroutput><link linkend="_classPscf_1_1BlockTmpl">Pscf::BlockTmpl</link>&lt; TP &gt;::<link linkend="_classPscf_1_1BlockTmpl">BlockTmpl</link></computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 205 of file BlockTmpl.h.</para>
    </section><anchor xml:id="_classPscf_1_1BlockTmpl_1a0b78af53b57076836fb03b08cc62f0f6"/>    <section>
    <title>~BlockTmpl()</title>
<indexterm><primary>~BlockTmpl</primary><secondary>Pscf::BlockTmpl&lt; TP &gt;</secondary></indexterm>
<indexterm><primary>Pscf::BlockTmpl&lt; TP &gt;</primary><secondary>~BlockTmpl</secondary></indexterm>
<computeroutput>template&lt;class TP &gt; </computeroutput><para><computeroutput><link linkend="_classPscf_1_1BlockTmpl">Pscf::BlockTmpl</link>&lt; TP &gt;::~<link linkend="_classPscf_1_1BlockTmpl">BlockTmpl</link> ( )<computeroutput>[virtual]</computeroutput>, <computeroutput>[default]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classPscf_1_1BlockTmpl_1a3d0952d6a99d241b1a5c12078cfe4799"/>    <section>
    <title>setKuhn()</title>
<indexterm><primary>setKuhn</primary><secondary>Pscf::BlockTmpl&lt; TP &gt;</secondary></indexterm>
<indexterm><primary>Pscf::BlockTmpl&lt; TP &gt;</primary><secondary>setKuhn</secondary></indexterm>
<computeroutput>template&lt;class TP &gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1BlockTmpl">Pscf::BlockTmpl</link>&lt; TP &gt;::setKuhn (double kuhn)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Set monomer statistical segment length. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>kuhn</entry>
                                <entry>
<para>monomer statistical segment length </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 226 of file BlockTmpl.h.</para>
    </section><anchor xml:id="_classPscf_1_1BlockTmpl_1a3fa54e799dc13d2429b3372d637cdc8c"/>    <section>
    <title>propagator()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>propagator</primary><secondary>Pscf::BlockTmpl&lt; TP &gt;</secondary></indexterm>
<indexterm><primary>Pscf::BlockTmpl&lt; TP &gt;</primary><secondary>propagator</secondary></indexterm>
<computeroutput>template&lt;class TP &gt; </computeroutput><para><computeroutput>TP &amp; <link linkend="_classPscf_1_1BlockTmpl">Pscf::BlockTmpl</link>&lt; TP &gt;::propagator (int directionId)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get a Propagator for a specified direction. </para>
</para>

<para>For a block with v0 = vertexId(0) and v1 = vertexId(1), propagator(0) propagates from vertex v0 to v1, while propagator(1) propagates from vertex v1 to v0.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>directionId</entry>
                                <entry>
<para>integer index for direction (0 or 1) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 165 of file BlockTmpl.h.</para>
    </section><anchor xml:id="_classPscf_1_1BlockTmpl_1a8dd68705b983acd44a449234a4eae455"/>    <section>
    <title>propagator()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>propagator</primary><secondary>Pscf::BlockTmpl&lt; TP &gt;</secondary></indexterm>
<indexterm><primary>Pscf::BlockTmpl&lt; TP &gt;</primary><secondary>propagator</secondary></indexterm>
<computeroutput>template&lt;class TP &gt; </computeroutput><para><computeroutput>const TP &amp; <link linkend="_classPscf_1_1BlockTmpl">Pscf::BlockTmpl</link>&lt; TP &gt;::propagator (int directionId) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get a const Propagator for a specified direction. </para>
</para>

<para>See above for number conventions.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>directionId</entry>
                                <entry>
<para>integer index for direction (0 or 1) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 174 of file BlockTmpl.h.</para>
    </section><anchor xml:id="_classPscf_1_1BlockTmpl_1a77403ab547316b48cc5a761c8eee93d8"/>    <section>
    <title>cField()</title>
<indexterm><primary>cField</primary><secondary>Pscf::BlockTmpl&lt; TP &gt;</secondary></indexterm>
<indexterm><primary>Pscf::BlockTmpl&lt; TP &gt;</primary><secondary>cField</secondary></indexterm>
<computeroutput>template&lt;class TP &gt; </computeroutput><para><computeroutput>TP::CField &amp; <link linkend="_classPscf_1_1BlockTmpl">Pscf::BlockTmpl</link>&lt; TP &gt;::cField<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the associated monomer concentration field. </para>
</para>
<para>
Definition at line 185 of file BlockTmpl.h.</para>
    </section><anchor xml:id="_classPscf_1_1BlockTmpl_1a150e0213180f94ccfc6525a92bfdaacb"/>    <section>
    <title>kuhn()</title>
<indexterm><primary>kuhn</primary><secondary>Pscf::BlockTmpl&lt; TP &gt;</secondary></indexterm>
<indexterm><primary>Pscf::BlockTmpl&lt; TP &gt;</primary><secondary>kuhn</secondary></indexterm>
<computeroutput>template&lt;class TP &gt; </computeroutput><para><computeroutput>double <link linkend="_classPscf_1_1BlockTmpl">Pscf::BlockTmpl</link>&lt; TP &gt;::kuhn<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get monomer statistical segment length. </para>
</para>
<para>
Definition at line 194 of file BlockTmpl.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
BlockTmpl.h</section>
</section>
