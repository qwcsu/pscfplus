<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classPscf_1_1LuSolver">
<title>Pscf::LuSolver Class Reference</title>
<indexterm><primary>Pscf::LuSolver</primary></indexterm>
<para>

<para>Solve Ax=b by LU decomposition of A. </para>
 
</para>
<para>
<computeroutput>#include &lt;LuSolver.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classPscf_1_1LuSolver_1acb10451ad076a4890afd267466f0e3fe">LuSolver</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classPscf_1_1LuSolver_1a112c8b9f7fbd683acc05c1adbb767a8c">~LuSolver</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1LuSolver_1a446e26c34c43c7f317d9d6567a235ab3">allocate</link> (int n)</para>

<para>Allocate memory. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1LuSolver_1ada0b9c8fe60e22decffdd6a9474cabe4">computeLU</link> (const <link linkend="_classUtil_1_1Matrix">Matrix</link>&lt; double &gt; &amp;A)</para>

<para>Compute the LU decomposition for later use. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1LuSolver_1abd6b9fff59e00ecdd9509afb97b34b09">solve</link> (<link linkend="_classUtil_1_1Array">Array</link>&lt; double &gt; &amp;b, <link linkend="_classUtil_1_1Array">Array</link>&lt; double &gt; &amp;x)</para>

<para>Solve Ax = b for known b to compute x. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1LuSolver_1a0c7edd8612d23f24dc38700f5ef0c678">inverse</link> (<link linkend="_classUtil_1_1Matrix">Matrix</link>&lt; double &gt; &amp;inv)</para>

<para>Compute inverse of matrix A. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Solve Ax=b by LU decomposition of A. </para>



<para>This class is a simple wrapper for the functions provided by the Gnu Scientific Library (GSL). </para>
<para>
Definition at line 30 of file LuSolver.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classPscf_1_1LuSolver_1acb10451ad076a4890afd267466f0e3fe"/>    <section>
    <title>LuSolver()</title>
<indexterm><primary>LuSolver</primary><secondary>Pscf::LuSolver</secondary></indexterm>
<indexterm><primary>Pscf::LuSolver</primary><secondary>LuSolver</secondary></indexterm>
<para><computeroutput>Pscf::LuSolver::LuSolver ( )</computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 14 of file LuSolver.cpp.</para>
    </section><anchor xml:id="_classPscf_1_1LuSolver_1a112c8b9f7fbd683acc05c1adbb767a8c"/>    <section>
    <title>~LuSolver()</title>
<indexterm><primary>~LuSolver</primary><secondary>Pscf::LuSolver</secondary></indexterm>
<indexterm><primary>Pscf::LuSolver</primary><secondary>~LuSolver</secondary></indexterm>
<para><computeroutput>Pscf::LuSolver::~LuSolver ( )</computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 34 of file LuSolver.cpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classPscf_1_1LuSolver_1a446e26c34c43c7f317d9d6567a235ab3"/>    <section>
    <title>allocate()</title>
<indexterm><primary>allocate</primary><secondary>Pscf::LuSolver</secondary></indexterm>
<indexterm><primary>Pscf::LuSolver</primary><secondary>allocate</secondary></indexterm>
<para><computeroutput>void Pscf::LuSolver::allocate (int n)</computeroutput></para><para>

<para>Allocate memory. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>dimension of n x n square array. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 46 of file LuSolver.cpp.</para>
<para>
References UTIL_CHECK.</para>
<para>
Referenced by Pscf::Homogeneous::Mixture::computePhi(), Pscf::Pspg::Continuous::AmIterator&lt; D &gt;::minimizeCoeff(), and Pscf::ChiInteraction::readParameters().</para>
    </section><anchor xml:id="_classPscf_1_1LuSolver_1ada0b9c8fe60e22decffdd6a9474cabe4"/>    <section>
    <title>computeLU()</title>
<indexterm><primary>computeLU</primary><secondary>Pscf::LuSolver</secondary></indexterm>
<indexterm><primary>Pscf::LuSolver</primary><secondary>computeLU</secondary></indexterm>
<para><computeroutput>void Pscf::LuSolver::computeLU (const <link linkend="_classUtil_1_1Matrix">Matrix</link>&lt; double &gt; &amp; A)</computeroutput></para><para>

<para>Compute the LU decomposition for later use. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>A</entry>
                                <entry>
<para>the square matrix A in problem Ax=b. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 63 of file LuSolver.cpp.</para>
<para>
References Util::Matrix&lt; Data &gt;::capacity1(), Util::Matrix&lt; Data &gt;::capacity2(), and UTIL_CHECK.</para>
<para>
Referenced by Pscf::Homogeneous::Mixture::computePhi(), Pscf::Pspg::Continuous::AmIterator&lt; D &gt;::minimizeCoeff(), and Pscf::ChiInteraction::readParameters().</para>
    </section><anchor xml:id="_classPscf_1_1LuSolver_1abd6b9fff59e00ecdd9509afb97b34b09"/>    <section>
    <title>solve()</title>
<indexterm><primary>solve</primary><secondary>Pscf::LuSolver</secondary></indexterm>
<indexterm><primary>Pscf::LuSolver</primary><secondary>solve</secondary></indexterm>
<para><computeroutput>void Pscf::LuSolver::solve (<link linkend="_classUtil_1_1Array">Array</link>&lt; double &gt; &amp; b, <link linkend="_classUtil_1_1Array">Array</link>&lt; double &gt; &amp; x)</computeroutput></para><para>

<para>Solve Ax = b for known b to compute x. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>the RHS vector </para>
</entry>
                            </row>
                            <row>
                                <entry>x</entry>
                                <entry>
<para>the solution vector </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 83 of file LuSolver.cpp.</para>
<para>
References Util::Array&lt; Data &gt;::capacity(), Util::Array&lt; Data &gt;::cArray(), and UTIL_CHECK.</para>
<para>
Referenced by Pscf::Homogeneous::Mixture::computePhi(), and Pscf::Pspg::Continuous::AmIterator&lt; D &gt;::minimizeCoeff().</para>
    </section><anchor xml:id="_classPscf_1_1LuSolver_1a0c7edd8612d23f24dc38700f5ef0c678"/>    <section>
    <title>inverse()</title>
<indexterm><primary>inverse</primary><secondary>Pscf::LuSolver</secondary></indexterm>
<indexterm><primary>Pscf::LuSolver</primary><secondary>inverse</secondary></indexterm>
<para><computeroutput>void Pscf::LuSolver::inverse (<link linkend="_classUtil_1_1Matrix">Matrix</link>&lt; double &gt; &amp; inv)</computeroutput></para><para>

<para>Compute inverse of matrix A. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>inv</entry>
                                <entry>
<para>inverse of matrix A (output) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 104 of file LuSolver.cpp.</para>
<para>
References Util::Matrix&lt; Data &gt;::cArray(), and UTIL_CHECK.</para>
<para>
Referenced by Pscf::ChiInteraction::readParameters().</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
LuSolver.hLuSolver.cpp</section>
</section>
