<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classPscf_1_1Pspg_1_1FieldIo">
<title>Pscf::Pspg::FieldIo&lt; D &gt; Class Template Reference</title>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary></indexterm>
<para>

<para>File input/output operations for fields in several file formats. </para>
 
</para>
<para>
<computeroutput>#include &lt;FieldIo.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a50440f0ced861dc4579c01f5ea0679e4">FieldIo</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a2b54b61ae7e665a7b659838b03838746">~FieldIo</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a98de183ab6ea89e05ac36a38ca9bfc57">associate</link> (<link linkend="_classPscf_1_1UnitCell">UnitCell</link>&lt; D &gt; &amp;unitCell, <link linkend="_classPscf_1_1Mesh">Mesh</link>&lt; D &gt; &amp;mesh, <link linkend="_classPscf_1_1Pspg_1_1FFT">FFT</link>&lt; D &gt; &amp;fft, std::string &amp;groupName, <link linkend="_classPscf_1_1Basis">Basis</link>&lt; D &gt; &amp;basis, <link linkend="_classUtil_1_1FileMaster">FileMaster</link> &amp;fileMaster)</para>

<para>Get and store addresses of associated objects. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Field File IO</title>
        <itemizedlist>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a6f59365d31f89174f5173b30d5e5d391">readFieldsBasis</link> (std::istream &amp;in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp;fields)</para>

<para>Read concentration or chemical potential field components from file. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1ac8870d2586dea74dbb678b5a7e4b6c1e">readFieldsBasis</link> (std::string filename, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp;fields)</para>

<para>Read concentration or chemical potential field components from file. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1aeab4a68b7c538e3095eabbf473fd4e21">writeFieldsBasis</link> (std::ostream &amp;out, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; const &amp;fields)</para>

<para>Write concentration or chemical potential field components to file. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a0c1c0c6a44a2e4627e3601dece969399">writeFieldsBasis</link> (std::string filename, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; const &amp;fields)</para>

<para>Write concentration or chemical potential field components to file. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a5bb6b45880a4d25f93ce77ab8cfa2e20">readFieldsRGrid</link> (std::istream &amp;in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp;fields)</para>

<para>Read array of RField objects (fields on an r-space grid) from file. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a1fdba3bd25a061f82bb27b105db6fbed">readFieldsRGrid</link> (std::string filename, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp;fields)</para>

<para>Read array of RField objects (fields on an r-space grid) from file. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a10d02082d8139fdbf28ae699be5afe75">writeFieldsRGrid</link> (std::ostream &amp;out, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; const &amp;fields)</para>

<para>Write array of RField objects (fields on an r-space grid) to file. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a07bdd52376c9f984d44a579db56741c4">writeFieldsRGrid</link> (std::string filename, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; const &amp;fields)</para>

<para>Write array of RField objects (fields on an r-space grid) to file. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1af82efee2d46bd7b1b7a0d4b174b7d76b">readFieldsKGrid</link> (std::istream &amp;in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &gt; &amp;fields)</para>

<para>Read array of RFieldDft objects (k-space fields) from file. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1ade19a95358743f3152ed0c20c3c05ee5">readFieldsKGrid</link> (std::string filename, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &gt; &amp;fields)</para>

<para>Read array of RFieldDft objects (k-space fields) from file. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a4798c1776599fb1455b05c386fe22ac4">writeFieldsKGrid</link> (std::ostream &amp;out, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &gt; const &amp;fields)</para>

<para>Write array of RFieldDft objects (k-space fields) to file. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a3b52005ba738f74cb9926db249ada9fe">writeFieldsKGrid</link> (std::string filename, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &gt; const &amp;fields)</para>

<para>Write array of RFieldDft objects (k-space fields) to a file. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a99998a652e4cf87f5bfd19212167bd7c">writeFieldHeader</link> (std::ostream &amp;out, int nMonomer) const</para>

<para>Write header for field file (fortran pscf format) </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Field Format Conversion    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a57ed0e842afc492a59a622ca57ae0643">convertBasisToKGrid</link> (<link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; const &amp;components, <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &amp;dft)</para>

<para>Convert field from symmetrized basis to Fourier transform (k-grid). </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1ac0944a7729345321afb8ce44074b2748">convertBasisToKGrid</link> (<link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp;in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &gt; &amp;out)</para>

<para>Convert fields from symmetrized basis to Fourier transform (kgrid). </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1ac0b44df6153819e81b1921b330427458">convertKGridToBasis</link> (<link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; const &amp;dft, <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &amp;components)</para>

<para>Convert field from Fourier transform (k-grid) to symmetrized basis. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1af6d149943fffda2d84c8a2fca7b2e9bc">convertKGridToBasis</link> (<link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &gt; &amp;in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp;out)</para>

<para>Convert fields from Fourier transform (kgrid) to symmetrized basis. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a639640d79747ba9dd73128e70f158536">convertBasisToRGrid</link> (<link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp;in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp;out)</para>

<para>Convert fields from symmetrized basis to spatial grid (rgrid). </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo_1a0fd5ab2fdd5aeb7f61b4b1851cca338d">convertRGridToBasis</link> (<link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp;in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp;out)</para>

<para>Convert fields from spatial grid (rgrid) to symmetrized basis. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;int D&gt;
class Pscf::Pspg::FieldIo&lt; D &gt;</title></simplesect>


<para>File input/output operations for fields in several file formats. </para>
<para>
Definition at line 35 of file FieldIo.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a50440f0ced861dc4579c01f5ea0679e4"/>    <section>
    <title>FieldIo()</title>
<indexterm><primary>FieldIo</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>FieldIo</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput><link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::<link linkend="_classPscf_1_1Pspg_1_1FieldIo">FieldIo</link></computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 34 of file FieldIo.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a2b54b61ae7e665a7b659838b03838746"/>    <section>
    <title>~FieldIo()</title>
<indexterm><primary>~FieldIo</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>~FieldIo</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput><link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::~<link linkend="_classPscf_1_1Pspg_1_1FieldIo">FieldIo</link></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 47 of file FieldIo.tpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a98de183ab6ea89e05ac36a38ca9bfc57"/>    <section>
    <title>associate()</title>
<indexterm><primary>associate</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>associate</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::associate (<link linkend="_classPscf_1_1UnitCell">UnitCell</link>&lt; D &gt; &amp; unitCell, <link linkend="_classPscf_1_1Mesh">Mesh</link>&lt; D &gt; &amp; mesh, <link linkend="_classPscf_1_1Pspg_1_1FFT">FFT</link>&lt; D &gt; &amp; fft, std::string &amp; groupName, <link linkend="_classPscf_1_1Basis">Basis</link>&lt; D &gt; &amp; basis, <link linkend="_classUtil_1_1FileMaster">FileMaster</link> &amp; fileMaster)</computeroutput></para><para>

<para>Get and store addresses of associated objects. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>unitCell</entry>
                                <entry>
<para>associated crystallographic UnitCell&lt;D&gt; </para>
</entry>
                            </row>
                            <row>
                                <entry>mesh</entry>
                                <entry>
<para>associated spatial discretization Mesh&lt;D&gt; </para>
</entry>
                            </row>
                            <row>
                                <entry>fft</entry>
                                <entry>
<para>associated <link linkend="_classPscf_1_1Pspg_1_1FFT">FFT</link> object for fast transforms </para>
</entry>
                            </row>
                            <row>
                                <entry>groupName</entry>
                                <entry>
<para>space group name string </para>
</entry>
                            </row>
                            <row>
                                <entry>basis</entry>
                                <entry>
<para>associated <link linkend="_classPscf_1_1Basis">Basis</link> object </para>
</entry>
                            </row>
                            <row>
                                <entry>fileMaster</entry>
                                <entry>
<para>associated FileMaster (for file paths) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 54 of file FieldIo.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a6f59365d31f89174f5173b30d5e5d391"/>    <section>
    <title>readFieldsBasis()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>readFieldsBasis</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>readFieldsBasis</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::readFieldsBasis (std::istream &amp; in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp; fields)</computeroutput></para><para>

<para>Read concentration or chemical potential field components from file. </para>
</para>

<para>This function reads components in a symmetry adapted basis from file in.</para>

<para>The capacity of DArray fields is equal to nMonomer, and element fields[i] is a DArray containing components of the field associated with monomer type i.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream (i.e., input file) </para>
</entry>
                            </row>
                            <row>
                                <entry>fields</entry>
                                <entry>
<para>array of fields (symmetry adapted basis components) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 70 of file FieldIo.tpp.</para>
<para>
References Util::DArray&lt; Data &gt;::allocate(), and UTIL_CHECK.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1ac8870d2586dea74dbb678b5a7e4b6c1e"/>    <section>
    <title>readFieldsBasis()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>readFieldsBasis</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>readFieldsBasis</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::readFieldsBasis (std::string filename, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp; fields)</computeroutput></para><para>

<para>Read concentration or chemical potential field components from file. </para>
</para>

<para>This function opens an input file with the specified filename, reads components in symmetry-adapted form from that file, and closes the file.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>filename</entry>
                                <entry>
<para>name of input file </para>
</entry>
                            </row>
                            <row>
                                <entry>fields</entry>
                                <entry>
<para>array of fields (symmetry adapted basis components) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 147 of file FieldIo.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1aeab4a68b7c538e3095eabbf473fd4e21"/>    <section>
    <title>writeFieldsBasis()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>writeFieldsBasis</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>writeFieldsBasis</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::writeFieldsBasis (std::ostream &amp; out, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; const &amp; fields)</computeroutput></para><para>

<para>Write concentration or chemical potential field components to file. </para>
</para>

<para>This function writes components in a symmetry adapted basis.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream (i.e., output file) </para>
</entry>
                            </row>
                            <row>
                                <entry>fields</entry>
                                <entry>
<para>array of fields (symmetry adapted basis components) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 158 of file FieldIo.tpp.</para>
<para>
References Util::DArray&lt; Data &gt;::allocate(), and UTIL_CHECK.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a0c1c0c6a44a2e4627e3601dece969399"/>    <section>
    <title>writeFieldsBasis()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>writeFieldsBasis</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>writeFieldsBasis</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::writeFieldsBasis (std::string filename, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; const &amp; fields)</computeroutput></para><para>

<para>Write concentration or chemical potential field components to file. </para>
</para>

<para>This function opens an output file with the specified filename, writes components in symmetry-adapted form to that file, and then closes the file.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>filename</entry>
                                <entry>
<para>name of input file </para>
</entry>
                            </row>
                            <row>
                                <entry>fields</entry>
                                <entry>
<para>array of fields (symmetry adapted basis components) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 206 of file FieldIo.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a5bb6b45880a4d25f93ce77ab8cfa2e20"/>    <section>
    <title>readFieldsRGrid()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>readFieldsRGrid</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>readFieldsRGrid</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::readFieldsRGrid (std::istream &amp; in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp; fields)</computeroutput></para><para>

<para>Read array of RField objects (fields on an r-space grid) from file. </para>
</para>

<para>The capacity of array fields is equal to nMonomer, and element fields[i] is the RField&lt;D&gt; associated with monomer type i.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream (i.e., input file) </para>
</entry>
                            </row>
                            <row>
                                <entry>fields</entry>
                                <entry>
<para>array of RField fields (r-space grid) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 216 of file FieldIo.tpp.</para>
<para>
References Util::DArray&lt; Data &gt;::allocate(), and UTIL_CHECK.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a1fdba3bd25a061f82bb27b105db6fbed"/>    <section>
    <title>readFieldsRGrid()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>readFieldsRGrid</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>readFieldsRGrid</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::readFieldsRGrid (std::string filename, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp; fields)</computeroutput></para><para>

<para>Read array of RField objects (fields on an r-space grid) from file. </para>
</para>

<para>The capacity of array fields is equal to nMonomer, and element fields[i] is the RField&lt;D&gt; associated with monomer type i.</para>

<para>This function opens an input file with the specified filename, reads fields in RField&lt;D&gt; real-space grid format from that file, and then closes the file.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>filename</entry>
                                <entry>
<para>name of input file </para>
</entry>
                            </row>
                            <row>
                                <entry>fields</entry>
                                <entry>
<para>array of RField fields (r-space grid) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 281 of file FieldIo.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a10d02082d8139fdbf28ae699be5afe75"/>    <section>
    <title>writeFieldsRGrid()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>writeFieldsRGrid</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>writeFieldsRGrid</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::writeFieldsRGrid (std::ostream &amp; out, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; const &amp; fields)</computeroutput></para><para>

<para>Write array of RField objects (fields on an r-space grid) to file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream (i.e., output file) </para>
</entry>
                            </row>
                            <row>
                                <entry>fields</entry>
                                <entry>
<para>array of RField fields (r-space grid) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 291 of file FieldIo.tpp.</para>
<para>
References Util::DArray&lt; Data &gt;::allocate(), and UTIL_CHECK.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a07bdd52376c9f984d44a579db56741c4"/>    <section>
    <title>writeFieldsRGrid()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>writeFieldsRGrid</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>writeFieldsRGrid</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::writeFieldsRGrid (std::string filename, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; const &amp; fields)</computeroutput></para><para>

<para>Write array of RField objects (fields on an r-space grid) to file. </para>
</para>

<para>This function opens an output file with the specified filename, writes fields in RField&lt;D&gt; real-space grid format to that file, and then closes the file.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>filename</entry>
                                <entry>
<para>name of output file </para>
</entry>
                            </row>
                            <row>
                                <entry>fields</entry>
                                <entry>
<para>array of RField fields (r-space grid) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 351 of file FieldIo.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1af82efee2d46bd7b1b7a0d4b174b7d76b"/>    <section>
    <title>readFieldsKGrid()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>readFieldsKGrid</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>readFieldsKGrid</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::readFieldsKGrid (std::istream &amp; in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &gt; &amp; fields)</computeroutput></para><para>

<para>Read array of RFieldDft objects (k-space fields) from file. </para>
</para>

<para>The capacity of the array is equal to nMonomer, and element fields[i] is the discrete Fourier transform of the field for monomer type i.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream (i.e., input file) </para>
</entry>
                            </row>
                            <row>
                                <entry>fields</entry>
                                <entry>
<para>array of RFieldDft fields (k-space grid) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 361 of file FieldIo.tpp.</para>
<para>
References Util::DArray&lt; Data &gt;::allocate(), and UTIL_CHECK.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1ade19a95358743f3152ed0c20c3c05ee5"/>    <section>
    <title>readFieldsKGrid()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>readFieldsKGrid</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>readFieldsKGrid</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::readFieldsKGrid (std::string filename, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &gt; &amp; fields)</computeroutput></para><para>

<para>Read array of RFieldDft objects (k-space fields) from file. </para>
</para>

<para>This function opens a file with name filename, reads discrete Fourier components (Dft) of fields from that file, and closes the file.</para>

<para>The capacity of the array is equal to nMonomer, and element fields[i] is the discrete Fourier transform of the field for monomer type i.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>filename</entry>
                                <entry>
<para>name of input file </para>
</entry>
                            </row>
                            <row>
                                <entry>fields</entry>
                                <entry>
<para>array of RFieldDft fields (k-space grid) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 413 of file FieldIo.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a4798c1776599fb1455b05c386fe22ac4"/>    <section>
    <title>writeFieldsKGrid()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>writeFieldsKGrid</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>writeFieldsKGrid</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::writeFieldsKGrid (std::ostream &amp; out, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &gt; const &amp; fields)</computeroutput></para><para>

<para>Write array of RFieldDft objects (k-space fields) to file. </para>
</para>

<para>The capacity of the array fields is equal to nMonomer. Element fields[i] is the discrete Fourier transform of the field for monomer type i.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream (i.e., output file) </para>
</entry>
                            </row>
                            <row>
                                <entry>fields</entry>
                                <entry>
<para>array of RFieldDft fields </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 423 of file FieldIo.tpp.</para>
<para>
References Util::DArray&lt; Data &gt;::allocate(), and UTIL_CHECK.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a3b52005ba738f74cb9926db249ada9fe"/>    <section>
    <title>writeFieldsKGrid()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>writeFieldsKGrid</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>writeFieldsKGrid</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::writeFieldsKGrid (std::string filename, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &gt; const &amp; fields)</computeroutput></para><para>

<para>Write array of RFieldDft objects (k-space fields) to a file. </para>
</para>

<para>This function opens a file with name filename, writes discrete Fourier transform components (DFT) components of fields to that file, and closes the file.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>filename</entry>
                                <entry>
<para>name of output file. </para>
</entry>
                            </row>
                            <row>
                                <entry>fields</entry>
                                <entry>
<para>array of RFieldDft fields (k-space grid) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 469 of file FieldIo.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a99998a652e4cf87f5bfd19212167bd7c"/>    <section>
    <title>writeFieldHeader()</title>
<indexterm><primary>writeFieldHeader</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>writeFieldHeader</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::writeFieldHeader (std::ostream &amp; out, int nMonomer) const</computeroutput></para><para>

<para>Write header for field file (fortran pscf format) </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream (i.e., output file) </para>
</entry>
                            </row>
                            <row>
                                <entry>nMonomer</entry>
                                <entry>
<para>number of monomer types </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 509 of file FieldIo.tpp.</para>
<para>
References Pscf::writeUnitCellHeader().</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a57ed0e842afc492a59a622ca57ae0643"/>    <section>
    <title>convertBasisToKGrid()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>convertBasisToKGrid</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>convertBasisToKGrid</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::convertBasisToKGrid (<link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; const &amp; components, <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &amp; dft)</computeroutput></para><para>

<para>Convert field from symmetrized basis to Fourier transform (k-grid). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>components</entry>
                                <entry>
<para>coefficients of symmetry-adapted basis functions </para>
</entry>
                            </row>
                            <row>
                                <entry>dft</entry>
                                <entry>
<para>discrete Fourier transform of a real field </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 522 of file FieldIo.tpp.</para>
<para>
References Pscf::Basis&lt; D &gt;::Star::beginId, Pscf::Basis&lt; D &gt;::Star::cancel, Pscf::Pspg::DField&lt; cudaReal &gt;::cDField(), Pscf::Pspg::DField&lt; cudaComplex &gt;::cDField(), Pscf::Pspg::RDFieldDft&lt; D &gt;::dftDimensions(), Pscf::Basis&lt; D &gt;::Star::invertFlag, Pscf::Mesh&lt; D &gt;::rank(), Pscf::Mesh&lt; D &gt;::size(), UTIL_CHECK, and UTIL_THROW.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1ac0944a7729345321afb8ce44074b2748"/>    <section>
    <title>convertBasisToKGrid()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>convertBasisToKGrid</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>convertBasisToKGrid</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::convertBasisToKGrid (<link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp; in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &gt; &amp; out)</computeroutput></para><para>

<para>Convert fields from symmetrized basis to Fourier transform (kgrid). </para>
</para>

<para>The in and out parameters are arrays of fields, in which element number i is the field associated with monomer type i.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>components of fields in symmetry adapted basis </para>
</entry>
                            </row>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>fields defined as discrete Fourier transforms (k-grid) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 759 of file FieldIo.tpp.</para>
<para>
References UTIL_ASSERT.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1ac0b44df6153819e81b1921b330427458"/>    <section>
    <title>convertKGridToBasis()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>convertKGridToBasis</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>convertKGridToBasis</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::convertKGridToBasis (<link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; const &amp; dft, <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &amp; components)</computeroutput></para><para>

<para>Convert field from Fourier transform (k-grid) to symmetrized basis. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>dft</entry>
                                <entry>
<para>complex DFT (k-grid) representation of a field. </para>
</entry>
                            </row>
                            <row>
                                <entry>components</entry>
                                <entry>
<para>coefficients of symmetry-adapted basis functions. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 649 of file FieldIo.tpp.</para>
<para>
References Pscf::Basis&lt; D &gt;::Star::beginId, Pscf::Basis&lt; D &gt;::Star::cancel, Pscf::Pspg::DField&lt; cudaReal &gt;::cDField(), Pscf::Pspg::DField&lt; cudaComplex &gt;::cDField(), Pscf::Pspg::RDFieldDft&lt; D &gt;::dftDimensions(), Pscf::Basis&lt; D &gt;::Star::endId, Pscf::Basis&lt; D &gt;::Star::invertFlag, Pscf::Mesh&lt; D &gt;::rank(), Pscf::Basis&lt; D &gt;::Star::size, UTIL_CHECK, and UTIL_THROW.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1af6d149943fffda2d84c8a2fca7b2e9bc"/>    <section>
    <title>convertKGridToBasis()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>convertKGridToBasis</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>convertKGridToBasis</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::convertKGridToBasis (<link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDFieldDft">RDFieldDft</link>&lt; D &gt; &gt; &amp; in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp; out)</computeroutput></para><para>

<para>Convert fields from Fourier transform (kgrid) to symmetrized basis. </para>
</para>

<para>The in and out parameters are each an array of fields, in which element i is the field associated with monomer type i.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>fields defined as discrete Fourier transforms (k-grid) </para>
</entry>
                            </row>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>components of fields in symmetry adapted basis </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 854 of file FieldIo.tpp.</para>
<para>
References UTIL_ASSERT.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a639640d79747ba9dd73128e70f158536"/>    <section>
    <title>convertBasisToRGrid()</title>
<indexterm><primary>convertBasisToRGrid</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>convertBasisToRGrid</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::convertBasisToRGrid (<link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp; in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp; out)</computeroutput></para><para>

<para>Convert fields from symmetrized basis to spatial grid (rgrid). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>fields in symmetry adapted basis form </para>
</entry>
                            </row>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>fields defined on real-space grid </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 869 of file FieldIo.tpp.</para>
<para>
References Util::DArray&lt; Data &gt;::allocate(), Util::DArray&lt; Data &gt;::deallocate(), and UTIL_ASSERT.</para>
    </section><anchor xml:id="_classPscf_1_1Pspg_1_1FieldIo_1a0fd5ab2fdd5aeb7f61b4b1851cca338d"/>    <section>
    <title>convertRGridToBasis()</title>
<indexterm><primary>convertRGridToBasis</primary><secondary>Pscf::Pspg::FieldIo&lt; D &gt;</secondary></indexterm>
<indexterm><primary>Pscf::Pspg::FieldIo&lt; D &gt;</primary><secondary>convertRGridToBasis</secondary></indexterm>
<computeroutput>template&lt;int D&gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1Pspg_1_1FieldIo">Pscf::Pspg::FieldIo</link>&lt; D &gt;::convertRGridToBasis (<link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp; in, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; <link linkend="_classPscf_1_1Pspg_1_1RDField">RDField</link>&lt; D &gt; &gt; &amp; out)</computeroutput></para><para>

<para>Convert fields from spatial grid (rgrid) to symmetrized basis. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>fields defined on real-space grid </para>
</entry>
                            </row>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>fields in symmetry adapted basis form </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 893 of file FieldIo.tpp.</para>
<para>
References Util::DArray&lt; Data &gt;::allocate(), Util::DArray&lt; Data &gt;::deallocate(), and UTIL_ASSERT.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
FieldIo.hFieldIo.tpp</section>
</section>
