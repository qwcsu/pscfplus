<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classPscf_1_1SymmetryGroup">
<title>Pscf::SymmetryGroup&lt; Symmetry &gt; Class Template Reference</title>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary></indexterm>
<para>

<para>Class template for a group of elements. </para>
 
</para>
<para>
<computeroutput>#include &lt;SymmetryGroup.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classPscf_1_1SymmetryGroup_1a4f98bd17cdca541c5976fd1421ffcb7d">SymmetryGroup</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_classPscf_1_1SymmetryGroup_1ad426fbf831c09de09ffd057fc3a6497d">SymmetryGroup</link> (const <link linkend="_classPscf_1_1SymmetryGroup">SymmetryGroup</link>&lt; Symmetry &gt; &amp;other)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><link linkend="_classPscf_1_1SymmetryGroup_1a42a75daf7a7ae5bff1be5fb11cc36437">~SymmetryGroup</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>bool <link linkend="_classPscf_1_1SymmetryGroup_1ad12b531cfca0694da1da3e5eafa94d4c">add</link> (Symmetry &amp;symmetry)</para>

<para>Add a new element to the group. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1SymmetryGroup_1ae0eafac7afb484bcc2e2eaec3bfc96ef">makeCompleteGroup</link> ()</para>

<para>Generate a complete group from the current elements. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1SymmetryGroup_1a1e6a8ed725d24f5c04610388184c20ce">clear</link> ()</para>

<para>Remove all elements except the identity. </para>
</listitem>
            <listitem><para>const Symmetry * <link linkend="_classPscf_1_1SymmetryGroup_1a960860eed62a8da6c3a59ca5560ba26f">find</link> (const Symmetry &amp;symmetry) const</para>

<para>Find a symmetry within a group. </para>
</listitem>
            <listitem><para>const Symmetry &amp; <link linkend="_classPscf_1_1SymmetryGroup_1a083de4d876bc2554c0adcb2191f4e5b2">identity</link> () const</para>

<para>Return a reference to the identity element. </para>
</listitem>
            <listitem><para>int <link linkend="_classPscf_1_1SymmetryGroup_1aa7872fc9d8afd0ac359cc4256d9be1ec">size</link> () const</para>

<para>Return number of elements in group (i.e., the order of the group). </para>
</listitem>
            <listitem><para><link linkend="_classPscf_1_1SymmetryGroup">SymmetryGroup</link>&lt; Symmetry &gt; &amp; <link linkend="_classPscf_1_1SymmetryGroup_1ab5476c1f5444e94f4c05a3578c83bf15">operator=</link> (const <link linkend="_classPscf_1_1SymmetryGroup">SymmetryGroup</link>&lt; Symmetry &gt; &amp;other)</para>

<para>Assignment operator. </para>
</listitem>
            <listitem><para>Symmetry &amp; <link linkend="_classPscf_1_1SymmetryGroup_1a653334621305a1d32bb3d396849a5985">operator[]</link> (int i)</para>

<para>Element access operator (by reference). </para>
</listitem>
            <listitem><para>const Symmetry &amp; <link linkend="_classPscf_1_1SymmetryGroup_1afbf06dae55e696ad28ba4f180248376f">operator[]</link> (int i) const</para>

<para>Element access operator (by reference). </para>
</listitem>
            <listitem><para>bool <link linkend="_classPscf_1_1SymmetryGroup_1a6b12f691359707b6a07dd588a1588286">isValid</link> () const</para>

<para>Return true if valid complete group, or throw an Exception. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class Symmetry&gt;
class Pscf::SymmetryGroup&lt; Symmetry &gt;</title></simplesect>


<para>Class template for a group of elements. </para>



<para>This is written as a template to allow the creation of groups that use different types of objects to represent symmetry elements. The simplest distinction is between point groups and full space groups.</para>

<para>The algorithm requires only the template parameter class Symmetry satisfy the following requirements:</para>

<para>1) A Symmetry must be default constructible. 2) An operator * is provided to represent element multiplication. 3) Operators == and != are provided to represent equality &amp; inequality. 4) A method Symmetry::inverse() must return the inverse of a Symmetry. 5) A static method Symmetry::identity() must return the identity. </para>
<para>
Definition at line 36 of file SymmetryGroup.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classPscf_1_1SymmetryGroup_1a4f98bd17cdca541c5976fd1421ffcb7d"/>    <section>
    <title>SymmetryGroup()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>SymmetryGroup</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>SymmetryGroup</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput><link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::<link linkend="_classPscf_1_1SymmetryGroup">SymmetryGroup</link></computeroutput></para><para>

<para>Default constructor. </para>
</para>

<para>After construction, the group contains only the identity element. </para>
<para>
Definition at line 25 of file SymmetryGroup.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1SymmetryGroup_1ad426fbf831c09de09ffd057fc3a6497d"/>    <section>
    <title>SymmetryGroup()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>SymmetryGroup</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>SymmetryGroup</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput><link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::<link linkend="_classPscf_1_1SymmetryGroup">SymmetryGroup</link> (const <link linkend="_classPscf_1_1SymmetryGroup">SymmetryGroup</link>&lt; Symmetry &gt; &amp; other)</computeroutput></para><para>

<para>Copy constructor. </para>
</para>
<para>
Definition at line 35 of file SymmetryGroup.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1SymmetryGroup_1a42a75daf7a7ae5bff1be5fb11cc36437"/>    <section>
    <title>~SymmetryGroup()</title>
<indexterm><primary>~SymmetryGroup</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>~SymmetryGroup</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput><link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::~<link linkend="_classPscf_1_1SymmetryGroup">SymmetryGroup</link></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 48 of file SymmetryGroup.tpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classPscf_1_1SymmetryGroup_1ad12b531cfca0694da1da3e5eafa94d4c"/>    <section>
    <title>add()</title>
<indexterm><primary>add</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>add</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput>bool <link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::add (Symmetry &amp; symmetry)</computeroutput></para><para>

<para>Add a new element to the group. </para>
</para>

<para>Return false if the element was already present, true otherwise.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>symmetry</entry>
                                <entry>
<para>new symmetry element. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if this is a new element, false if already present. </para>
</formalpara>
</para>
<para>
Definition at line 89 of file SymmetryGroup.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1SymmetryGroup_1ae0eafac7afb484bcc2e2eaec3bfc96ef"/>    <section>
    <title>makeCompleteGroup()</title>
<indexterm><primary>makeCompleteGroup</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>makeCompleteGroup</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::makeCompleteGroup</computeroutput></para><para>

<para>Generate a complete group from the current elements. </para>
</para>
<para>
Definition at line 109 of file SymmetryGroup.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1SymmetryGroup_1a1e6a8ed725d24f5c04610388184c20ce"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput>void <link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::clear</computeroutput></para><para>

<para>Remove all elements except the identity. </para>
</para>

<para>Return group to its state after default construction. </para>
<para>
Definition at line 151 of file SymmetryGroup.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1SymmetryGroup_1a960860eed62a8da6c3a59ca5560ba26f"/>    <section>
    <title>find()</title>
<indexterm><primary>find</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput>const Symmetry * <link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::find (const Symmetry &amp; symmetry) const</computeroutput></para><para>

<para>Find a symmetry within a group. </para>
</para>

<para>Return a pointer to a symmetry if it is in the group, or a null pointer if it is not. </para>
<para>
Definition at line 74 of file SymmetryGroup.tpp.</para>
<para>
Referenced by pscfpp.MakeMaker.MakeMaker::find().</para>
    </section><anchor xml:id="_classPscf_1_1SymmetryGroup_1a083de4d876bc2554c0adcb2191f4e5b2"/>    <section>
    <title>identity()</title>
<indexterm><primary>identity</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>identity</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput>const Symmetry &amp; <link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::identity<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return a reference to the identity element. </para>
</para>
<para>
Definition at line 143 of file SymmetryGroup.h.</para>
<para>
Referenced by Pscf::SymmetryGroup&lt; SpaceSymmetry&lt; D &gt; &gt;::operator=(), and Pscf::SymmetryGroup&lt; SpaceSymmetry&lt; D &gt; &gt;::SymmetryGroup().</para>
    </section><anchor xml:id="_classPscf_1_1SymmetryGroup_1aa7872fc9d8afd0ac359cc4256d9be1ec"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput>int <link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::size<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return number of elements in group (i.e., the order of the group). </para>
</para>
<para>
Definition at line 135 of file SymmetryGroup.h.</para>
<para>
Referenced by Pscf::SymmetryGroup&lt; SpaceSymmetry&lt; D &gt; &gt;::operator=(), and Pscf::SymmetryGroup&lt; SpaceSymmetry&lt; D &gt; &gt;::SymmetryGroup().</para>
    </section><anchor xml:id="_classPscf_1_1SymmetryGroup_1ab5476c1f5444e94f4c05a3578c83bf15"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput><link linkend="_classPscf_1_1SymmetryGroup">SymmetryGroup</link>&lt; Symmetry &gt; &amp; <link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::operator= (const <link linkend="_classPscf_1_1SymmetryGroup">SymmetryGroup</link>&lt; Symmetry &gt; &amp; other)</computeroutput></para><para>

<para>Assignment operator. </para>
</para>
<para>
Definition at line 56 of file SymmetryGroup.tpp.</para>
    </section><anchor xml:id="_classPscf_1_1SymmetryGroup_1a653334621305a1d32bb3d396849a5985"/>    <section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput>Symmetry &amp; <link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::operator[] (int i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Element access operator (by reference). </para>
</para>
<para>
Definition at line 151 of file SymmetryGroup.h.</para>
    </section><anchor xml:id="_classPscf_1_1SymmetryGroup_1afbf06dae55e696ad28ba4f180248376f"/>    <section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput>const Symmetry &amp; <link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::operator[] (int i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Element access operator (by reference). </para>
</para>
<para>
Definition at line 159 of file SymmetryGroup.h.</para>
    </section><anchor xml:id="_classPscf_1_1SymmetryGroup_1a6b12f691359707b6a07dd588a1588286"/>    <section>
    <title>isValid()</title>
<indexterm><primary>isValid</primary><secondary>Pscf::SymmetryGroup&lt; Symmetry &gt;</secondary></indexterm>
<indexterm><primary>Pscf::SymmetryGroup&lt; Symmetry &gt;</primary><secondary>isValid</secondary></indexterm>
<computeroutput>template&lt;class Symmetry &gt; </computeroutput><para><computeroutput>bool <link linkend="_classPscf_1_1SymmetryGroup">Pscf::SymmetryGroup</link>&lt; Symmetry &gt;::isValid</computeroutput></para><para>

<para>Return true if valid complete group, or throw an Exception. </para>
</para>
<para>
Definition at line 162 of file SymmetryGroup.tpp.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
SymmetryGroup.hSymmetryGroup.tpp</section>
</section>
