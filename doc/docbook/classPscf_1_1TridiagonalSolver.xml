<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classPscf_1_1TridiagonalSolver">
<title>Pscf::TridiagonalSolver Class Reference</title>
<indexterm><primary>Pscf::TridiagonalSolver</primary></indexterm>
<para>

<para>Solver for Ax=b with tridiagonal matrix A. </para>
 
</para>
<para>
<computeroutput>#include &lt;TridiagonalSolver.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classPscf_1_1TridiagonalSolver_1a3f315732fadd45dc5b702aebd356f77e">TridiagonalSolver</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classPscf_1_1TridiagonalSolver_1ac60f523e60443413f395fa2242b58b2a">~TridiagonalSolver</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1TridiagonalSolver_1ae48aeff4627e8d86c7631985a2149ef0">allocate</link> (int n)</para>

<para>Allocate memory. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1TridiagonalSolver_1a66b19168655719c9ac8305fb2c84b51b">computeLU</link> (const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp;d, const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp;u)</para>

<para>Compute LU decomposition of a symmetric tridiagonal matrix. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1TridiagonalSolver_1aa32c00e8369c6ac4f70770761a483407">computeLU</link> (const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp;d, const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp;u, const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp;l)</para>

<para>Compute LU decomposition of a general tridiagonal matrix. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1TridiagonalSolver_1a1f5930407f8bdcafb7131442f5bf49f3">multiply</link> (const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp;b, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp;x)</para>

<para>Evaluate product Ab = x for known b to compute x. </para>
</listitem>
            <listitem><para>void <link linkend="_classPscf_1_1TridiagonalSolver_1a7c956970c91f7e90c660ed0c10ec6ebe">solve</link> (const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp;b, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp;x)</para>

<para>Solve Ax = b for known b to compute x. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Solver for Ax=b with tridiagonal matrix A. </para>
<para>
Definition at line 27 of file TridiagonalSolver.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classPscf_1_1TridiagonalSolver_1a3f315732fadd45dc5b702aebd356f77e"/>    <section>
    <title>TridiagonalSolver()</title>
<indexterm><primary>TridiagonalSolver</primary><secondary>Pscf::TridiagonalSolver</secondary></indexterm>
<indexterm><primary>Pscf::TridiagonalSolver</primary><secondary>TridiagonalSolver</secondary></indexterm>
<para><computeroutput>Pscf::TridiagonalSolver::TridiagonalSolver ( )</computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 19 of file TridiagonalSolver.cpp.</para>
    </section><anchor xml:id="_classPscf_1_1TridiagonalSolver_1ac60f523e60443413f395fa2242b58b2a"/>    <section>
    <title>~TridiagonalSolver()</title>
<indexterm><primary>~TridiagonalSolver</primary><secondary>Pscf::TridiagonalSolver</secondary></indexterm>
<indexterm><primary>Pscf::TridiagonalSolver</primary><secondary>~TridiagonalSolver</secondary></indexterm>
<para><computeroutput>Pscf::TridiagonalSolver::~TridiagonalSolver ( )</computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 25 of file TridiagonalSolver.cpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classPscf_1_1TridiagonalSolver_1ae48aeff4627e8d86c7631985a2149ef0"/>    <section>
    <title>allocate()</title>
<indexterm><primary>allocate</primary><secondary>Pscf::TridiagonalSolver</secondary></indexterm>
<indexterm><primary>Pscf::TridiagonalSolver</primary><secondary>allocate</secondary></indexterm>
<para><computeroutput>void Pscf::TridiagonalSolver::allocate (int n)</computeroutput></para><para>

<para>Allocate memory. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>dimension of n x n square array. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 31 of file TridiagonalSolver.cpp.</para>
<para>
References Util::DArray&lt; Data &gt;::allocate().</para>
    </section><anchor xml:id="_classPscf_1_1TridiagonalSolver_1a66b19168655719c9ac8305fb2c84b51b"/>    <section>
    <title>computeLU()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>computeLU</primary><secondary>Pscf::TridiagonalSolver</secondary></indexterm>
<indexterm><primary>Pscf::TridiagonalSolver</primary><secondary>computeLU</secondary></indexterm>
<para><computeroutput>void Pscf::TridiagonalSolver::computeLU (const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp; d, const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp; u)</computeroutput></para><para>

<para>Compute LU decomposition of a symmetric tridiagonal matrix. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>d</entry>
                                <entry>
<para>diagonal elements of n x n matrix matrix (0,..,n-1) </para>
</entry>
                            </row>
                            <row>
                                <entry>u</entry>
                                <entry>
<para>upper off-diagonal elements (0,..,n-2) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 43 of file TridiagonalSolver.cpp.</para>
    </section><anchor xml:id="_classPscf_1_1TridiagonalSolver_1aa32c00e8369c6ac4f70770761a483407"/>    <section>
    <title>computeLU()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>computeLU</primary><secondary>Pscf::TridiagonalSolver</secondary></indexterm>
<indexterm><primary>Pscf::TridiagonalSolver</primary><secondary>computeLU</secondary></indexterm>
<para><computeroutput>void Pscf::TridiagonalSolver::computeLU (const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp; d, const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp; u, const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp; l)</computeroutput></para><para>

<para>Compute LU decomposition of a general tridiagonal matrix. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>d</entry>
                                <entry>
<para>diagonal elements of n x n matrix matrix (0,..,n-1) </para>
</entry>
                            </row>
                            <row>
                                <entry>u</entry>
                                <entry>
<para>upper off-diagonal elements (0,..,n-2) </para>
</entry>
                            </row>
                            <row>
                                <entry>l</entry>
                                <entry>
<para>lower off-diagonal elements (0,..,n-2) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 59 of file TridiagonalSolver.cpp.</para>
    </section><anchor xml:id="_classPscf_1_1TridiagonalSolver_1a1f5930407f8bdcafb7131442f5bf49f3"/>    <section>
    <title>multiply()</title>
<indexterm><primary>multiply</primary><secondary>Pscf::TridiagonalSolver</secondary></indexterm>
<indexterm><primary>Pscf::TridiagonalSolver</primary><secondary>multiply</secondary></indexterm>
<para><computeroutput>void Pscf::TridiagonalSolver::multiply (const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp; b, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp; x)</computeroutput></para><para>

<para>Evaluate product Ab = x for known b to compute x. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>known vector to be multiplied (input) </para>
</entry>
                            </row>
                            <row>
                                <entry>x</entry>
                                <entry>
<para>result of multiplication Ab = x (output) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 103 of file TridiagonalSolver.cpp.</para>
    </section><anchor xml:id="_classPscf_1_1TridiagonalSolver_1a7c956970c91f7e90c660ed0c10ec6ebe"/>    <section>
    <title>solve()</title>
<indexterm><primary>solve</primary><secondary>Pscf::TridiagonalSolver</secondary></indexterm>
<indexterm><primary>Pscf::TridiagonalSolver</primary><secondary>solve</secondary></indexterm>
<para><computeroutput>void Pscf::TridiagonalSolver::solve (const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp; b, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; double &gt; &amp; x)</computeroutput></para><para>

<para>Solve Ax = b for known b to compute x. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>known vector on RHS (input) </para>
</entry>
                            </row>
                            <row>
                                <entry>x</entry>
                                <entry>
<para>unknown solution vector of Ax = b (output) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 121 of file TridiagonalSolver.cpp.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
TridiagonalSolver.hTridiagonalSolver.cpp</section>
</section>
