<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classTestA">
<title>TestA Class Reference</title>
<indexterm><primary>TestA</primary></indexterm>
<para>

<para>This example shows how to construct and run a single <link linkend="_classUnitTest">UnitTest</link> class. </para>
 
</para>
<para>Inheritance diagram for TestA:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classTestA.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>This example shows how to construct and run a single <link linkend="_classUnitTest">UnitTest</link> class. </para>



<para>Trivial example of <link linkend="_classUnitTest">UnitTest</link> use for parallel MPI job.</para>

<para>This file demonstrates the usage of a composite test runner.</para>

<para>We create a subclass of <link linkend="_classUnitTest">UnitTest</link> named <link linkend="_classTestA">TestA</link>, which has 3 test methods. We then use a set of preprocessor macros to define an associated subclass of <link linkend="_classUnitTestRunner">UnitTestRunner</link>. The name of the <link linkend="_classUnitTestRunner">UnitTestRunner</link> subclass is given by the macro TEST_RUNNER(TestA), which expands to TestA_Runner.</para>

<para>In the main program, we create an instance of TEST_RUNNER(TestA) and call its run method, which runs all 3 test methods in sequence. Trivial subclass of <link linkend="_classUnitTest">UnitTest</link>, for illustration.</para>

<para>A <link linkend="_classCompositeTestRunner">CompositeTestRunner</link> is a <link linkend="_classTestRunner">TestRunner</link> that runs and accumulates statistics of the tests associated with several child <link linkend="_classTestRunner">TestRunner</link> objects. The child runners are usually instances of <link linkend="_classUnitTestRunner">UnitTestRunner</link>.</para>

<para>To demonstrate the usage, we define two trivial unit tests, <link linkend="_classTestA">TestA</link> and <link linkend="_classTestB">TestB</link>, and use macros to define associated <link linkend="_classUnitTestRunner">UnitTestRunner</link> subclasses, TEST_RUNNER(TestA) and TEST_RUNNER(TestB). The preprocessor macros in the main program then define a class CompositeExample that is derived from <link linkend="_classCompositeTestRunner">CompositeTestRunner</link>, which contains instances of the TEST_RUNNER(TestA) and TEST_RUNNER(TestB). Calling the run() method of the CompositeExample then runs the all of the tests defined in <link linkend="_classTestA">TestA</link> and <link linkend="_classTestB">TestB</link>. Trivial <link linkend="_classUnitTest">UnitTest</link> A.</para>

<para>Trivial subclass of <link linkend="_classUnitTest">UnitTest</link> for an MPI job. </para>
<para>
Definition at line 20 of file example1.cpp.</para>
<para>
The documentation for this class was generated from the following files:</para>
example1.cppexample2.cppexample3.cpp</section>
</section>
