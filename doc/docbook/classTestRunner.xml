<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classTestRunner">
<title>TestRunner Class Reference</title>
<indexterm><primary>TestRunner</primary></indexterm>
<para>

<para>Abstract base class for classes that run tests. </para>
 
</para>
<para>
<computeroutput>#include &lt;TestRunner.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for TestRunner:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classTestRunner.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classTestRunner_1adf6d073e739128299841d29a6701d34b">TestRunner</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classTestRunner_1a121456d7e522c0d83d648a0118ec0c6f">~TestRunner</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>virtual int <link linkend="_classTestRunner_1a3216b1149a6e1f207253c1659a617e77">run</link> ()=0</para>

<para>Run all tests. </para>
</listitem>
            <listitem><para>void <link linkend="_classTestRunner_1ab5810788fc836edbc8285d3ad2f7c2bd">recordFailure</link> ()</para>

<para>Increment counter for failed tests, and that of parent (if any). </para>
</listitem>
            <listitem><para>void <link linkend="_classTestRunner_1acc6fe0c6afd26fd05dcdc8e5addb193d">recordSuccess</link> ()</para>

<para>Increment counter for successful tests, and that of parent (if any). </para>
</listitem>
            <listitem><para>void <link linkend="_classTestRunner_1af6ef606de6b797e933f224f636078ef0">setParent</link> (<link linkend="_classTestRunner">TestRunner</link> &amp;<link linkend="_classTestRunner_1a3fa2de2b9d08e850046029f8d83476ab">parent</link>)</para>

<para>Set another <link linkend="_classTestRunner">TestRunner</link> as the parent. </para>
</listitem>
            <listitem><para><link linkend="_classTestRunner">TestRunner</link> &amp; <link linkend="_classTestRunner_1a3fa2de2b9d08e850046029f8d83476ab">parent</link> ()</para>

<para>Return the parent object, if any. </para>
</listitem>
            <listitem><para>bool <link linkend="_classTestRunner_1a0127473b7e0b4661785a33595188b03e">hasParent</link> () const</para>

<para>Does this object have a parent? </para>
</listitem>
            <listitem><para>int <link linkend="_classTestRunner_1a6b8aee43d4dba17affc7d0c79569fbca">nSuccess</link> () const</para>

<para>Return number of successful tests run. </para>
</listitem>
            <listitem><para>int <link linkend="_classTestRunner_1ad16612e6afc78a84bb970e6c9dcc7a6a">nFailure</link> () const</para>

<para>Return number of failed tests run. </para>
</listitem>
            <listitem><para>void <link linkend="_classTestRunner_1aeef507284fa5b1251a5ed8349ec2ab81">report</link> () const</para>

<para>If this object has no parent, report success and failure counters. </para>
</listitem>
            <listitem><para>bool <link linkend="_classTestRunner_1a2aae8b21506425cb9565fa1972b0252a">isIoProcessor</link> () const</para>

<para>Is this the IO processor of an MPI communicator? </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classTestRunner_1ae977948edaf2121faa85af96b7aefdcf">addFilePrefix</link> (const std::string &amp;prefix)</para>

<para>Prepend argument prefix to existing filePrefix. </para>
</listitem>
            <listitem><para>const std::string &amp; <link linkend="_classTestRunner_1aab86f36baca230df05f4896e6f359e8c">filePrefix</link> () const</para>

<para>Return file prefix by const reference. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>std::string <link linkend="_classTestRunner_1ac6aba17162d35cb7dfa0f6f536556310">filePrefix_</link></para>

<para>Prefix added to file names. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Abstract base class for classes that run tests. </para>



<para><link linkend="_classTestRunner">TestRunner</link> is an abstract base class with two types of subclass: The <link linkend="_classUnitTestRunner">UnitTestRunner</link> class template defines a <link linkend="_classTestRunner">TestRunner</link> that runs the tests for an associated <link linkend="_classUnitTest">UnitTest</link>. A <link linkend="_classCompositeTestRunner">CompositeTestRunner</link> runs the tests for a sequence of other <link linkend="_classTestRunner">TestRunner</link> objects, each of which can be a <link linkend="_classUnitTestRunner">UnitTestRunner</link> or another <link linkend="_classCompositeTestRunner">CompositeTestRunner</link>.</para>

<para>An implementation of the pure virtual <link linkend="_classTestRunner_1a3216b1149a6e1f207253c1659a617e77">run()</link> method of must run all of the associated test methods, and records the number <link linkend="_classTestRunner_1a6b8aee43d4dba17affc7d0c79569fbca">nSuccess()</link> of tests that succeed and the number <link linkend="_classTestRunner_1ad16612e6afc78a84bb970e6c9dcc7a6a">nFailure()</link> that fail. A test fails if it throws a <link linkend="_classTestException">TestException</link>. Test methods use the TEST_ASSERT(expr) macro to assert the truth of a logical exprression expr, which throws a <link linkend="_classTestException">TestException</link> if expr is false. The implementation of <link linkend="_classTestRunner_1a3216b1149a6e1f207253c1659a617e77">run()</link> for a <link linkend="_classUnitTestRunner">UnitTestRunner</link> runs each unit test method of the associated <link linkend="_classUnitTest">UnitTest</link> in a try-catch block and catches any thrown TestExceptions. The implementation of run for a TestComposite calls the <link linkend="_classTestRunner_1a3216b1149a6e1f207253c1659a617e77">run()</link> method for each of its children.</para>

<para>Each <link linkend="_classTestRunner">TestRunner</link> may optionally have a parent <link linkend="_classTestRunner">TestRunner</link>. The parent if any, is always a TestComposite. A TestComposite can have any number of children. 
<literallayout>&#160;&#xa;</literallayout>
</para>

<para>The <link linkend="_classTestRunner_1ab5810788fc836edbc8285d3ad2f7c2bd">recordFailure()</link> and <link linkend="_classTestRunner_1acc6fe0c6afd26fd05dcdc8e5addb193d">recordSuccess()</link> methods of a <link linkend="_classTestRunner">TestRunner</link>, which can be called by the run method, increment the nSuccess or nFailure counters. If the <link linkend="_classTestRunner">TestRunner</link> has a parent, each function also calls the corresponding function of the parent, thus incrementing the corresponding counter of the parent. The nSuccess and nFailure counters for a TestComposite thereby keep track of the total number of successful and failed unit test methods run by all descendants.</para>

<para>Each <link linkend="_classTestRunner">TestRunner</link> has a filePrefix string. The filePrefix is initialized to an empty string, and may be modified by the virtual <link linkend="_classTestRunner_1ae977948edaf2121faa85af96b7aefdcf">addFilePrefix()</link> function. The default implementation of this function prepends a string argument to the existing filePrefix.</para>

<para>The <link linkend="_classUnitTestRunner">UnitTestRunner</link> class template supplies the filePrefix to instances of the associated <link linkend="_classUnitTest">UnitTest</link> class when a <link linkend="_classUnitTest">UnitTest</link> is created. (See the notes for <link linkend="_classUnitTestRunner">UnitTestRunner</link> for details of how). The filePrefix string of the <link linkend="_classUnitTest">UnitTest</link> is then prepended to the names of any files opened by the functions openInputFile(), openOutputFile(), and openFile of the <link linkend="_classUnitTest">UnitTest</link> subclass.</para>

<para>The implementation of <link linkend="_classTestRunner_1ae977948edaf2121faa85af96b7aefdcf">addFilePrefix()</link> by the TestComposite subclass calls the addFilePrefix method of each of its children, and thus allows a common prefix to be added to the file paths used by all of its children. </para>
<para>
Definition at line 73 of file TestRunner.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classTestRunner_1adf6d073e739128299841d29a6701d34b"/>    <section>
    <title>TestRunner()</title>
<indexterm><primary>TestRunner</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>TestRunner</secondary></indexterm>
<para><computeroutput>TestRunner::TestRunner ( )</computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 252 of file TestRunner.h.</para>
    </section><anchor xml:id="_classTestRunner_1a121456d7e522c0d83d648a0118ec0c6f"/>    <section>
    <title>~TestRunner()</title>
<indexterm><primary>~TestRunner</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>~TestRunner</secondary></indexterm>
<para><computeroutput>TestRunner::~TestRunner ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 278 of file TestRunner.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classTestRunner_1a3216b1149a6e1f207253c1659a617e77"/>    <section>
    <title>run()</title>
<indexterm><primary>run</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>run</secondary></indexterm>
<para><computeroutput>virtual int TestRunner::run ( )<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Run all tests. </para>
</para>

<para><formalpara><title>Returns</title>

<para>number of failures. </para>
</formalpara>
</para>
<para>
Implemented in <link linkend="_classUnitTestRunner_1a7ff91831fb3150b633fad2a73e6c4522">UnitTestRunner&lt; UnitTestClass &gt;</link>, and <link linkend="_classCompositeTestRunner_1a3997c37095a5cb5cfc7084d04d9c141c">CompositeTestRunner</link>.</para>
    </section><anchor xml:id="_classTestRunner_1ab5810788fc836edbc8285d3ad2f7c2bd"/>    <section>
    <title>recordFailure()</title>
<indexterm><primary>recordFailure</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>recordFailure</secondary></indexterm>
<para><computeroutput>void TestRunner::recordFailure ( )</computeroutput></para><para>

<para>Increment counter for failed tests, and that of parent (if any). </para>
</para>
<para>
Definition at line 284 of file TestRunner.h.</para>
<para>
References hasParent(), isIoProcessor(), parent(), and recordFailure().</para>
<para>
Referenced by recordFailure().</para>
    </section><anchor xml:id="_classTestRunner_1acc6fe0c6afd26fd05dcdc8e5addb193d"/>    <section>
    <title>recordSuccess()</title>
<indexterm><primary>recordSuccess</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>recordSuccess</secondary></indexterm>
<para><computeroutput>void TestRunner::recordSuccess ( )</computeroutput></para><para>

<para>Increment counter for successful tests, and that of parent (if any). </para>
</para>
<para>
Definition at line 297 of file TestRunner.h.</para>
<para>
References hasParent(), isIoProcessor(), parent(), and recordSuccess().</para>
<para>
Referenced by recordSuccess().</para>
    </section><anchor xml:id="_classTestRunner_1af6ef606de6b797e933f224f636078ef0"/>    <section>
    <title>setParent()</title>
<indexterm><primary>setParent</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>setParent</secondary></indexterm>
<para><computeroutput>void TestRunner::setParent (<link linkend="_classTestRunner">TestRunner</link> &amp; parent)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set another <link linkend="_classTestRunner">TestRunner</link> as the parent. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>parent</entry>
                                <entry>
<para>parent <link linkend="_classCompositeTestRunner">CompositeTestRunner</link> object </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 199 of file TestRunner.h.</para>
<para>
References parent().</para>
<para>
Referenced by CompositeTestRunner::addChild().</para>
    </section><anchor xml:id="_classTestRunner_1a3fa2de2b9d08e850046029f8d83476ab"/>    <section>
    <title>parent()</title>
<indexterm><primary>parent</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>parent</secondary></indexterm>
<para><computeroutput><link linkend="_classTestRunner">TestRunner</link> &amp; TestRunner::parent ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return the parent object, if any. </para>
</para>
<para>
Definition at line 205 of file TestRunner.h.</para>
<para>
Referenced by recordFailure(), recordSuccess(), and setParent().</para>
    </section><anchor xml:id="_classTestRunner_1a0127473b7e0b4661785a33595188b03e"/>    <section>
    <title>hasParent()</title>
<indexterm><primary>hasParent</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>hasParent</secondary></indexterm>
<para><computeroutput>bool TestRunner::hasParent ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Does this object have a parent? </para>
</para>
<para>
Definition at line 211 of file TestRunner.h.</para>
<para>
Referenced by recordFailure(), recordSuccess(), and report().</para>
    </section><anchor xml:id="_classTestRunner_1a6b8aee43d4dba17affc7d0c79569fbca"/>    <section>
    <title>nSuccess()</title>
<indexterm><primary>nSuccess</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>nSuccess</secondary></indexterm>
<para><computeroutput>int TestRunner::nSuccess ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return number of successful tests run. </para>
</para>
<para>
Definition at line 217 of file TestRunner.h.</para>
    </section><anchor xml:id="_classTestRunner_1ad16612e6afc78a84bb970e6c9dcc7a6a"/>    <section>
    <title>nFailure()</title>
<indexterm><primary>nFailure</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>nFailure</secondary></indexterm>
<para><computeroutput>int TestRunner::nFailure ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return number of failed tests run. </para>
</para>
<para>
Definition at line 223 of file TestRunner.h.</para>
<para>
Referenced by CompositeTestRunner::run().</para>
    </section><anchor xml:id="_classTestRunner_1aeef507284fa5b1251a5ed8349ec2ab81"/>    <section>
    <title>report()</title>
<indexterm><primary>report</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>report</secondary></indexterm>
<para><computeroutput>void TestRunner::report ( ) const</computeroutput></para><para>

<para>If this object has no parent, report success and failure counters. </para>
</para>
<para>
Definition at line 310 of file TestRunner.h.</para>
<para>
References hasParent(), and isIoProcessor().</para>
<para>
Referenced by CompositeTestRunner::run().</para>
    </section><anchor xml:id="_classTestRunner_1a2aae8b21506425cb9565fa1972b0252a"/>    <section>
    <title>isIoProcessor()</title>
<indexterm><primary>isIoProcessor</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>isIoProcessor</secondary></indexterm>
<para><computeroutput>bool TestRunner::isIoProcessor ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this the IO processor of an MPI communicator? </para>
</para>
<para>
Definition at line 236 of file TestRunner.h.</para>
<para>
Referenced by recordFailure(), recordSuccess(), report(), and UnitTestRunner&lt; UnitTestClass &gt;::UnitTestRunner().</para>
    </section><anchor xml:id="_classTestRunner_1ae977948edaf2121faa85af96b7aefdcf"/>    <section>
    <title>addFilePrefix()</title>
<indexterm><primary>addFilePrefix</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>addFilePrefix</secondary></indexterm>
<para><computeroutput>void TestRunner::addFilePrefix (const std::string &amp; prefix)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Prepend argument prefix to existing filePrefix. </para>
</para>
<para>
Reimplemented in <link linkend="_classCompositeTestRunner_1a82bcc97f1d88455c6d1d5f3a88041a5f">CompositeTestRunner</link>.</para>
<para>
Definition at line 323 of file TestRunner.h.</para>
<para>
References filePrefix_.</para>
<para>
Referenced by CompositeTestRunner::addChild(), and CompositeTestRunner::addFilePrefix().</para>
    </section><anchor xml:id="_classTestRunner_1aab86f36baca230df05f4896e6f359e8c"/>    <section>
    <title>filePrefix()</title>
<indexterm><primary>filePrefix</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>filePrefix</secondary></indexterm>
<para><computeroutput>const std::string &amp; TestRunner::filePrefix ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return file prefix by const reference. </para>
</para>
<para>
Definition at line 230 of file TestRunner.h.</para>
<para>
References filePrefix_.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classTestRunner_1ac6aba17162d35cb7dfa0f6f536556310"/>    <section>
    <title>filePrefix_</title>
<indexterm><primary>filePrefix_</primary><secondary>TestRunner</secondary></indexterm>
<indexterm><primary>TestRunner</primary><secondary>filePrefix_</secondary></indexterm>
<para><computeroutput>std::string TestRunner::filePrefix_<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Prefix added to file names. </para>
</para>
<para>
Definition at line 167 of file TestRunner.h.</para>
<para>
Referenced by addFilePrefix(), and filePrefix().</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
TestRunner.h</section>
</section>
