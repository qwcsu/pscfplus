<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUnitTest">
<title>UnitTest Class Reference</title>
<indexterm><primary>UnitTest</primary></indexterm>
<para>

<para><link linkend="_classUnitTest">UnitTest</link> is a base class for classes that define unit tests. </para>
 
</para>
<para>
<computeroutput>#include &lt;UnitTest.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for UnitTest:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUnitTest.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUnitTest_1a67ddaff817b55a624741d32550052f4b">UnitTest</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUnitTest_1afa0bdd3e2ac33cd52e697406339a2edf">~UnitTest</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUnitTest_1af74ce9087f71d9dfc8c59618e90eff90">setUp</link> ()</para>

<para>Set up before each test method (empty default implementation). </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUnitTest_1a2a0aee942c19fed4c39c4d6d51f37dc8">tearDown</link> ()</para>

<para>Tear down after each test method (empty default implementation). </para>
</listitem>
            <listitem><para>void <link linkend="_classUnitTest_1a676172166daf298b5a254dea943727c6">setVerbose</link> (int <link linkend="_classUnitTest_1ad4bfabba19a59198a0c4afafe3073137">verbose</link>)</para>

<para>Set verbosity level. </para>
</listitem>
            <listitem><para>void <link linkend="_classUnitTest_1a9acbdd2c77de1cf92835eda1f30697db">setFilePrefix</link> (const std::string &amp;prefix)</para>

<para>Set file prefix. </para>
</listitem>
            <listitem><para>const std::string &amp; <link linkend="_classUnitTest_1aec4edb27805610c146e480154dae98b3">filePrefix</link> ()</para>

<para>Get file prefix string. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUnitTest_1a280a9e1d1590af177e6ccb29b952870f">isIoProcessor</link> () const</para>

<para>Should this processor read and write to file? </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_classUnitTest_1a2e171df00374eb122b38807a8170a64a">printMethod</link> (const char *methodName)</para>

<para>Write name of a class method, iff ioProcessor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUnitTest_1a5b4787ccd8f529dabafe4a9fe015187a">printEndl</link> ()</para>

<para>Write carriage return, iff isIoProcessor. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUnitTest_1a5e87fa15a26cb64f87e3faeb59ff08e2">endMarker</link> ()</para>

<para>Print a line of hashes, iff isIoProcessor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUnitTest_1a1cc31192c5df258ca795c673bdc28adf">openInputFile</link> (const std::string &amp;name, std::ifstream &amp;in) const</para>

<para>Open C++ input file ifstream. </para>
</listitem>
            <listitem><para>void <link linkend="_classUnitTest_1a6eab451e53329be534bc647f1a3cc693">openOutputFile</link> (const std::string &amp;name, std::ofstream &amp;out) const</para>

<para>Open C++ output file ofstream. </para>
</listitem>
            <listitem><para>FILE * <link linkend="_classUnitTest_1a98f7f951299912db31de012889d857b2">openFile</link> (const std::string &amp;name, const char *mode) const</para>

<para>Open C file handle with specified mode. </para>
</listitem>
            <listitem><para>int <link linkend="_classUnitTest_1ad4bfabba19a59198a0c4afafe3073137">verbose</link> () const</para>

<para>Return integer verbosity level (0 == silent). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>static bool <link linkend="_classUnitTest_1a1dea0f602f4300d8f6a0eddac2f3b147">eq</link> (int s1, int s2)</para>

<para>Return true if two integers are equal. </para>
</listitem>
            <listitem><para>static bool <link linkend="_classUnitTest_1a686910c0992e9ec944788f62eb9cbacd">eq</link> (double s1, double s2)</para>

<para>Return true if two double precision floats are equal. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para><link linkend="_classUnitTest">UnitTest</link> is a base class for classes that define unit tests. </para>



<para>Each subclass of <link linkend="_classUnitTest">UnitTest</link> should define one or more test methods. Each test method must be a zero parameter function that returns void. Test methods may be given arbitrary names. Individual test methods should use the preprocessor macro TEST_ASSERT(expression) defined in TextException.h to assert the truth of logical expressions.</para>

<para>The test methods defined by a <link linkend="_classUnitTest">UnitTest</link> are run by an associated subclass of <link linkend="_classTestRunner">TestRunner</link>. Each test method of a <link linkend="_classUnitTest">UnitTest</link> must be added to the associated <link linkend="_classTestRunner">TestRunner</link>. The run() method of a <link linkend="_classTestRunner">TestRunner</link> calls all of the associated test methods in the order in which they were added, and counts the number of successful and failed tests.</para>

<para>The <link linkend="_classTestRunner">TestRunner</link> associated with a single <link linkend="_classUnitTest">UnitTest</link> is defined by a class template <link linkend="_classUnitTestRunner">UnitTestRunner</link>, which takes a <link linkend="_classUnitTest">UnitTest</link> subclass as a template argument. For example, the <link linkend="_classTestRunner">TestRunner</link> associated with a <link linkend="_classUnitTest">UnitTest</link> subclass named <link linkend="_classTestA">TestA</link> is a template instantiation UnitTestRunner&lt;TestA&gt;.</para>

<para>Preprocessor macros defined in the file <link linkend="_UnitTestRunner_8h_source">UnitTestRunner.h</link> should be used to create the boiler-plate code necessary to define a unit test runner and to add test methods to it. </para>
<para>
Definition at line 50 of file UnitTest.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUnitTest_1a67ddaff817b55a624741d32550052f4b"/>    <section>
    <title>UnitTest()</title>
<indexterm><primary>UnitTest</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>UnitTest</secondary></indexterm>
<para><computeroutput>UnitTest::UnitTest ( )</computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 219 of file UnitTest.h.</para>
    </section><anchor xml:id="_classUnitTest_1afa0bdd3e2ac33cd52e697406339a2edf"/>    <section>
    <title>~UnitTest()</title>
<indexterm><primary>~UnitTest</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>~UnitTest</secondary></indexterm>
<para><computeroutput>UnitTest::~UnitTest ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 236 of file UnitTest.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUnitTest_1af74ce9087f71d9dfc8c59618e90eff90"/>    <section>
    <title>setUp()</title>
<indexterm><primary>setUp</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>setUp</secondary></indexterm>
<para><computeroutput>void UnitTest::setUp ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Set up before each test method (empty default implementation). </para>
</para>
<para>
Definition at line 242 of file UnitTest.h.</para>
    </section><anchor xml:id="_classUnitTest_1a2a0aee942c19fed4c39c4d6d51f37dc8"/>    <section>
    <title>tearDown()</title>
<indexterm><primary>tearDown</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>tearDown</secondary></indexterm>
<para><computeroutput>void UnitTest::tearDown ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Tear down after each test method (empty default implementation). </para>
</para>
<para>
Reimplemented in <link linkend="_classParamFileTest_1a0d840c0f3cf405a8abd72625796e8a8b">ParamFileTest</link>.</para>
<para>
Definition at line 248 of file UnitTest.h.</para>
    </section><anchor xml:id="_classUnitTest_1a676172166daf298b5a254dea943727c6"/>    <section>
    <title>setVerbose()</title>
<indexterm><primary>setVerbose</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>setVerbose</secondary></indexterm>
<para><computeroutput>void UnitTest::setVerbose (int verbose)</computeroutput></para><para>

<para>Set verbosity level. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>verbose</entry>
                                <entry>
<para>verbosity level (0 = silent). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 256 of file UnitTest.h.</para>
<para>
References verbose().</para>
    </section><anchor xml:id="_classUnitTest_1a9acbdd2c77de1cf92835eda1f30697db"/>    <section>
    <title>setFilePrefix()</title>
<indexterm><primary>setFilePrefix</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>setFilePrefix</secondary></indexterm>
<para><computeroutput>void UnitTest::setFilePrefix (const std::string &amp; prefix)</computeroutput></para><para>

<para>Set file prefix. </para>
</para>

<para>This function is called by the UnitTestRunner::method(int i) function to set the filePrefix of the unit test equal to that of the runner after construction but before running the relevant test method.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>prefix</entry>
                                <entry>
<para>string to be prepended to input and output file names. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 262 of file UnitTest.h.</para>
    </section><anchor xml:id="_classUnitTest_1aec4edb27805610c146e480154dae98b3"/>    <section>
    <title>filePrefix()</title>
<indexterm><primary>filePrefix</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>filePrefix</secondary></indexterm>
<para><computeroutput>const std::string &amp; UnitTest::filePrefix ( )</computeroutput></para><para>

<para>Get file prefix string. </para>
</para>
<para>
Definition at line 268 of file UnitTest.h.</para>
    </section><anchor xml:id="_classUnitTest_1a280a9e1d1590af177e6ccb29b952870f"/>    <section>
    <title>isIoProcessor()</title>
<indexterm><primary>isIoProcessor</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>isIoProcessor</secondary></indexterm>
<para><computeroutput>bool UnitTest::isIoProcessor ( ) const</computeroutput></para><para>

<para>Should this processor read and write to file? </para>
</para>
<para>
Definition at line 274 of file UnitTest.h.</para>
<para>
Referenced by endMarker(), ParamFileTest::openFile(), printEndl(), and printMethod().</para>
    </section><anchor xml:id="_classUnitTest_1a2e171df00374eb122b38807a8170a64a"/>    <section>
    <title>printMethod()</title>
<indexterm><primary>printMethod</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>printMethod</secondary></indexterm>
<para><computeroutput>void UnitTest::printMethod (const char * methodName)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Write name of a class method, iff ioProcessor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>methodName</entry>
                                <entry>
<para>name of class test method </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 314 of file UnitTest.h.</para>
<para>
References isIoProcessor().</para>
    </section><anchor xml:id="_classUnitTest_1a5b4787ccd8f529dabafe4a9fe015187a"/>    <section>
    <title>printEndl()</title>
<indexterm><primary>printEndl</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>printEndl</secondary></indexterm>
<para><computeroutput>void UnitTest::printEndl ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Write carriage return, iff isIoProcessor. </para>
</para>
<para>
Definition at line 324 of file UnitTest.h.</para>
<para>
References isIoProcessor().</para>
    </section><anchor xml:id="_classUnitTest_1a5e87fa15a26cb64f87e3faeb59ff08e2"/>    <section>
    <title>endMarker()</title>
<indexterm><primary>endMarker</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>endMarker</secondary></indexterm>
<para><computeroutput>void UnitTest::endMarker ( )<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Print a line of hashes, iff isIoProcessor. </para>
</para>
<para>
Definition at line 330 of file UnitTest.h.</para>
<para>
References isIoProcessor().</para>
    </section><anchor xml:id="_classUnitTest_1a1cc31192c5df258ca795c673bdc28adf"/>    <section>
    <title>openInputFile()</title>
<indexterm><primary>openInputFile</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>openInputFile</secondary></indexterm>
<para><computeroutput>void UnitTest::openInputFile (const std::string &amp; name, std::ifstream &amp; in) const<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Open C++ input file ifstream. </para>
</para>

<para>This function adds the filePrefix before the name parameter. It does not check if this node isIoProcessor.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>base file name (added to filePrefix). </para>
</entry>
                            </row>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input file (opened on return). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 343 of file UnitTest.h.</para>
<para>
Referenced by ParamFileTest::openFile().</para>
    </section><anchor xml:id="_classUnitTest_1a6eab451e53329be534bc647f1a3cc693"/>    <section>
    <title>openOutputFile()</title>
<indexterm><primary>openOutputFile</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>openOutputFile</secondary></indexterm>
<para><computeroutput>void UnitTest::openOutputFile (const std::string &amp; name, std::ofstream &amp; out) const<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Open C++ output file ofstream. </para>
</para>

<para>This function adds the filePrefix before the name parameter. It does not check if this node isIoProcessor.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>base file name (added to filePrefix) </para>
</entry>
                            </row>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output file (opened on return) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 361 of file UnitTest.h.</para>
    </section><anchor xml:id="_classUnitTest_1a98f7f951299912db31de012889d857b2"/>    <section>
    <title>openFile()</title>
<indexterm><primary>openFile</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>openFile</secondary></indexterm>
<para><computeroutput>FILE * UnitTest::openFile (const std::string &amp; name, const char * mode) const<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Open C file handle with specified mode. </para>
</para>

<para>This function adds the filePrefix before the name parameter. It does not check if this node isIoProcessor.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>base file name (added to filePrefix) </para>
</entry>
                            </row>
                            <row>
                                <entry>mode</entry>
                                <entry>
<para>string that specified read or write mode </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>C file handle, opened for reading or writing </para>
</formalpara>
</para>
<para>
Definition at line 379 of file UnitTest.h.</para>
    </section><anchor xml:id="_classUnitTest_1ad4bfabba19a59198a0c4afafe3073137"/>    <section>
    <title>verbose()</title>
<indexterm><primary>verbose</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>verbose</secondary></indexterm>
<para><computeroutput>int UnitTest::verbose ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Return integer verbosity level (0 == silent). </para>
</para>
<para>
Definition at line 397 of file UnitTest.h.</para>
<para>
Referenced by setVerbose().</para>
    </section><anchor xml:id="_classUnitTest_1a1dea0f602f4300d8f6a0eddac2f3b147"/>    <section>
    <title>eq()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>eq</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>eq</secondary></indexterm>
<para><computeroutput>bool UnitTest::eq (int s1, int s2)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Return true if two integers are equal. </para>
</para>
<para>
Definition at line 403 of file UnitTest.h.</para>
    </section><anchor xml:id="_classUnitTest_1a686910c0992e9ec944788f62eb9cbacd"/>    <section>
    <title>eq()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>eq</primary><secondary>UnitTest</secondary></indexterm>
<indexterm><primary>UnitTest</primary><secondary>eq</secondary></indexterm>
<para><computeroutput>bool UnitTest::eq (double s1, double s2)<computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Return true if two double precision floats are equal. </para>
</para>
<para>
Definition at line 409 of file UnitTest.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
UnitTest.h</section>
</section>
