<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1ArraySet">
<title>Util::ArraySet&lt; Data &gt; Class Template Reference</title>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary></indexterm>
<para>

<para>A container for pointers to a subset of elements of an associated array. </para>
 
</para>
<para>
<computeroutput>#include &lt;ArraySet.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Util::ArraySet&lt; Data &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUtil_1_1ArraySet.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1ArraySet_1ab518733b8c00197c369ebc1bbb900a09">ArraySet</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1ArraySet_1a2bd362d1e0877b43c42dfbadf7195180">~ArraySet</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1ArraySet_1a5c12e86ed6a4c2051b32c348991779cc">allocate</link> (const Data *array, int <link linkend="_classUtil_1_1PArray_1a44168c67b49d4fa54f298097065f7796">capacity</link>)</para>

<para>Associate with a C array and allocate required memory. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1ArraySet_1a97280670f56e2d7d7b623d7b6879bd7f">allocate</link> (const <link linkend="_classUtil_1_1Array">Array</link>&lt; Data &gt; &amp;array)</para>

<para>Associate with an <link linkend="_classUtil_1_1Array">Array</link> container and allocate required memory. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Mutators</title>
        <itemizedlist>
            <listitem><para>void <link linkend="_classUtil_1_1ArraySet_1a369d0413775cfab246ed105a6a103735">append</link> (Data &amp;data)</para>

<para>Append an element to the set. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1ArraySet_1a7c21a57396aa00fb4e2e755415d20a72">remove</link> (const Data &amp;data)</para>

<para>Remove an element from the set. </para>
</listitem>
            <listitem><para>Data &amp; <link linkend="_classUtil_1_1ArraySet_1af43a53675807b89feaaa9c2f0baa116d">pop</link> ()</para>

<para>Pop the topmost from the set. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1ArraySet_1ad3af3cbc5fbdfa5fad49c042f2fadc37">clear</link> ()</para>

<para>Reset to empty state. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Accessors    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_classUtil_1_1ArraySet_1ab963109e370cf57ab4a7375a969b9280">index</link> (const Data &amp;data) const</para>

<para>Return the current index of an element within the set, if any. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1ArraySet_1aca2ab9734b30f16fa4a7cf54cc351a37">isAllocated</link> () const</para>

<para>Return true if the <link linkend="_classUtil_1_1ArraySet">ArraySet</link> is initialized, false otherwise. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1ArraySet_1a395b8ffea666edc964cb9697809182be">isValid</link> () const</para>

<para>Return true if the <link linkend="_classUtil_1_1ArraySet">ArraySet</link> is valid, or throw an exception. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1ArraySet_1a3f2005fa5143b930f5f1a809ce04f98f">dump</link> () const</para>

<para>Write the internal state of the <link linkend="_classUtil_1_1ArraySet">ArraySet</link> to std::cout. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data&gt;
class Util::ArraySet&lt; Data &gt;</title></simplesect>


<para>A container for pointers to a subset of elements of an associated array. </para>



<para>An <link linkend="_classUtil_1_1ArraySet">ArraySet</link> is a <link linkend="_classUtil_1_1PArray">PArray</link> that stores pointers to a subset of the elements of an associated <link linkend="_classUtil_1_1Array">Array</link> container or bare C array. Pointers to the elements of this set are stored in a contiguous sequence, with indices in the range 0, ..., <link linkend="_classUtil_1_1PArray_1a2b0709ba78b786a7eb4412e817c486b1">size()</link> - 1. The order in which these pointers are stored is mutable, and generally changes whenever an element is removed.</para>

<para>The <link linkend="_classUtil_1_1ArraySet_1a369d0413775cfab246ed105a6a103735">append()</link> method appends a pointer to a new element to the end of the sequence and increments the size. The <link linkend="_classUtil_1_1ArraySet_1a7c21a57396aa00fb4e2e755415d20a72">remove()</link> method removes a specified element, then moves the pointer of the last element to the space vacated by the removed element (unless the removed element was the last in the sequence), and decrements the size. The order in which the remaining elements of an <link linkend="_classUtil_1_1ArraySet">ArraySet</link> are stored thus can change whenever an element is removed.</para>

<para>An <link linkend="_classUtil_1_1ArraySet">ArraySet</link> provides O(N) sequential access to all elements of a set, O(1) insertion and deletion, and O(1) access to a randomly chosen element. </para>
<para>
Definition at line 46 of file ArraySet.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1ArraySet_1ab518733b8c00197c369ebc1bbb900a09"/>    <section>
    <title>ArraySet()</title>
<indexterm><primary>ArraySet</primary><secondary>Util::ArraySet&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary><secondary>ArraySet</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1ArraySet">Util::ArraySet</link>&lt; Data &gt;::<link linkend="_classUtil_1_1ArraySet">ArraySet</link></computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 187 of file ArraySet.h.</para>
    </section><anchor xml:id="_classUtil_1_1ArraySet_1a2bd362d1e0877b43c42dfbadf7195180"/>    <section>
    <title>~ArraySet()</title>
<indexterm><primary>~ArraySet</primary><secondary>Util::ArraySet&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary><secondary>~ArraySet</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1ArraySet">Util::ArraySet</link>&lt; Data &gt;::~<link linkend="_classUtil_1_1ArraySet">ArraySet</link><computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 196 of file ArraySet.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1ArraySet_1a5c12e86ed6a4c2051b32c348991779cc"/>    <section>
    <title>allocate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>allocate</primary><secondary>Util::ArraySet&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary><secondary>allocate</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ArraySet">Util::ArraySet</link>&lt; Data &gt;::allocate (const Data * array, int capacity)</computeroutput></para><para>

<para>Associate with a C array and allocate required memory. </para>
</para>

<para>This method associates an <link linkend="_classUtil_1_1ArraySet">ArraySet</link> with a bare C array, and allocates all memory required by the <link linkend="_classUtil_1_1ArraySet">ArraySet</link>.</para>

<para>An <link linkend="_classUtil_1_1ArraySet">ArraySet</link> may only be allocated once. This method throws an <link linkend="_classUtil_1_1Exception">Exception</link> if it is called more than once.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>array</entry>
                                <entry>
<para>associated C array of Data objects </para>
</entry>
                            </row>
                            <row>
                                <entry>capacity</entry>
                                <entry>
<para>number of elements in the array </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 210 of file ArraySet.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1ArraySet_1a97280670f56e2d7d7b623d7b6879bd7f"/>    <section>
    <title>allocate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>allocate</primary><secondary>Util::ArraySet&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary><secondary>allocate</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ArraySet">Util::ArraySet</link>&lt; Data &gt;::allocate (const <link linkend="_classUtil_1_1Array">Array</link>&lt; Data &gt; &amp; array)</computeroutput></para><para>

<para>Associate with an <link linkend="_classUtil_1_1Array">Array</link> container and allocate required memory. </para>
</para>

<para>Invokes allocate(&amp;array[0], array.capacity()) internally.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>array</entry>
                                <entry>
<para>associated Array&lt;Data&gt; container </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 237 of file ArraySet.h.</para>
<para>
References Util::Array&lt; Data &gt;::capacity().</para>
    </section><anchor xml:id="_classUtil_1_1ArraySet_1a369d0413775cfab246ed105a6a103735"/>    <section>
    <title>append()</title>
<indexterm><primary>append</primary><secondary>Util::ArraySet&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary><secondary>append</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ArraySet">Util::ArraySet</link>&lt; Data &gt;::append (Data &amp; data)</computeroutput></para><para>

<para>Append an element to the set. </para>
</para>

<para>This appends a new element to the end of the sequence. This does not change the order of other elements.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>array element to be added. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 244 of file ArraySet.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1ArraySet_1a7c21a57396aa00fb4e2e755415d20a72"/>    <section>
    <title>remove()</title>
<indexterm><primary>remove</primary><secondary>Util::ArraySet&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary><secondary>remove</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ArraySet">Util::ArraySet</link>&lt; Data &gt;::remove (const Data &amp; data)</computeroutput></para><para>

<para>Remove an element from the set. </para>
</para>

<para>Removal of an element generally changes the order of the remaining elements.</para>

<para>Throws an <link linkend="_classUtil_1_1Exception">Exception</link> if data is not in this <link linkend="_classUtil_1_1ArraySet">ArraySet</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>array element to be added. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 268 of file ArraySet.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1ArraySet_1af43a53675807b89feaaa9c2f0baa116d"/>    <section>
    <title>pop()</title>
<indexterm><primary>pop</primary><secondary>Util::ArraySet&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary><secondary>pop</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>Data &amp; <link linkend="_classUtil_1_1ArraySet">Util::ArraySet</link>&lt; Data &gt;::pop</computeroutput></para><para>

<para>Pop the topmost from the set. </para>
</para>

<para>Popping the top element does not change the order of the remaining elements. </para>
<para>
Definition at line 301 of file ArraySet.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1ArraySet_1ad3af3cbc5fbdfa5fad49c042f2fadc37"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::ArraySet&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ArraySet">Util::ArraySet</link>&lt; Data &gt;::clear</computeroutput></para><para>

<para>Reset to empty state. </para>
</para>
<para>
Definition at line 319 of file ArraySet.h.</para>
    </section><anchor xml:id="_classUtil_1_1ArraySet_1ab963109e370cf57ab4a7375a969b9280"/>    <section>
    <title>index()</title>
<indexterm><primary>index</primary><secondary>Util::ArraySet&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary><secondary>index</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1ArraySet">Util::ArraySet</link>&lt; Data &gt;::index (const Data &amp; data) const</computeroutput></para><para>

<para>Return the current index of an element within the set, if any. </para>
</para>

<para>Return the current index of an element within the set, or return a negative value -1 if the element is not in the set.</para>

<para>This method returns the current index of the pointer to object data within this <link linkend="_classUtil_1_1ArraySet">ArraySet</link>, in the range 0 &lt; index &lt; <link linkend="_classUtil_1_1PArray_1a2b0709ba78b786a7eb4412e817c486b1">size()</link> -1. The method returns -1 if data is an element of the associated array but is not in the <link linkend="_classUtil_1_1ArraySet">ArraySet</link>.</para>

<para>Throws an exception if data is not in the associated array.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>array element of interest. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>current index of pointer to element within this <link linkend="_classUtil_1_1ArraySet">ArraySet</link>. </para>
</formalpara>
</para>
<para>
Definition at line 335 of file ArraySet.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1ArraySet_1aca2ab9734b30f16fa4a7cf54cc351a37"/>    <section>
    <title>isAllocated()</title>
<indexterm><primary>isAllocated</primary><secondary>Util::ArraySet&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary><secondary>isAllocated</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1ArraySet">Util::ArraySet</link>&lt; Data &gt;::isAllocated<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return true if the <link linkend="_classUtil_1_1ArraySet">ArraySet</link> is initialized, false otherwise. </para>
</para>
<para>
Definition at line 348 of file ArraySet.h.</para>
    </section><anchor xml:id="_classUtil_1_1ArraySet_1a395b8ffea666edc964cb9697809182be"/>    <section>
    <title>isValid()</title>
<indexterm><primary>isValid</primary><secondary>Util::ArraySet&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary><secondary>isValid</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1ArraySet">Util::ArraySet</link>&lt; Data &gt;::isValid</computeroutput></para><para>

<para>Return true if the <link linkend="_classUtil_1_1ArraySet">ArraySet</link> is valid, or throw an exception. </para>
</para>
<para>
Definition at line 355 of file ArraySet.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1ArraySet_1a3f2005fa5143b930f5f1a809ce04f98f"/>    <section>
    <title>dump()</title>
<indexterm><primary>dump</primary><secondary>Util::ArraySet&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ArraySet&lt; Data &gt;</primary><secondary>dump</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ArraySet">Util::ArraySet</link>&lt; Data &gt;::dump ( ) const</computeroutput></para><para>

<para>Write the internal state of the <link linkend="_classUtil_1_1ArraySet">ArraySet</link> to std::cout. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
ArraySet.h</section>
</section>
