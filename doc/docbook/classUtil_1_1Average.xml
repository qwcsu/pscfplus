<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1Average">
<title>Util::Average Class Reference</title>
<indexterm><primary>Util::Average</primary></indexterm>
<para>

<para>Calculates the average and variance of a sampled property. </para>
 
</para>
<para>
<computeroutput>#include &lt;Average.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Util::Average:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUtil_1_1Average.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Average_1a72b1537be5987dae3964ece96f41c212">Average</link> (int blockFactor=2)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1Average_1a365dbabdde7ff7e10445168b8563f1c7">~Average</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Average_1aa6d118dd419b70295caa1aa099d76d65">readParameters</link> (std::istream &amp;in)</para>

<para>Read parameter nSamplePerBlock from file and initialize. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Average_1ae11f951ab1e57545f3c580f904fff5ad">setNSamplePerBlock</link> (int <link linkend="_classUtil_1_1Average_1a438f84be90697f8c8e339e96fbd659aa">nSamplePerBlock</link>)</para>

<para>Set nSamplePerBlock. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Average_1a786731986dc750f59cdbc8f57dbc3783">loadParameters</link> (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp;ar)</para>

<para>Load internal state from an archive. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Average_1a6bb1a12d32f87d40483ae7bb0d8c4708">save</link> (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp;ar)</para>

<para>Save internal state to an archive. </para>
</listitem>
            <listitem><para>template&lt;class Archive &gt; </para><para>void <link linkend="_classUtil_1_1Average_1a7d6d580125c1ae4b86c0b797192dc8ce">serialize</link> (Archive &amp;ar, const unsigned int version)</para>

<para>Serialize this <link linkend="_classUtil_1_1Average">Average</link> to or from an archive. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Average_1a03fe5551e0a62d22ef7b923c94a457de">clear</link> ()</para>

<para>Clear all accumulators, set to empty initial state. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Average_1adf13dad094b6b95cbbd7d7a7dc9fb65c">sample</link> (double value)</para>

<para>Add a sampled value to the ensemble. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Average_1a872c4954766036d6603b3a8d81f117de">sample</link> (double value, std::ostream &amp;out)</para>

<para>Add a sampled value to ensemble, and output block averages. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Average_1a93d290ee5c38deb7475ca5c615113ffd">output</link> (std::ostream &amp;out) const</para>

<para>Output final statistical properties to file. </para>
</listitem>
            <listitem><para>double <link linkend="_classUtil_1_1Average_1abfb06bd8497f4ec92ca6e11948f7ea82">blockingError</link> () const</para>

<para>Return estimated error on average from blocking analysis. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1Average_1a438f84be90697f8c8e339e96fbd659aa">nSamplePerBlock</link> () const</para>

<para>Get number of samples per block average. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1Average_1a3c8c1da604d88913b2e512d9f6dd0e85">iBlock</link> () const</para>

<para>Get number of samples in current block average. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Average_1ad90d391e8c6be845d7537c0d2da55029">isBlockComplete</link> () const</para>

<para>Is the current block average complete? </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Calculates the average and variance of a sampled property. </para>



<para><link linkend="_classUtil_1_1Average">Average</link> calculates block and global averages of a sampled value and its square, from which it obtains a global average and variance for a sequence. A hierarchical blocking algorithm is used to estimate the error on the average. No error estimate is provided for the variance.</para>

<para>The sample function of also optionally calculates block averages, which can be useful for reducing how frequently values are logged to a file. The parameter nSamplePerBlock is the number of samples per block average. This is initialized to zero. A zero value disables calculation of block averages. An overloaded method of the sample function that takes an std::ostream file as an argument outputs block averages to file as blocks are completed.</para>

<para>The hierarchical blocking algorithm is implemented using a linked list of <link linkend="_classUtil_1_1AverageStage">Util::AverageStage</link> objects. See documentation of that class for further details, and a literature reference. </para>
<para>
Definition at line 43 of file Average.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1Average_1a72b1537be5987dae3964ece96f41c212"/>    <section>
    <title>Average()</title>
<indexterm><primary>Average</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>Average</secondary></indexterm>
<para><computeroutput>Util::Average::Average (int blockFactor = <computeroutput>2</computeroutput>
)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>blockFactor</entry>
                                <entry>
<para>ratio of block sizes for subsequent stages. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 20 of file Average.cpp.</para>
<para>
References Util::ParamComposite::setClassName().</para>
    </section><anchor xml:id="_classUtil_1_1Average_1a365dbabdde7ff7e10445168b8563f1c7"/>    <section>
    <title>~Average()</title>
<indexterm><primary>~Average</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>~Average</secondary></indexterm>
<para><computeroutput>Util::Average::~Average ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 36 of file Average.cpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1Average_1aa6d118dd419b70295caa1aa099d76d65"/>    <section>
    <title>readParameters()</title>
<indexterm><primary>readParameters</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>readParameters</secondary></indexterm>
<para><computeroutput>void Util::Average::readParameters (std::istream &amp; in)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Read parameter nSamplePerBlock from file and initialize. </para>
</para>

<para>See <link linkend="_classUtil_1_1Average_1ae11f951ab1e57545f3c580f904fff5ad">setNSamplePerBlock()</link> for discussion of value.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1a172a3a656b5829c8d758424ad09a22a6">Util::ParamComposite</link>.</para>
<para>
Definition at line 52 of file Average.cpp.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1Average_1ae11f951ab1e57545f3c580f904fff5ad"/>    <section>
    <title>setNSamplePerBlock()</title>
<indexterm><primary>setNSamplePerBlock</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>setNSamplePerBlock</secondary></indexterm>
<para><computeroutput>void Util::Average::setNSamplePerBlock (int nSamplePerBlock)</computeroutput></para><para>

<para>Set nSamplePerBlock. </para>
</para>

<para>If nSamplePerBlock &gt; 0, the sample function will increment block averages, and reset the average every nSamplePerBlock samples.</para>

<para>If nSamplePerBlock == 0, block averaging is disabled. This is the default (i.e., the initial value set in the constructor).</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>nSamplePerBlock</entry>
                                <entry>
<para>number of samples per block average output </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 63 of file Average.cpp.</para>
<para>
References nSamplePerBlock(), and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1Average_1a786731986dc750f59cdbc8f57dbc3783"/>    <section>
    <title>loadParameters()</title>
<indexterm><primary>loadParameters</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>loadParameters</secondary></indexterm>
<para><computeroutput>void Util::Average::loadParameters (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp; ar)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Load internal state from an archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>input/loading archive </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1adec07dcba0895ba69463147314cde7ce">Util::ParamComposite</link>.</para>
<para>
Definition at line 74 of file Average.cpp.</para>
<para>
References Util::AverageStage::serialize(), and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1Average_1a6bb1a12d32f87d40483ae7bb0d8c4708"/>    <section>
    <title>save()</title>
<indexterm><primary>save</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>save</secondary></indexterm>
<para><computeroutput>void Util::Average::save (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp; ar)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Save internal state to an archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>output/saving archive </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1a3c430a4e31a9573eadb06ab89d3bf780">Util::ParamComposite</link>.</para>
<para>
Definition at line 88 of file Average.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Average_1a7d6d580125c1ae4b86c0b797192dc8ce"/>    <section>
    <title>serialize()</title>
<indexterm><primary>serialize</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>serialize</secondary></indexterm>
<computeroutput>template&lt;class Archive &gt; </computeroutput><para><computeroutput>void Util::Average::serialize (Archive &amp; ar, const unsigned int version)</computeroutput></para><para>

<para>Serialize this <link linkend="_classUtil_1_1Average">Average</link> to or from an archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>input or output archive </para>
</entry>
                            </row>
                            <row>
                                <entry>version</entry>
                                <entry>
<para>file version id </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 252 of file Average.h.</para>
<para>
References Util::AverageStage::serialize().</para>
    </section><anchor xml:id="_classUtil_1_1Average_1a03fe5551e0a62d22ef7b923c94a457de"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>clear</secondary></indexterm>
<para><computeroutput>void Util::Average::clear ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Clear all accumulators, set to empty initial state. </para>
</para>
<para>
Reimplemented from <link linkend="_classUtil_1_1AverageStage_1a2c9065506a570a96cf72e66b574f9f1a">Util::AverageStage</link>.</para>
<para>
Definition at line 42 of file Average.cpp.</para>
<para>
References Util::AverageStage::clear().</para>
    </section><anchor xml:id="_classUtil_1_1Average_1adf13dad094b6b95cbbd7d7a7dc9fb65c"/>    <section>
    <title>sample()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>sample</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>sample</secondary></indexterm>
<para><computeroutput>void Util::Average::sample (double value)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Add a sampled value to the ensemble. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>sampled value </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1AverageStage_1a27a1cf9ab8b5478c5ff655705bf1e380">Util::AverageStage</link>.</para>
<para>
Definition at line 94 of file Average.cpp.</para>
<para>
References Util::AverageStage::sample().</para>
    </section><anchor xml:id="_classUtil_1_1Average_1a872c4954766036d6603b3a8d81f117de"/>    <section>
    <title>sample()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>sample</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>sample</secondary></indexterm>
<para><computeroutput>void Util::Average::sample (double value, std::ostream &amp; out)</computeroutput></para><para>

<para>Add a sampled value to ensemble, and output block averages. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>sampled value </para>
</entry>
                            </row>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream to which to write block averages </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 112 of file Average.cpp.</para>
<para>
References Util::AverageStage::sample().</para>
    </section><anchor xml:id="_classUtil_1_1Average_1a93d290ee5c38deb7475ca5c615113ffd"/>    <section>
    <title>output()</title>
<indexterm><primary>output</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>output</secondary></indexterm>
<para><computeroutput>void Util::Average::output (std::ostream &amp; out) const</computeroutput></para><para>

<para>Output final statistical properties to file. </para>
</para>

<para>This function outputs the average value, an estimate of the error on the average, the variance. It also outputs a sequence of naive values for the error on the average obtained from sequences of block averages, with different levels of blocking. The naive estimate obtained from each stage is calculated as if subsequent values were uncorrelated. This gives sqrt(variance/nSample), where variance is the variance of the sequence of block averages processed by that stage, and nSample is the number of such block averages thus far. The final estimate of the error on the average is obtained by trying to identify several stages of block averaging that yield statistically indistinguishable naive estimates.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 178 of file Average.cpp.</para>
<para>
References Util::AverageStage::average(), blockingError(), Util::AverageStage::error(), Util::AverageStage::nSample(), Util::AverageStage::stageInterval(), Util::AverageStage::stdDeviation(), and Util::AverageStage::variance().</para>
    </section><anchor xml:id="_classUtil_1_1Average_1abfb06bd8497f4ec92ca6e11948f7ea82"/>    <section>
    <title>blockingError()</title>
<indexterm><primary>blockingError</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>blockingError</secondary></indexterm>
<para><computeroutput>double Util::Average::blockingError ( ) const</computeroutput></para><para>

<para>Return estimated error on average from blocking analysis. </para>
</para>
<para>
Definition at line 133 of file Average.cpp.</para>
<para>
References Util::AverageStage::error(), and Util::AverageStage::nSample().</para>
<para>
Referenced by output().</para>
    </section><anchor xml:id="_classUtil_1_1Average_1a438f84be90697f8c8e339e96fbd659aa"/>    <section>
    <title>nSamplePerBlock()</title>
<indexterm><primary>nSamplePerBlock</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>nSamplePerBlock</secondary></indexterm>
<para><computeroutput>int Util::Average::nSamplePerBlock ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get number of samples per block average. </para>
</para>

<para>A zero value indicates that block averaging is disabled. </para>
<para>
Definition at line 220 of file Average.h.</para>
<para>
Referenced by setNSamplePerBlock().</para>
    </section><anchor xml:id="_classUtil_1_1Average_1a3c8c1da604d88913b2e512d9f6dd0e85"/>    <section>
    <title>iBlock()</title>
<indexterm><primary>iBlock</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>iBlock</secondary></indexterm>
<para><computeroutput>int Util::Average::iBlock ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get number of samples in current block average. </para>
</para>

<para>Return 0 if block averaging disabled, if !nSamplePerBlock. </para>
<para>
Definition at line 226 of file Average.h.</para>
    </section><anchor xml:id="_classUtil_1_1Average_1ad90d391e8c6be845d7537c0d2da55029"/>    <section>
    <title>isBlockComplete()</title>
<indexterm><primary>isBlockComplete</primary><secondary>Util::Average</secondary></indexterm>
<indexterm><primary>Util::Average</primary><secondary>isBlockComplete</secondary></indexterm>
<para><computeroutput>bool Util::Average::isBlockComplete ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is the current block average complete? </para>
</para>

<para><formalpara><title>Returns</title>

<para>(iBlock &gt; 0) &amp;&amp; (iBlock == nSamplePerBlock) </para>
</formalpara>
</para>
<para>
Definition at line 232 of file Average.h.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
Average.hAverage.cpp</section>
</section>
