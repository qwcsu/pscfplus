<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1DArray">
<title>Util::DArray&lt; Data &gt; Class Template Reference</title>
<indexterm><primary>Util::DArray&lt; Data &gt;</primary></indexterm>
<para>

<para>Dynamically allocatable contiguous array template. </para>
 
</para>
<para>
<computeroutput>#include &lt;DArray.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Util::DArray&lt; Data &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUtil_1_1DArray.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1DArray_1a5b63d5067de77fe0f87ad54bd515d364">DArray</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1DArray_1a25a3d94eacbe2df0f881d4c4928ce435">DArray</link> (const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; Data &gt; &amp;other)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1DArray_1a7935a30eb9a2ed64c9bb61a284e6a41f">~DArray</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1DArray">DArray</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1DArray_1ac2874784ccb6a1b769ad1a7c1601fe51">operator=</link> (<link linkend="_classUtil_1_1DArray">DArray</link>&lt; Data &gt; const &amp;other)</para>

<para>Assignment operator. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1DArray_1a1ffe3de1a78d48c67fc0186dbb0c6f36">allocate</link> (int <link linkend="_classUtil_1_1Array_1a66a4be07c83c3b49eae3536a3afd9fb0">capacity</link>)</para>

<para>Allocate the underlying C array. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1DArray_1a2528a80e3c270d3b2a76ac673f216339">deallocate</link> ()</para>

<para>Dellocate the underlying C array. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1DArray_1aacdf0983fe144963910652e98e6b3a02">reallocate</link> (int <link linkend="_classUtil_1_1Array_1a66a4be07c83c3b49eae3536a3afd9fb0">capacity</link>)</para>

<para>Reallocate the underlying C array and copy to new location. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1DArray_1a7174e2fd573c3b733fe6bfd04ee5f382">isAllocated</link> () const</para>

<para>Return true if the <link linkend="_classUtil_1_1DArray">DArray</link> has been allocated, false otherwise. </para>
</listitem>
            <listitem><para>template&lt;class Archive &gt; </para><para>void <link linkend="_classUtil_1_1DArray_1a4cf342fbc1930b362bbaabc65e48d7ab">serialize</link> (Archive &amp;ar, const unsigned int version)</para>

<para>Serialize a <link linkend="_classUtil_1_1DArray">DArray</link> to/from an Archive. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data&gt;
class Util::DArray&lt; Data &gt;</title></simplesect>


<para>Dynamically allocatable contiguous array template. </para>



<para>A <link linkend="_classUtil_1_1DArray">DArray</link> wraps a dynamically allocated C <link linkend="_classUtil_1_1Array">Array</link>, and stores the size of the array. A <link linkend="_classUtil_1_1DArray">DArray</link> can be allocated, deallocated or reallocated (i.e., resized and moved) by member functions.j</para>

<para>The Array&lt;Data&gt; base class provides bounds checking when compiled in debug mode. </para>
<para>
Definition at line 31 of file DArray.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1DArray_1a5b63d5067de77fe0f87ad54bd515d364"/>    <section>
    <title>DArray()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>DArray</primary><secondary>Util::DArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DArray&lt; Data &gt;</primary><secondary>DArray</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1DArray">Util::DArray</link>&lt; Data &gt;::<link linkend="_classUtil_1_1DArray">DArray</link></computeroutput></para><para>

<para>Default constructor. </para>
</para>
<para>
Definition at line 121 of file DArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DArray_1a25a3d94eacbe2df0f881d4c4928ce435"/>    <section>
    <title>DArray()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>DArray</primary><secondary>Util::DArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DArray&lt; Data &gt;</primary><secondary>DArray</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1DArray">Util::DArray</link>&lt; Data &gt;::<link linkend="_classUtil_1_1DArray">DArray</link> (const <link linkend="_classUtil_1_1DArray">DArray</link>&lt; Data &gt; &amp; other)</computeroutput></para><para>

<para>Copy constructor. </para>
</para>

<para>Allocates new memory and copies all elements by value.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the <link linkend="_classUtil_1_1DArray">DArray</link> to be copied. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 133 of file DArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DArray_1a7935a30eb9a2ed64c9bb61a284e6a41f"/>    <section>
    <title>~DArray()</title>
<indexterm><primary>~DArray</primary><secondary>Util::DArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DArray&lt; Data &gt;</primary><secondary>~DArray</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1DArray">Util::DArray</link>&lt; Data &gt;::~<link linkend="_classUtil_1_1DArray">DArray</link><computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>

<para>Deletes underlying C array, if allocated previously. </para>
<para>
Definition at line 150 of file DArray.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1DArray_1ac2874784ccb6a1b769ad1a7c1601fe51"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Util::DArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DArray&lt; Data &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1DArray">DArray</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1DArray">Util::DArray</link>&lt; Data &gt;::operator= (<link linkend="_classUtil_1_1DArray">DArray</link>&lt; Data &gt; const &amp; other)</computeroutput></para><para>

<para>Assignment operator. </para>
</para>

<para>If this <link linkend="_classUtil_1_1DArray">DArray</link> is not allocated, allocates and copies all elements.</para>

<para>If this and the other <link linkend="_classUtil_1_1DArray">DArray</link> are both allocated, the capacities must be exactly equal. If so, this method copies all elements.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the RHS <link linkend="_classUtil_1_1DArray">DArray</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 169 of file DArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DArray_1a1ffe3de1a78d48c67fc0186dbb0c6f36"/>    <section>
    <title>allocate()</title>
<indexterm><primary>allocate</primary><secondary>Util::DArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DArray&lt; Data &gt;</primary><secondary>allocate</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DArray">Util::DArray</link>&lt; Data &gt;::allocate (int capacity)</computeroutput></para><para>

<para>Allocate the underlying C array. </para>
</para>

<para>
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry><link linkend="_classUtil_1_1Exception">Exception</link></entry>
                                <entry>
<para>if the <link linkend="_classUtil_1_1DArray">DArray</link> is already allocated.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>capacity</entry>
                                <entry>
<para>number of elements to allocate. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 201 of file DArray.h.</para>
<para>
Referenced by Pscf::TridiagonalSolver::allocate(), Util::CardinalBSpline::CardinalBSpline(), Pscf::Homogeneous::Mixture::computePhi(), Pscf::Pspg::FieldIo&lt; D &gt;::convertBasisToRGrid(), Pscf::Pspg::FieldIo&lt; D &gt;::convertRGridToBasis(), Util::Polynomial&lt; double &gt;::differentiate(), Util::Distribution::Distribution(), Util::IntDistribution::IntDistribution(), Util::Polynomial&lt; double &gt;::integrate(), Util::IntDistribution::operator=(), Util::Distribution::operator=(), Pscf::Pspg::FieldIo&lt; D &gt;::readFieldsBasis(), Pscf::Pspg::FieldIo&lt; D &gt;::readFieldsKGrid(), Pscf::Pspg::FieldIo&lt; D &gt;::readFieldsRGrid(), Util::RadialDistribution::readParameters(), Pscf::Homogeneous::Mixture::readParameters(), Util::IntDistribution::readParameters(), Util::Distribution::readParameters(), Pscf::Homogeneous::Mixture::setNMolecule(), Pscf::Homogeneous::Mixture::setNMonomer(), Util::RadialDistribution::setParam(), Util::IntDistribution::setParam(), Util::Distribution::setParam(), Pscf::PolymerTmpl&lt; Block&lt; D &gt; &gt;::solve(), Pscf::Pspg::FieldIo&lt; D &gt;::writeFieldsBasis(), Pscf::Pspg::FieldIo&lt; D &gt;::writeFieldsKGrid(), and Pscf::Pspg::FieldIo&lt; D &gt;::writeFieldsRGrid().</para>
    </section><anchor xml:id="_classUtil_1_1DArray_1a2528a80e3c270d3b2a76ac673f216339"/>    <section>
    <title>deallocate()</title>
<indexterm><primary>deallocate</primary><secondary>Util::DArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DArray&lt; Data &gt;</primary><secondary>deallocate</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DArray">Util::DArray</link>&lt; Data &gt;::deallocate</computeroutput></para><para>

<para>Dellocate the underlying C array. </para>
</para>

<para>
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry><link linkend="_classUtil_1_1Exception">Exception</link></entry>
                                <entry>
<para>if the <link linkend="_classUtil_1_1DArray">DArray</link> is not allocated. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 219 of file DArray.h.</para>
<para>
Referenced by Pscf::Pspg::FieldIo&lt; D &gt;::convertBasisToRGrid(), Pscf::Pspg::FieldIo&lt; D &gt;::convertRGridToBasis(), and Pscf::PolymerTmpl&lt; Block&lt; D &gt; &gt;::solve().</para>
    </section><anchor xml:id="_classUtil_1_1DArray_1aacdf0983fe144963910652e98e6b3a02"/>    <section>
    <title>reallocate()</title>
<indexterm><primary>reallocate</primary><secondary>Util::DArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DArray&lt; Data &gt;</primary><secondary>reallocate</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DArray">Util::DArray</link>&lt; Data &gt;::reallocate (int capacity)</computeroutput></para><para>

<para>Reallocate the underlying C array and copy to new location. </para>
</para>

<para>The new capacity, given by the capacity parameter, must be greater than the existing array capacity.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>capacity</entry>
                                <entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 232 of file DArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DArray_1a7174e2fd573c3b733fe6bfd04ee5f382"/>    <section>
    <title>isAllocated()</title>
<indexterm><primary>isAllocated</primary><secondary>Util::DArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DArray&lt; Data &gt;</primary><secondary>isAllocated</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1DArray">Util::DArray</link>&lt; Data &gt;::isAllocated<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return true if the <link linkend="_classUtil_1_1DArray">DArray</link> has been allocated, false otherwise. </para>
</para>
<para>
Definition at line 249 of file DArray.h.</para>
<para>
Referenced by Util::bcast(), Util::DArray&lt; Pscf::Monomer &gt;::DArray(), Util::DArray&lt; Pscf::Monomer &gt;::operator=(), Util::recv(), and Util::send().</para>
    </section><anchor xml:id="_classUtil_1_1DArray_1a4cf342fbc1930b362bbaabc65e48d7ab"/>    <section>
    <title>serialize()</title>
<indexterm><primary>serialize</primary><secondary>Util::DArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DArray&lt; Data &gt;</primary><secondary>serialize</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><computeroutput>template&lt;class Archive &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DArray">Util::DArray</link>&lt; Data &gt;::serialize (Archive &amp; ar, const unsigned int version)</computeroutput></para><para>

<para>Serialize a <link linkend="_classUtil_1_1DArray">DArray</link> to/from an Archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>archive </para>
</entry>
                            </row>
                            <row>
                                <entry>version</entry>
                                <entry>
<para>archive version id </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 257 of file DArray.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
DArray.h</section>
</section>
