<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1DPArray">
<title>Util::DPArray&lt; Data &gt; Class Template Reference</title>
<indexterm><primary>Util::DPArray&lt; Data &gt;</primary></indexterm>
<para>

<para>A dynamic array that only holds pointers to its elements. </para>
 
</para>
<para>
<computeroutput>#include &lt;DPArray.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Util::DPArray&lt; Data &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUtil_1_1DPArray.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1DPArray_1a31b9646a4878816d5b03f36cf67f0e0c">DPArray</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1DPArray_1a3c138222a8b6d838951af3397d9cc004">DPArray</link> (const <link linkend="_classUtil_1_1DPArray">DPArray</link>&lt; Data &gt; &amp;other)</para>

<para>Copy constructor, copy pointers. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1DPArray_1a1333150ed2ab20665941013f5c04fc8e">~DPArray</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1DPArray">DPArray</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1DPArray_1a492d8e864a28221c5d5e0311692d8647">operator=</link> (const <link linkend="_classUtil_1_1DPArray">DPArray</link>&lt; Data &gt; &amp;other)</para>

<para>Assignment, element by element. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1DPArray_1a60dd8516323c63046da83566dee22bf9">allocate</link> (int <link linkend="_classUtil_1_1PArray_1a44168c67b49d4fa54f298097065f7796">capacity</link>)</para>

<para>Allocate an array of pointers to Data. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1DPArray_1afe6edb53dcbf8566d0cc6d36da3f7b24">append</link> (Data &amp;data)</para>

<para>Append an element to the end of the sequence. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1DPArray_1a62234d40a8451a372406ced29137a6e4">clear</link> ()</para>

<para>Reset to empty state. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1DPArray_1a0db78fb465d01a3ae9df624366554c8d">isAllocated</link> () const</para>

<para>Is this <link linkend="_classUtil_1_1DPArray">DPArray</link> allocated? </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data&gt;
class Util::DPArray&lt; Data &gt;</title></simplesect>


<para>A dynamic array that only holds pointers to its elements. </para>
<para>
Definition at line 24 of file DPArray.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1DPArray_1a31b9646a4878816d5b03f36cf67f0e0c"/>    <section>
    <title>DPArray()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>DPArray</primary><secondary>Util::DPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DPArray&lt; Data &gt;</primary><secondary>DPArray</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1DPArray">Util::DPArray</link>&lt; Data &gt;::<link linkend="_classUtil_1_1DPArray">DPArray</link><computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 101 of file DPArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DPArray_1a3c138222a8b6d838951af3397d9cc004"/>    <section>
    <title>DPArray()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>DPArray</primary><secondary>Util::DPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DPArray&lt; Data &gt;</primary><secondary>DPArray</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1DPArray">Util::DPArray</link>&lt; Data &gt;::<link linkend="_classUtil_1_1DPArray">DPArray</link> (const <link linkend="_classUtil_1_1DPArray">DPArray</link>&lt; Data &gt; &amp; other)</computeroutput></para><para>

<para>Copy constructor, copy pointers. </para>
</para>

<para>Allocates new Data* array and copies pointers to Data objects.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the <link linkend="_classUtil_1_1DPArray">DPArray</link> to be copied.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Allocates a new Data* array and copies all pointer values.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the <link linkend="_classUtil_1_1DPArray">DPArray</link> to be copied. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 113 of file DPArray.h.</para>
<para>
References Util::PArray&lt; Data &gt;::capacity_, Util::DPArray&lt; Data &gt;::isAllocated(), Util::PArray&lt; Data &gt;::ptrs_, Util::PArray&lt; Data &gt;::size_, and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1DPArray_1a1333150ed2ab20665941013f5c04fc8e"/>    <section>
    <title>~DPArray()</title>
<indexterm><primary>~DPArray</primary><secondary>Util::DPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DPArray&lt; Data &gt;</primary><secondary>~DPArray</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1DPArray">Util::DPArray</link>&lt; Data &gt;::~<link linkend="_classUtil_1_1DPArray">DPArray</link><computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>

<para>Deletes array of pointers, if allocated previously. Does not delete the associated Data objects. </para>
<para>
Definition at line 179 of file DPArray.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1DPArray_1a492d8e864a28221c5d5e0311692d8647"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Util::DPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DPArray&lt; Data &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1DPArray">DPArray</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1DPArray">Util::DPArray</link>&lt; Data &gt;::operator= (const <link linkend="_classUtil_1_1DPArray">DPArray</link>&lt; Data &gt; &amp; other)</computeroutput></para><para>

<para>Assignment, element by element. </para>
</para>

<para>Preconditions:<itemizedlist>
<listitem>
<para>Both this and other DPArrays must be allocated.</para>
</listitem><listitem>
<para>Capacity of this <link linkend="_classUtil_1_1DPArray">DPArray</link> must be &gt;= size of RHS <link linkend="_classUtil_1_1DPArray">DPArray</link>.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the rhs <link linkend="_classUtil_1_1DPArray">DPArray</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 141 of file DPArray.h.</para>
<para>
References Util::PArray&lt; Data &gt;::ptrs_, Util::PArray&lt; Data &gt;::size_, and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1DPArray_1a60dd8516323c63046da83566dee22bf9"/>    <section>
    <title>allocate()</title>
<indexterm><primary>allocate</primary><secondary>Util::DPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DPArray&lt; Data &gt;</primary><secondary>allocate</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DPArray">Util::DPArray</link>&lt; Data &gt;::allocate (int capacity)</computeroutput></para><para>

<para>Allocate an array of pointers to Data. </para>
</para>

<para>Throw an <link linkend="_classUtil_1_1Exception">Exception</link> if the <link linkend="_classUtil_1_1DPArray">DPArray</link> has already been allocated - A <link linkend="_classUtil_1_1DPArray">DPArray</link> can only be allocated once.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>capacity</entry>
                                <entry>
<para>number of elements to allocate. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 193 of file DPArray.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1DPArray_1afe6edb53dcbf8566d0cc6d36da3f7b24"/>    <section>
    <title>append()</title>
<indexterm><primary>append</primary><secondary>Util::DPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DPArray&lt; Data &gt;</primary><secondary>append</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DPArray">Util::DPArray</link>&lt; Data &gt;::append (Data &amp; data)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Append an element to the end of the sequence. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>Data object to be appended </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 210 of file DPArray.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1DPArray_1a62234d40a8451a372406ced29137a6e4"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::DPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DPArray&lt; Data &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DPArray">Util::DPArray</link>&lt; Data &gt;::clear</computeroutput></para><para>

<para>Reset to empty state. </para>
</para>
<para>
Definition at line 226 of file DPArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DPArray_1a0db78fb465d01a3ae9df624366554c8d"/>    <section>
    <title>isAllocated()</title>
<indexterm><primary>isAllocated</primary><secondary>Util::DPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DPArray&lt; Data &gt;</primary><secondary>isAllocated</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1DPArray">Util::DPArray</link>&lt; Data &gt;::isAllocated<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this <link linkend="_classUtil_1_1DPArray">DPArray</link> allocated? </para>
</para>
<para>
Definition at line 237 of file DPArray.h.</para>
<para>
Referenced by Util::DPArray&lt; Data &gt;::DPArray().</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
DPArray.h</section>
</section>
