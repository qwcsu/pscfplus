<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1FPArray">
<title>Util::FPArray&lt; Data, Capacity &gt; Class Template Reference</title>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary></indexterm>
<para>

<para>Statically allocated pointer array. </para>
 
</para>
<para>
<computeroutput>#include &lt;FPArray.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1FPArray_1a334c513c03ed5250836e7b6b412af698">FPArray</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1FPArray_1a3e003076eca37c568a9b95c7992138c0">FPArray</link> (const <link linkend="_classUtil_1_1FPArray">FPArray</link>&lt; Data, Capacity &gt; &amp;other)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1FPArray_1a3019cd50e9b1db6c97adf2fff89c71b9">~FPArray</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1FPArray">FPArray</link>&lt; Data, Capacity &gt; &amp; <link linkend="_classUtil_1_1FPArray_1aea1ae935a392c2116eb84c01ff961f51">operator=</link> (const <link linkend="_classUtil_1_1FPArray">FPArray</link>&lt; Data, Capacity &gt; &amp;other)</para>

<para>Assignment, element by element. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1FPArray_1a92c2e3541b37d351d5e94d84ce681c46">append</link> (Data &amp;data)</para>

<para>Append an element to the end of the array. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1FPArray_1a266f12e22535485418288b4137664d33">clear</link> ()</para>

<para>Set logical size to zero and nullify all elements. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1FPArray_1addc112616ba13384265f5f8037d0dc1c">capacity</link> () const</para>

<para>Return physical capacity of array. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1FPArray_1ae34cedd531aa9ef85f6b57f25d7c518a">size</link> () const</para>

<para>Return logical size of this array. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1FPArray_1acf11384cb26c7a3c40a98afe0aab7f84">begin</link> (<link linkend="_classUtil_1_1PArrayIterator">PArrayIterator</link>&lt; Data &gt; &amp;iterator)</para>

<para>Set an iterator to begin this container. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1FPArray_1ae4f42b2b5ce0e39f41b13e8ef3e4872b">begin</link> (<link linkend="_classUtil_1_1ConstPArrayIterator">ConstPArrayIterator</link>&lt; Data &gt; &amp;iterator) const</para>

<para>Set a const iterator to begin this container. </para>
</listitem>
            <listitem><para>Data &amp; <link linkend="_classUtil_1_1FPArray_1a004d5b290ae68240fe50fb8c1ab24150">operator[]</link> (int i)</para>

<para>Get an element by reference (mimic C-array subscripting). </para>
</listitem>
            <listitem><para>const Data &amp; <link linkend="_classUtil_1_1FPArray_1a0daabd401bc01205bce411b62b18a52f">operator[]</link> (int i) const</para>

<para>Get an element by const reference (mimic C-array subscripting). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>Data * <link linkend="_classUtil_1_1FPArray_1a22e7fa9f7fccd292606e2d883b4f6efa">ptrs_</link> [Capacity]</para>

<para><link linkend="_classUtil_1_1Array">Array</link> of pointers to Data objects. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1FPArray_1a85026ccfb57ce84ea928148d366286d2">size_</link></para>

<para>Logical size of array (number of elements used). </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data, int Capacity&gt;
class Util::FPArray&lt; Data, Capacity &gt;</title></simplesect>


<para>Statically allocated pointer array. </para>



<para>A <link linkend="_classUtil_1_1FPArray">FPArray</link> is a statically allocated array that actually holds pointers to Data objects, but for which the [] operator returns a reference to the associated object. It is implemented as a wrapper for a statically allocated C array of Data* pointers. A <link linkend="_classUtil_1_1FPArray">FPArray</link> is not responsible for destroying the associated Data objects.</para>

<para>The interface of an <link linkend="_classUtil_1_1FPArray">FPArray</link> is identical to that of an <link linkend="_classUtil_1_1FSArray">FSArray</link>. An <link linkend="_classUtil_1_1FPArray">FPArray</link> has both a capacity that is set at compile time, which is the physical size of the underlying C array, and a size, which is the number of contiguous elements (indexed from 0 to size-1) that contain valid pointers. The size can only be increased only by the <link linkend="_classUtil_1_1FPArray_1a92c2e3541b37d351d5e94d84ce681c46">append()</link> method, which adds an element to the end of the array.</para>

<para>When compiled in debug mode, the operator [] checks that the index is less than the size and non-negative. </para>
<para>
Definition at line 40 of file FPArray.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1FPArray_1a334c513c03ed5250836e7b6b412af698"/>    <section>
    <title>FPArray()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>FPArray</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>FPArray</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::<link linkend="_classUtil_1_1FPArray">FPArray</link><computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>

<para>Constructor. </para>
<para>
Definition at line 139 of file FPArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FPArray_1a3e003076eca37c568a9b95c7992138c0"/>    <section>
    <title>FPArray()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>FPArray</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>FPArray</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::<link linkend="_classUtil_1_1FPArray">FPArray</link> (const <link linkend="_classUtil_1_1FPArray">FPArray</link>&lt; Data, Capacity &gt; &amp; other)</computeroutput></para><para>

<para>Copy constructor. </para>
</para>

<para>Copies all pointers.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the <link linkend="_classUtil_1_1FPArray">FPArray</link> to be copied. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 147 of file FPArray.h.</para>
<para>
References Util::FPArray&lt; Data, Capacity &gt;::ptrs_, and Util::FPArray&lt; Data, Capacity &gt;::size_.</para>
    </section><anchor xml:id="_classUtil_1_1FPArray_1a3019cd50e9b1db6c97adf2fff89c71b9"/>    <section>
    <title>~FPArray()</title>
<indexterm><primary>~FPArray</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>~FPArray</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::~<link linkend="_classUtil_1_1FPArray">FPArray</link></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 202 of file FPArray.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1FPArray_1aea1ae935a392c2116eb84c01ff961f51"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1FPArray">FPArray</link>&lt; Data, Capacity &gt; &amp; <link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::operator= (const <link linkend="_classUtil_1_1FPArray">FPArray</link>&lt; Data, Capacity &gt; &amp; other)</computeroutput></para><para>

<para>Assignment, element by element. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the rhs <link linkend="_classUtil_1_1FPArray">FPArray</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 171 of file FPArray.h.</para>
<para>
References Util::FPArray&lt; Data, Capacity &gt;::size_, and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1FPArray_1a92c2e3541b37d351d5e94d84ce681c46"/>    <section>
    <title>append()</title>
<indexterm><primary>append</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>append</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::append (Data &amp; data)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Append an element to the end of the array. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>Data to add to end of array. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 275 of file FPArray.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1FPArray_1a266f12e22535485418288b4137664d33"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::clear<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set logical size to zero and nullify all elements. </para>
</para>
<para>
Definition at line 288 of file FPArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FPArray_1addc112616ba13384265f5f8037d0dc1c"/>    <section>
    <title>capacity()</title>
<indexterm><primary>capacity</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>capacity</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::capacity<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return physical capacity of array. </para>
</para>
<para>
Definition at line 209 of file FPArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FPArray_1ae34cedd531aa9ef85f6b57f25d7c518a"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::size<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return logical size of this array. </para>
</para>
<para>
Definition at line 216 of file FPArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FPArray_1acf11384cb26c7a3c40a98afe0aab7f84"/>    <section>
    <title>begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::begin (<link linkend="_classUtil_1_1PArrayIterator">PArrayIterator</link>&lt; Data &gt; &amp; iterator)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set an iterator to begin this container. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>iterator</entry>
                                <entry>
<para><link linkend="_classUtil_1_1PArrayIterator">PArrayIterator</link>, initialized on output. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 224 of file FPArray.h.</para>
<para>
References Util::PArrayIterator&lt; Data &gt;::setCurrent(), and Util::PArrayIterator&lt; Data &gt;::setEnd().</para>
    </section><anchor xml:id="_classUtil_1_1FPArray_1ae4f42b2b5ce0e39f41b13e8ef3e4872b"/>    <section>
    <title>begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::begin (<link linkend="_classUtil_1_1ConstPArrayIterator">ConstPArrayIterator</link>&lt; Data &gt; &amp; iterator) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set a const iterator to begin this container. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>iterator</entry>
                                <entry>
<para><link linkend="_classUtil_1_1ConstPArrayIterator">ConstPArrayIterator</link>, initialized on output. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 235 of file FPArray.h.</para>
<para>
References Util::ConstPArrayIterator&lt; Data &gt;::setCurrent(), and Util::ConstPArrayIterator&lt; Data &gt;::setEnd().</para>
    </section><anchor xml:id="_classUtil_1_1FPArray_1a004d5b290ae68240fe50fb8c1ab24150"/>    <section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>Data &amp; <link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::operator[] (int i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get an element by reference (mimic C-array subscripting). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>array index </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to element i </para>
</formalpara>
</para>
<para>
Definition at line 248 of file FPArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FPArray_1a0daabd401bc01205bce411b62b18a52f"/>    <section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>const Data &amp; <link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::operator[] (int i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get an element by const reference (mimic C-array subscripting). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>array index </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const reference to element i </para>
</formalpara>
</para>
<para>
Definition at line 262 of file FPArray.h.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classUtil_1_1FPArray_1a22e7fa9f7fccd292606e2d883b4f6efa"/>    <section>
    <title>ptrs_</title>
<indexterm><primary>ptrs_</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>ptrs_</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>Data* <link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::ptrs_[Capacity]<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para><link linkend="_classUtil_1_1Array">Array</link> of pointers to Data objects. </para>
</para>
<para>
Definition at line 126 of file FPArray.h.</para>
<para>
Referenced by Util::FPArray&lt; Data, Capacity &gt;::FPArray().</para>
    </section><anchor xml:id="_classUtil_1_1FPArray_1a85026ccfb57ce84ea928148d366286d2"/>    <section>
    <title>size_</title>
<indexterm><primary>size_</primary><secondary>Util::FPArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FPArray&lt; Data, Capacity &gt;</primary><secondary>size_</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1FPArray">Util::FPArray</link>&lt; Data, Capacity &gt;::size_<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Logical size of array (number of elements used). </para>
</para>
<para>
Definition at line 129 of file FPArray.h.</para>
<para>
Referenced by Util::FPArray&lt; Data, Capacity &gt;::FPArray(), and Util::FPArray&lt; Data, Capacity &gt;::operator=().</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
FPArray.h</section>
</section>
