<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1Factory">
<title>Util::Factory&lt; Data &gt; Class Template Reference</title>
<indexterm><primary>Util::Factory&lt; Data &gt;</primary></indexterm>
<para>

<para><link linkend="_classUtil_1_1Factory">Factory</link> template. </para>
 
</para>
<para>
<computeroutput>#include &lt;Factory.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Factory_1abed74f57b3e4aa935aa9c6ac00237bf4">Factory</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1Factory_1a7d0e3928c0ec7ac854b96d9201cc757a">~Factory</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Factory_1acc4e596c0a8636a5553ada58dfe898ce">addSubfactory</link> (<link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; &amp;subfactory)</para>

<para>Add a new subfactory to the list. </para>
</listitem>
            <listitem><para>virtual Data * <link linkend="_classUtil_1_1Factory_1a75ae49003fb0b92da58e370ceae64153">factory</link> (const std::string &amp;className) const =0</para>

<para>Returns a pointer to a new instance of specified subclass. </para>
</listitem>
            <listitem><para>Data * <link linkend="_classUtil_1_1Factory_1aff55a134e6b770ca6f656417f4519fd5">readObject</link> (std::istream &amp;in, <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link> &amp;parent, std::string &amp;className, bool &amp;isEnd)</para>

<para>Read a class name, instantiate an object, and read its parameters. </para>
</listitem>
            <listitem><para>Data * <link linkend="_classUtil_1_1Factory_1ac1b7f10f4dc2adae114c4bcadb0b1b44">loadObject</link> (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp;ar, <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link> &amp;parent, std::string &amp;className)</para>

<para>Load a class name, instantiate an object, and load the object. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>Data * <link linkend="_classUtil_1_1Factory_1a2119c2c8c8932225aa2287bc80f9d7c9">trySubfactories</link> (const std::string &amp;className) const</para>

<para>Search through subfactories for match. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Factory_1a91853b5c1badde4e641aa70ab8b92964">setIoCommunicator</link> (MPI::Intracomm &amp;communicator)</para>

<para>Set associated Mpi communicator. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Factory_1a36eb4f0f8af72e65be731a795fe2bccb">hasIoCommunicator</link> () const</para>

<para>Does this factory have a param communicator? </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data&gt;
class Util::Factory&lt; Data &gt;</title></simplesect>


<para><link linkend="_classUtil_1_1Factory">Factory</link> template. </para>
<para>
Definition at line 32 of file Factory.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1Factory_1abed74f57b3e4aa935aa9c6ac00237bf4"/>    <section>
    <title>Factory()</title>
<indexterm><primary>Factory</primary><secondary>Util::Factory&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Factory&lt; Data &gt;</primary><secondary>Factory</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Factory">Util::Factory</link>&lt; Data &gt;::<link linkend="_classUtil_1_1Factory">Factory</link></computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 165 of file Factory.h.</para>
    </section><anchor xml:id="_classUtil_1_1Factory_1a7d0e3928c0ec7ac854b96d9201cc757a"/>    <section>
    <title>~Factory()</title>
<indexterm><primary>~Factory</primary><secondary>Util::Factory&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Factory&lt; Data &gt;</primary><secondary>~Factory</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Factory">Util::Factory</link>&lt; Data &gt;::~<link linkend="_classUtil_1_1Factory">Factory</link><computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 173 of file Factory.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1Factory_1acc4e596c0a8636a5553ada58dfe898ce"/>    <section>
    <title>addSubfactory()</title>
<indexterm><primary>addSubfactory</primary><secondary>Util::Factory&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Factory&lt; Data &gt;</primary><secondary>addSubfactory</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Factory">Util::Factory</link>&lt; Data &gt;::addSubfactory (<link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; &amp; subfactory)</computeroutput></para><para>

<para>Add a new subfactory to the list. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>subfactory</entry>
                                <entry>
<para>New subfactory to be added </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 204 of file Factory.h.</para>
    </section><anchor xml:id="_classUtil_1_1Factory_1a75ae49003fb0b92da58e370ceae64153"/>    <section>
    <title>factory()</title>
<indexterm><primary>factory</primary><secondary>Util::Factory&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Factory&lt; Data &gt;</primary><secondary>factory</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>virtual Data* <link linkend="_classUtil_1_1Factory">Util::Factory</link>&lt; Data &gt;::factory (const std::string &amp; className) const<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Returns a pointer to a new instance of specified subclass. </para>
</para>

<para>This method takes the name className of a subclass of Data as a parameter, and attempts to instantiate an object of that class. If it recognizes the className, it creates an instance of that class and returns a Data* base class pointer to the new object. If it does not recognize the className, it returns a null pointer.</para>

<para>An implementation should first call &quot;trySubfactories(className)&quot; and immediately return if this returns a non-null pointer, before attempting to match the className against specific strings.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>className</entry>
                                <entry>
<para>name of subclass </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>base class pointer to new object, or a null pointer. </para>
</formalpara>
</para>
    </section><anchor xml:id="_classUtil_1_1Factory_1aff55a134e6b770ca6f656417f4519fd5"/>    <section>
    <title>readObject()</title>
<indexterm><primary>readObject</primary><secondary>Util::Factory&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Factory&lt; Data &gt;</primary><secondary>readObject</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>Data * <link linkend="_classUtil_1_1Factory">Util::Factory</link>&lt; Data &gt;::readObject (std::istream &amp; in, <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link> &amp; parent, std::string &amp; className, bool &amp; isEnd)</computeroutput></para><para>

<para>Read a class name, instantiate an object, and read its parameters. </para>
</para>

<para>This method:<itemizedlist>
<listitem>
<para>reads a comment line of the form className + {</para>
</listitem><listitem>
<para>invokes the factory method to create an instance of className</para>
</listitem><listitem>
<para>invokes the readParam() method of the new object</para>
</listitem></itemizedlist>
</para>

<para>When compiled with MPI, if the parent <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link> has a param communicator, this method reads the comment line on the Io processor, broadcasts it to all others, and then lets each processor independently match this string.</para>

<para>
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry><link linkend="_classUtil_1_1Exception">Exception</link></entry>
                                <entry>
<para>if className is not recognized.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                            <row>
                                <entry>parent</entry>
                                <entry>
<para>parent <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link> object </para>
</entry>
                            </row>
                            <row>
                                <entry>className</entry>
                                <entry>
<para>(output) name of subclass of Data </para>
</entry>
                            </row>
                            <row>
                                <entry>isEnd</entry>
                                <entry>
<para>(output) is the input a closing bracket &quot;}&quot; ? </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pointer to new instance of className </para>
</formalpara>
</para>
<para>
Definition at line 214 of file Factory.h.</para>
<para>
References Util::ParamComposite::addParamComposite(), Util::ParamComponent::echo(), Util::Log::file(), Util::MpiFileIo::hasIoCommunicator(), Util::MpiFileIo::ioCommunicator(), Util::ParamComponent::setIndent(), UTIL_THROW, and Util::Begin::writeParam().</para>
    </section><anchor xml:id="_classUtil_1_1Factory_1ac1b7f10f4dc2adae114c4bcadb0b1b44"/>    <section>
    <title>loadObject()</title>
<indexterm><primary>loadObject</primary><secondary>Util::Factory&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Factory&lt; Data &gt;</primary><secondary>loadObject</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>Data * <link linkend="_classUtil_1_1Factory">Util::Factory</link>&lt; Data &gt;::loadObject (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp; ar, <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link> &amp; parent, std::string &amp; className)</computeroutput></para><para>

<para>Load a class name, instantiate an object, and load the object. </para>
</para>

<para>This method:<itemizedlist>
<listitem>
<para>loads a className from an input archive</para>
</listitem><listitem>
<para>invokes the factory method to create an instance of className</para>
</listitem><listitem>
<para>invokes the load() method of the new object</para>
</listitem></itemizedlist>
</para>

<para>When compiled with MPI, if the parent <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link> has a param communicator, this method loads the comment line on the Io processor, broadcasts it to all others, and then lets each processor independently match this string.</para>

<para>
                <formalpara>
                    <title>
Exceptions                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry><link linkend="_classUtil_1_1Exception">Exception</link></entry>
                                <entry>
<para>if className is not recognized.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>input/loading archive </para>
</entry>
                            </row>
                            <row>
                                <entry>parent</entry>
                                <entry>
<para>parent <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link> object </para>
</entry>
                            </row>
                            <row>
                                <entry>className</entry>
                                <entry>
<para>(output) name of subclass of Data </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pointer to new instance of className </para>
</formalpara>
</para>
<para>
Definition at line 303 of file Factory.h.</para>
<para>
References Util::Log::file(), Util::MpiFileIo::hasIoCommunicator(), Util::MpiFileIo::ioCommunicator(), and Util::ParamComposite::loadParamComposite().</para>
    </section><anchor xml:id="_classUtil_1_1Factory_1a2119c2c8c8932225aa2287bc80f9d7c9"/>    <section>
    <title>trySubfactories()</title>
<indexterm><primary>trySubfactories</primary><secondary>Util::Factory&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Factory&lt; Data &gt;</primary><secondary>trySubfactories</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>Data * <link linkend="_classUtil_1_1Factory">Util::Factory</link>&lt; Data &gt;::trySubfactories (const std::string &amp; className) const<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Search through subfactories for match. </para>
</para>

<para>This method iterates through all registered subfactories, calls the factory(const std::string&amp; ) method of each, and immediately returns a pointer to a new object if any of them returns a non-null pointer. If all of them return a null pointer, this method also returns a null pointer.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>className</entry>
                                <entry>
<para>name of subclass </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>base class pointer to new object, or a null pointer. </para>
</formalpara>
</para>
<para>
Definition at line 340 of file Factory.h.</para>
    </section><anchor xml:id="_classUtil_1_1Factory_1a91853b5c1badde4e641aa70ab8b92964"/>    <section>
    <title>setIoCommunicator()</title>
<indexterm><primary>setIoCommunicator</primary><secondary>Util::Factory&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Factory&lt; Data &gt;</primary><secondary>setIoCommunicator</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Factory">Util::Factory</link>&lt; Data &gt;::setIoCommunicator (MPI::Intracomm &amp; communicator)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Set associated Mpi communicator. </para>
</para>

<para>Is not recursive (is not applied to subfactories).</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>communicator</entry>
                                <entry>
<para>MPI Intra-communicator to use for input </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 181 of file Factory.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1Factory_1a36eb4f0f8af72e65be731a795fe2bccb"/>    <section>
    <title>hasIoCommunicator()</title>
<indexterm><primary>hasIoCommunicator</primary><secondary>Util::Factory&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Factory&lt; Data &gt;</primary><secondary>hasIoCommunicator</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1Factory">Util::Factory</link>&lt; Data &gt;::hasIoCommunicator<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Does this factory have a param communicator? </para>
</para>
<para>
Definition at line 196 of file Factory.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Factory.h</section>
</section>
