<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1FlagSet">
<title>Util::FlagSet Class Reference</title>
<indexterm><primary>Util::FlagSet</primary></indexterm>
<para>

<para>A set of boolean variables represented by characters. </para>
 
</para>
<para>
<computeroutput>#include &lt;FlagSet.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1FlagSet_1ace5ca61a16586e06954294d500310b08">FlagSet</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1FlagSet_1a89257d452123260b7cca4529e8a85a83">FlagSet</link> (std::string <link linkend="_classUtil_1_1FlagSet_1a2f08f6602ae873d8a4c8f1e5b8e2889b">allowed</link>)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1FlagSet_1a9e211790c557854e95e54fcca020ea5c">setAllowed</link> (std::string <link linkend="_classUtil_1_1FlagSet_1a2f08f6602ae873d8a4c8f1e5b8e2889b">allowed</link>)</para>

<para>Set or reset the string of allowed flags. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1FlagSet_1a00db8a8ae180b92290976537252a6ef2">setActualOrdered</link> (std::string <link linkend="_classUtil_1_1FlagSet_1a3f3935f359d409e120b96c03d9f9acfc">actual</link>)</para>

<para>Set the string of actual flag characters. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1FlagSet_1a1ee0b5e8fb224b8e3f29744772de2209">isActive</link> (char c) const</para>

<para>Is the flag associated with character c active? </para>
</listitem>
            <listitem><para>const std::string &amp; <link linkend="_classUtil_1_1FlagSet_1a2f08f6602ae873d8a4c8f1e5b8e2889b">allowed</link> () const</para>

<para>Return the string of allowed characters. </para>
</listitem>
            <listitem><para>const std::string &amp; <link linkend="_classUtil_1_1FlagSet_1a3f3935f359d409e120b96c03d9f9acfc">actual</link> () const</para>

<para>Return the string of character for which flags are set. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A set of boolean variables represented by characters. </para>



<para>A <link linkend="_classUtil_1_1FlagSet">FlagSet</link> has a string of allowed characters, each of which which represents a boolean variable (i.e., a flag), and a string of actual characters containing the subset of the allowed characters that should be set on (i.e., true). </para>
<para>
Definition at line 28 of file FlagSet.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1FlagSet_1ace5ca61a16586e06954294d500310b08"/>    <section>
    <title>FlagSet()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>FlagSet</primary><secondary>Util::FlagSet</secondary></indexterm>
<indexterm><primary>Util::FlagSet</primary><secondary>FlagSet</secondary></indexterm>
<para><computeroutput>Util::FlagSet::FlagSet ( )</computeroutput></para><para>

<para>Default constructor. </para>
</para>
<para>
Definition at line 17 of file FlagSet.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1FlagSet_1a89257d452123260b7cca4529e8a85a83"/>    <section>
    <title>FlagSet()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>FlagSet</primary><secondary>Util::FlagSet</secondary></indexterm>
<indexterm><primary>Util::FlagSet</primary><secondary>FlagSet</secondary></indexterm>
<para><computeroutput>Util::FlagSet::FlagSet (std::string allowed)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>This function calls setAllowed(string) internally.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>allowed</entry>
                                <entry>
<para>string of all allowed characters. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 23 of file FlagSet.cpp.</para>
<para>
References allowed(), and setAllowed().</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1FlagSet_1a9e211790c557854e95e54fcca020ea5c"/>    <section>
    <title>setAllowed()</title>
<indexterm><primary>setAllowed</primary><secondary>Util::FlagSet</secondary></indexterm>
<indexterm><primary>Util::FlagSet</primary><secondary>setAllowed</secondary></indexterm>
<para><computeroutput>void Util::FlagSet::setAllowed (std::string allowed)</computeroutput></para><para>

<para>Set or reset the string of allowed flags. </para>
</para>

<para>This function sets isActive false for all flags and clears the actual string.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>allowed</entry>
                                <entry>
<para>string of all allowed characters </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 29 of file FlagSet.cpp.</para>
<para>
References allowed().</para>
<para>
Referenced by FlagSet().</para>
    </section><anchor xml:id="_classUtil_1_1FlagSet_1a00db8a8ae180b92290976537252a6ef2"/>    <section>
    <title>setActualOrdered()</title>
<indexterm><primary>setActualOrdered</primary><secondary>Util::FlagSet</secondary></indexterm>
<indexterm><primary>Util::FlagSet</primary><secondary>setActualOrdered</secondary></indexterm>
<para><computeroutput>void Util::FlagSet::setActualOrdered (std::string actual)</computeroutput></para><para>

<para>Set the string of actual flag characters. </para>
</para>

<para>This function requires that the characters in the actual string appear in the same order as they do in the allowed string, but allows some allowed characters to be absent.</para>

<para>An <link linkend="_classUtil_1_1Exception">Exception</link> is thrown if actual contains a character that is not allowed, or if it is not in order.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>actual</entry>
                                <entry>
<para>string containing a subset of allowed characters </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 47 of file FlagSet.cpp.</para>
<para>
References actual(), and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1FlagSet_1a1ee0b5e8fb224b8e3f29744772de2209"/>    <section>
    <title>isActive()</title>
<indexterm><primary>isActive</primary><secondary>Util::FlagSet</secondary></indexterm>
<indexterm><primary>Util::FlagSet</primary><secondary>isActive</secondary></indexterm>
<para><computeroutput>bool Util::FlagSet::isActive (char c) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is the flag associated with character c active? </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>c</entry>
                                <entry>
<para>character to be tested. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 110 of file FlagSet.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1FlagSet_1a2f08f6602ae873d8a4c8f1e5b8e2889b"/>    <section>
    <title>allowed()</title>
<indexterm><primary>allowed</primary><secondary>Util::FlagSet</secondary></indexterm>
<indexterm><primary>Util::FlagSet</primary><secondary>allowed</secondary></indexterm>
<para><computeroutput>const std::string &amp; Util::FlagSet::allowed ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return the string of allowed characters. </para>
</para>
<para>
Definition at line 123 of file FlagSet.h.</para>
<para>
Referenced by FlagSet(), and setAllowed().</para>
    </section><anchor xml:id="_classUtil_1_1FlagSet_1a3f3935f359d409e120b96c03d9f9acfc"/>    <section>
    <title>actual()</title>
<indexterm><primary>actual</primary><secondary>Util::FlagSet</secondary></indexterm>
<indexterm><primary>Util::FlagSet</primary><secondary>actual</secondary></indexterm>
<para><computeroutput>const std::string &amp; Util::FlagSet::actual ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return the string of character for which flags are set. </para>
</para>
<para>
Definition at line 130 of file FlagSet.h.</para>
<para>
Referenced by setActualOrdered().</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
FlagSet.hFlagSet.cpp</section>
</section>
