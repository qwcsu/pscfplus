<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1FlexPtr">
<title>Util::FlexPtr&lt; T &gt; Class Template Reference</title>
<indexterm><primary>Util::FlexPtr&lt; T &gt;</primary></indexterm>
<para>

<para>A pointer that may or may not own the object to which it points. </para>
 
</para>
<para>
<computeroutput>#include &lt;FlexPtr.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef T <link linkend="_classUtil_1_1FlexPtr_1a1fd2e9c82ad4ab84a194c9ce2320071a">element_type</link></para>

<para>Type of object pointed to. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1FlexPtr_1a50d336cc047abe0bad58f44f54e8afed">FlexPtr</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1FlexPtr_1ac0632147e63fa24b3a91afa81871b6ea">~FlexPtr</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1FlexPtr_1a3ede6935e7c3e80570b4cfb19879f427">acquire</link> (T *p)</para>

<para>Copy a built-in pointer, and accept ownership. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1FlexPtr_1a3022ce5f92ebb70bced6853c71f2b862">copy</link> (T *p)</para>

<para>Copy a built-in pointer, without accepting ownership. </para>
</listitem>
            <listitem><para>T &amp; <link linkend="_classUtil_1_1FlexPtr_1a3a7a4354fd2f1f73f73bd6838db2dd99">operator*</link> () const</para>

<para>Dereference. </para>
</listitem>
            <listitem><para>T * <link linkend="_classUtil_1_1FlexPtr_1ad7cd4a8af3b7df2f8fd4f1a8c42ee479">operator-&gt;</link> () const</para>

<para>Member access. </para>
</listitem>
            <listitem><para>T * <link linkend="_classUtil_1_1FlexPtr_1a8526bde45545ea6627b97a62e722151d">get</link> () const</para>

<para>Return the built-in pointer. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename T&gt;
class Util::FlexPtr&lt; T &gt;</title></simplesect>


<para>A pointer that may or may not own the object to which it points. </para>



<para><link linkend="_classUtil_1_1FlexPtr">FlexPtr</link> overloads * and -&gt;, and thus mimics a built-in pointer in most respects.</para>

<para>The <link linkend="_classUtil_1_1FlexPtr_1a3ede6935e7c3e80570b4cfb19879f427">acquire(T*)</link> method copies a built-in pointer and accept ownership of the object to which it points, i.e., accepts responsibility for deleting the object, normally when the <link linkend="_classUtil_1_1FlexPtr">FlexPtr</link> goes out of scope.</para>

<para>The <link linkend="_classUtil_1_1FlexPtr_1a3022ce5f92ebb70bced6853c71f2b862">copy(T*)</link> method copies a built-in pointer without accepting ownership, i.e., without accepting responsibility for deleting the object to which it points.</para>

<para>Both <link linkend="_classUtil_1_1FlexPtr_1a3ede6935e7c3e80570b4cfb19879f427">acquire()</link> and <link linkend="_classUtil_1_1FlexPtr_1a3022ce5f92ebb70bced6853c71f2b862">copy()</link> destroy any object that is already owned by this <link linkend="_classUtil_1_1FlexPtr">FlexPtr</link> before copying of a new pointer. </para>
<para>
Definition at line 35 of file FlexPtr.h.</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classUtil_1_1FlexPtr_1a1fd2e9c82ad4ab84a194c9ce2320071a"/>    <section>
    <title>element_type</title>
<indexterm><primary>element_type</primary><secondary>Util::FlexPtr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::FlexPtr&lt; T &gt;</primary><secondary>element_type</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>typedef T <link linkend="_classUtil_1_1FlexPtr">Util::FlexPtr</link>&lt; T &gt;::<link linkend="_classUtil_1_1FlexPtr_1a1fd2e9c82ad4ab84a194c9ce2320071a">element_type</link></computeroutput></para><para>

<para>Type of object pointed to. </para>
</para>
<para>
Definition at line 41 of file FlexPtr.h.</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1FlexPtr_1a50d336cc047abe0bad58f44f54e8afed"/>    <section>
    <title>FlexPtr()</title>
<indexterm><primary>FlexPtr</primary><secondary>Util::FlexPtr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::FlexPtr&lt; T &gt;</primary><secondary>FlexPtr</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1FlexPtr">Util::FlexPtr</link>&lt; T &gt;::<link linkend="_classUtil_1_1FlexPtr">FlexPtr</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 46 of file FlexPtr.h.</para>
    </section><anchor xml:id="_classUtil_1_1FlexPtr_1ac0632147e63fa24b3a91afa81871b6ea"/>    <section>
    <title>~FlexPtr()</title>
<indexterm><primary>~FlexPtr</primary><secondary>Util::FlexPtr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::FlexPtr&lt; T &gt;</primary><secondary>~FlexPtr</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1FlexPtr">Util::FlexPtr</link>&lt; T &gt;::~<link linkend="_classUtil_1_1FlexPtr">FlexPtr</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>

<para>Deletes any object that is owned by this <link linkend="_classUtil_1_1FlexPtr">FlexPtr</link>. </para>
<para>
Definition at line 56 of file FlexPtr.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1FlexPtr_1a3ede6935e7c3e80570b4cfb19879f427"/>    <section>
    <title>acquire()</title>
<indexterm><primary>acquire</primary><secondary>Util::FlexPtr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::FlexPtr&lt; T &gt;</primary><secondary>acquire</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1FlexPtr">Util::FlexPtr</link>&lt; T &gt;::acquire (T * p)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy a built-in pointer, and accept ownership. </para>
</para>

<para>If this <link linkend="_classUtil_1_1FlexPtr">FlexPtr</link> already owns an object, it will be deleted before acquiring a new pointer.</para>

<para>Throws an <link linkend="_classUtil_1_1Exception">Exception</link> if p is null.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>p</entry>
                                <entry>
<para>Built-in pointer to be acquired. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 73 of file FlexPtr.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1FlexPtr_1a3022ce5f92ebb70bced6853c71f2b862"/>    <section>
    <title>copy()</title>
<indexterm><primary>copy</primary><secondary>Util::FlexPtr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::FlexPtr&lt; T &gt;</primary><secondary>copy</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1FlexPtr">Util::FlexPtr</link>&lt; T &gt;::copy (T * p)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy a built-in pointer, without accepting ownership. </para>
</para>

<para>If this <link linkend="_classUtil_1_1FlexPtr">FlexPtr</link> already owns an object, it will be deleted before copying a new pointer.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>p</entry>
                                <entry>
<para>Built-in pointer to be copied. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 93 of file FlexPtr.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1FlexPtr_1a3a7a4354fd2f1f73f73bd6838db2dd99"/>    <section>
    <title>operator*()</title>
<indexterm><primary>operator*</primary><secondary>Util::FlexPtr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::FlexPtr&lt; T &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T&amp; <link linkend="_classUtil_1_1FlexPtr">Util::FlexPtr</link>&lt; T &gt;::operator* ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Dereference. </para>
</para>
<para>
Definition at line 108 of file FlexPtr.h.</para>
    </section><anchor xml:id="_classUtil_1_1FlexPtr_1ad7cd4a8af3b7df2f8fd4f1a8c42ee479"/>    <section>
    <title>operator-&gt;()</title>
<indexterm><primary>operator-&gt;</primary><secondary>Util::FlexPtr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::FlexPtr&lt; T &gt;</primary><secondary>operator-&gt;</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T* <link linkend="_classUtil_1_1FlexPtr">Util::FlexPtr</link>&lt; T &gt;::operator-&gt; ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Member access. </para>
</para>
<para>
Definition at line 114 of file FlexPtr.h.</para>
    </section><anchor xml:id="_classUtil_1_1FlexPtr_1a8526bde45545ea6627b97a62e722151d"/>    <section>
    <title>get()</title>
<indexterm><primary>get</primary><secondary>Util::FlexPtr&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::FlexPtr&lt; T &gt;</primary><secondary>get</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T* <link linkend="_classUtil_1_1FlexPtr">Util::FlexPtr</link>&lt; T &gt;::get ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return the built-in pointer. </para>
</para>
<para>
Definition at line 120 of file FlexPtr.h.</para>
<para>
Referenced by Util::isNull().</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
FlexPtr.h</section>
</section>
