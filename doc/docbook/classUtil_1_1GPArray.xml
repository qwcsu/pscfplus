<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1GPArray">
<title>Util::GPArray&lt; Data &gt; Class Template Reference</title>
<indexterm><primary>Util::GPArray&lt; Data &gt;</primary></indexterm>
<para>

<para>An automatically growable <link linkend="_classUtil_1_1PArray">PArray</link>. </para>
 
</para>
<para>
<computeroutput>#include &lt;GPArray.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Util::GPArray&lt; Data &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUtil_1_1GPArray.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1GPArray_1a78c3b75fb8e858e8b480191d274b1880">GPArray</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1GPArray_1a4a4a2cd2e9fe669baf5e968302886559">GPArray</link> (const <link linkend="_classUtil_1_1GPArray">GPArray</link>&lt; Data &gt; &amp;other)</para>

<para>Copy constructor, copy pointers. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1GPArray">GPArray</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1GPArray_1ae37c84401bfce09997d8383e48f8816c">operator=</link> (const <link linkend="_classUtil_1_1GPArray">GPArray</link>&lt; Data &gt; &amp;other)</para>

<para>Assignment, element by element. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1GPArray_1ad4dd8279ee5bf474b0981455bdbfd44c">~GPArray</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1GPArray_1a82468511e8006c0a9ba15fa3d316bb78">append</link> (Data &amp;data)</para>

<para>Append an element to the end of the sequence. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1GPArray_1a2956d2234996ef7a52465fbb189efa47">reserve</link> (int <link linkend="_classUtil_1_1PArray_1a44168c67b49d4fa54f298097065f7796">capacity</link>)</para>

<para>Reserve memory for specified number of elements. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1GPArray_1af55b8a1fdbedb2fe6a432dc0f47ffb5c">deallocate</link> ()</para>

<para>Deallocate (delete) underlying array of pointers. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1GPArray_1a5be49fa80b6f7afd0d5ad62e51566b3c">clear</link> ()</para>

<para>Reset to empty state. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1GPArray_1a5c4b9df9e9c3a86c8fa1afe943b6822b">isAllocated</link> () const</para>

<para>Is this <link linkend="_classUtil_1_1GPArray">GPArray</link> allocated? </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data&gt;
class Util::GPArray&lt; Data &gt;</title></simplesect>


<para>An automatically growable <link linkend="_classUtil_1_1PArray">PArray</link>. </para>



<para>An <link linkend="_classUtil_1_1GPArray">GPArray</link> is a <link linkend="_classUtil_1_1PArray">PArray</link> that grows as needed as objects are appended. Like any <link linkend="_classUtil_1_1PArray">PArray</link>, it holds pointers to objects, rather than objects. The associated objects are not destroyed when a <link linkend="_classUtil_1_1PArray">PArray</link> is deallocated or destroyed. </para>
<para>
Definition at line 28 of file GPArray.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1GPArray_1a78c3b75fb8e858e8b480191d274b1880"/>    <section>
    <title>GPArray()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>GPArray</primary><secondary>Util::GPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GPArray&lt; Data &gt;</primary><secondary>GPArray</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1GPArray">Util::GPArray</link>&lt; Data &gt;::<link linkend="_classUtil_1_1GPArray">GPArray</link><computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 113 of file GPArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1GPArray_1a4a4a2cd2e9fe669baf5e968302886559"/>    <section>
    <title>GPArray()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>GPArray</primary><secondary>Util::GPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GPArray&lt; Data &gt;</primary><secondary>GPArray</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1GPArray">Util::GPArray</link>&lt; Data &gt;::<link linkend="_classUtil_1_1GPArray">GPArray</link> (const <link linkend="_classUtil_1_1GPArray">GPArray</link>&lt; Data &gt; &amp; other)</computeroutput></para><para>

<para>Copy constructor, copy pointers. </para>
</para>

<para>Allocates new Data* array and copies pointers to Data objects.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the <link linkend="_classUtil_1_1GPArray">GPArray</link> to be copied.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Allocates a new Data* array and copies all pointer values.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the <link linkend="_classUtil_1_1GPArray">GPArray</link> to be copied. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 125 of file GPArray.h.</para>
<para>
References Util::PArray&lt; Data &gt;::capacity_, Util::PArray&lt; Data &gt;::ptrs_, and Util::PArray&lt; Data &gt;::size_.</para>
    </section><anchor xml:id="_classUtil_1_1GPArray_1ad4dd8279ee5bf474b0981455bdbfd44c"/>    <section>
    <title>~GPArray()</title>
<indexterm><primary>~GPArray</primary><secondary>Util::GPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GPArray&lt; Data &gt;</primary><secondary>~GPArray</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1GPArray">Util::GPArray</link>&lt; Data &gt;::~<link linkend="_classUtil_1_1GPArray">GPArray</link><computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>

<para>Deletes array of pointers, if allocated previously. Does not delete the associated Data objects. </para>
<para>
Definition at line 176 of file GPArray.h.</para>
<para>
References Util::Memory::deallocate().</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1GPArray_1ae37c84401bfce09997d8383e48f8816c"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Util::GPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GPArray&lt; Data &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1GPArray">GPArray</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1GPArray">Util::GPArray</link>&lt; Data &gt;::operator= (const <link linkend="_classUtil_1_1GPArray">GPArray</link>&lt; Data &gt; &amp; other)</computeroutput></para><para>

<para>Assignment, element by element. </para>
</para>

<para>Preconditions:<itemizedlist>
<listitem>
<para>Both this and other GPArrays must be allocated.</para>
</listitem><listitem>
<para>Capacity of this <link linkend="_classUtil_1_1GPArray">GPArray</link> must be &gt;= size of RHS <link linkend="_classUtil_1_1GPArray">GPArray</link>.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the rhs <link linkend="_classUtil_1_1GPArray">GPArray</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 160 of file GPArray.h.</para>
<para>
References Util::PArray&lt; Data &gt;::size_.</para>
    </section><anchor xml:id="_classUtil_1_1GPArray_1a82468511e8006c0a9ba15fa3d316bb78"/>    <section>
    <title>append()</title>
<indexterm><primary>append</primary><secondary>Util::GPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GPArray&lt; Data &gt;</primary><secondary>append</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1GPArray">Util::GPArray</link>&lt; Data &gt;::append (Data &amp; data)</computeroutput></para><para>

<para>Append an element to the end of the sequence. </para>
</para>

<para>Resizes array if space is inadequate.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>Data object to be appended </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 235 of file GPArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1GPArray_1a2956d2234996ef7a52465fbb189efa47"/>    <section>
    <title>reserve()</title>
<indexterm><primary>reserve</primary><secondary>Util::GPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GPArray&lt; Data &gt;</primary><secondary>reserve</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1GPArray">Util::GPArray</link>&lt; Data &gt;::reserve (int capacity)</computeroutput></para><para>

<para>Reserve memory for specified number of elements. </para>
</para>

<para>Resizes and copies array if requested capacity is less than the current capacity. Does nothing if requested capacity is greater than current capacity.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>capacity</entry>
                                <entry>
<para>number of elements for which to reserve space. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 189 of file GPArray.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1GPArray_1af55b8a1fdbedb2fe6a432dc0f47ffb5c"/>    <section>
    <title>deallocate()</title>
<indexterm><primary>deallocate</primary><secondary>Util::GPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GPArray&lt; Data &gt;</primary><secondary>deallocate</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1GPArray">Util::GPArray</link>&lt; Data &gt;::deallocate</computeroutput></para><para>

<para>Deallocate (delete) underlying array of pointers. </para>
</para>
<para>
Definition at line 221 of file GPArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1GPArray_1a5be49fa80b6f7afd0d5ad62e51566b3c"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::GPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GPArray&lt; Data &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1GPArray">Util::GPArray</link>&lt; Data &gt;::clear<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Reset to empty state. </para>
</para>
<para>
Definition at line 268 of file GPArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1GPArray_1a5c4b9df9e9c3a86c8fa1afe943b6822b"/>    <section>
    <title>isAllocated()</title>
<indexterm><primary>isAllocated</primary><secondary>Util::GPArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GPArray&lt; Data &gt;</primary><secondary>isAllocated</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1GPArray">Util::GPArray</link>&lt; Data &gt;::isAllocated<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this <link linkend="_classUtil_1_1GPArray">GPArray</link> allocated? </para>
</para>
<para>
Definition at line 275 of file GPArray.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
GPArray.h</section>
</section>
