<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1GStack">
<title>Util::GStack&lt; Data &gt; Class Template Reference</title>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary></indexterm>
<para>

<para>An automatically growable Stack. </para>
 
</para>
<para>
<computeroutput>#include &lt;GStack.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1GStack_1a6dba553f3baccf58c8c8f9c499cb142e">GStack</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1GStack_1a223a6795421314778cdc5616af2e5fe9">GStack</link> (const <link linkend="_classUtil_1_1GStack">GStack</link>&lt; Data &gt; &amp;other)</para>

<para>Copy constructor, copy pointers. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1GStack_1ad97bb5ac175c3e63862265215ce3c5b5">~GStack</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1GStack">GStack</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1GStack_1a7b63e3fcf3be5d018ff7240475272e12">operator=</link> (const <link linkend="_classUtil_1_1GStack">GStack</link>&lt; Data &gt; &amp;other)</para>

<para>Assignment, element by element. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1GStack_1a9f6e56ecfc37195022d1c5abb6d4a665">reserve</link> (int <link linkend="_classUtil_1_1GStack_1a4467f79c1031a328f774bb776e298b7a">capacity</link>)</para>

<para>Reserve memory for specified number of elements. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1GStack_1a3fd4c312af05c3fb5434caed352e8162">deallocate</link> ()</para>

<para>Deallocate (delete) underlying array of pointers. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1GStack_1a7fdc8c79f8637888952cc366dc6c2a44">clear</link> ()</para>

<para>Reset to empty state. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1GStack_1aaab966336a78f67688c953c517c844cc">push</link> (Data &amp;data)</para>

<para>Push an element onto the stack. </para>
</listitem>
            <listitem><para>Data &amp; <link linkend="_classUtil_1_1GStack_1ae5d3ded1e384f48c03428222bf4302d3">pop</link> ()</para>

<para>Pop an element off the stack. </para>
</listitem>
            <listitem><para>Data &amp; <link linkend="_classUtil_1_1GStack_1a2574a12d2682bafb469d9d7ee1996af9">peek</link> ()</para>

<para>Return a reference to the top element (don&apos;t pop). </para>
</listitem>
            <listitem><para>const Data &amp; <link linkend="_classUtil_1_1GStack_1a431ee435195591a99c058cd451b27f3e">peek</link> () const</para>

<para>Return a const ref to the top element (don&apos;t pop). </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1GStack_1a4467f79c1031a328f774bb776e298b7a">capacity</link> () const</para>

<para>Return allocated size. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1GStack_1a359308d446ebb4e452940a56785e05e9">size</link> () const</para>

<para>Return logical size. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1GStack_1a1ed7fff52cb9306ae6529141f619f50b">isAllocated</link> () const</para>

<para>Is this <link linkend="_classUtil_1_1GStack">GStack</link> allocated? </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1GStack_1a7636ba4fb5e4e09567ba93e72ffe3a69">isValid</link> () const</para>

<para>Is this <link linkend="_classUtil_1_1GStack">GStack</link> in a valid internal state? </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data&gt;
class Util::GStack&lt; Data &gt;</title></simplesect>


<para>An automatically growable Stack. </para>



<para>A <link linkend="_classUtil_1_1GStack">GStack</link> is stack that is implemented as a growable pointer array. Like any pointer array it holds pointers to objects, rather than objects, and associated objects are not destroyed when the container is deallocated or destroyed. </para>
<para>
Definition at line 28 of file GStack.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1GStack_1a6dba553f3baccf58c8c8f9c499cb142e"/>    <section>
    <title>GStack()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>GStack</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>GStack</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::<link linkend="_classUtil_1_1GStack">GStack</link><computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 157 of file GStack.h.</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1a223a6795421314778cdc5616af2e5fe9"/>    <section>
    <title>GStack()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>GStack</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>GStack</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::<link linkend="_classUtil_1_1GStack">GStack</link> (const <link linkend="_classUtil_1_1GStack">GStack</link>&lt; Data &gt; &amp; other)</computeroutput></para><para>

<para>Copy constructor, copy pointers. </para>
</para>

<para>Allocates new Data* array and copies pointers to Data objects.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the <link linkend="_classUtil_1_1GStack">GStack</link> to be copied.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Allocates a new Data* array and copies all pointer values.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the <link linkend="_classUtil_1_1GStack">GStack</link> to be copied. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 171 of file GStack.h.</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1ad97bb5ac175c3e63862265215ce3c5b5"/>    <section>
    <title>~GStack()</title>
<indexterm><primary>~GStack</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>~GStack</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::~<link linkend="_classUtil_1_1GStack">GStack</link></computeroutput></para><para>

<para>Destructor. </para>
</para>

<para>Deletes array of pointers, if allocated previously. Does not delete the associated Data objects. </para>
<para>
Definition at line 208 of file GStack.h.</para>
<para>
References Util::Memory::deallocate().</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1GStack_1a7b63e3fcf3be5d018ff7240475272e12"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1GStack">GStack</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::operator= (const <link linkend="_classUtil_1_1GStack">GStack</link>&lt; Data &gt; &amp; other)</computeroutput></para><para>

<para>Assignment, element by element. </para>
</para>

<para>Preconditions:<itemizedlist>
<listitem>
<para>Both this and other GStacks must be allocated.</para>
</listitem><listitem>
<para>Capacity of this <link linkend="_classUtil_1_1GStack">GStack</link> must be &gt;= size of RHS <link linkend="_classUtil_1_1GStack">GStack</link>.</para>
</listitem></itemizedlist>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the rhs <link linkend="_classUtil_1_1GStack">GStack</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 221 of file GStack.h.</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1a9f6e56ecfc37195022d1c5abb6d4a665"/>    <section>
    <title>reserve()</title>
<indexterm><primary>reserve</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>reserve</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::reserve (int capacity)</computeroutput></para><para>

<para>Reserve memory for specified number of elements. </para>
</para>

<para>Resizes and copies array if requested capacity is less than the current capacity. Does nothing if requested capacity is greater than current capacity.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>capacity</entry>
                                <entry>
<para>number of elements for which to reserve space. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 237 of file GStack.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1a3fd4c312af05c3fb5434caed352e8162"/>    <section>
    <title>deallocate()</title>
<indexterm><primary>deallocate</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>deallocate</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::deallocate</computeroutput></para><para>

<para>Deallocate (delete) underlying array of pointers. </para>
</para>
<para>
Definition at line 277 of file GStack.h.</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1a7fdc8c79f8637888952cc366dc6c2a44"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::clear<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Reset to empty state. </para>
</para>
<para>
Definition at line 291 of file GStack.h.</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1aaab966336a78f67688c953c517c844cc"/>    <section>
    <title>push()</title>
<indexterm><primary>push</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>push</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::push (Data &amp; data)</computeroutput></para><para>

<para>Push an element onto the stack. </para>
</para>

<para>Resizes array if space is inadequate.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>element to be added to stack. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 298 of file GStack.h.</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1ae5d3ded1e384f48c03428222bf4302d3"/>    <section>
    <title>pop()</title>
<indexterm><primary>pop</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>pop</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>Data &amp; <link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::pop</computeroutput></para><para>

<para>Pop an element off the stack. </para>
</para>

<para>Returns the top element by reference and removes it, decrementing the size by one.</para>

<para><formalpara><title>Returns</title>

<para>the top element (which is popped off stack). </para>
</formalpara>
</para>
<para>
Definition at line 340 of file GStack.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1a2574a12d2682bafb469d9d7ee1996af9"/>    <section>
    <title>peek()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>peek</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>peek</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>const Data &amp; <link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::peek<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return a reference to the top element (don&apos;t pop). </para>
</para>
<para>
Definition at line 355 of file GStack.h.</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1a431ee435195591a99c058cd451b27f3e"/>    <section>
    <title>peek()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>peek</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>peek</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>const Data&amp; <link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::peek ( ) const</computeroutput></para><para>

<para>Return a const ref to the top element (don&apos;t pop). </para>
</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1a4467f79c1031a328f774bb776e298b7a"/>    <section>
    <title>capacity()</title>
<indexterm><primary>capacity</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>capacity</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::capacity<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return allocated size. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Number of elements allocated in array. </para>
</formalpara>
</para>
<para>
Definition at line 369 of file GStack.h.</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1a359308d446ebb4e452940a56785e05e9"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::size<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return logical size. </para>
</para>

<para><formalpara><title>Returns</title>

<para>logical size of this array. </para>
</formalpara>
</para>
<para>
Definition at line 376 of file GStack.h.</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1a1ed7fff52cb9306ae6529141f619f50b"/>    <section>
    <title>isAllocated()</title>
<indexterm><primary>isAllocated</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>isAllocated</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::isAllocated<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this <link linkend="_classUtil_1_1GStack">GStack</link> allocated? </para>
</para>
<para>
Definition at line 383 of file GStack.h.</para>
    </section><anchor xml:id="_classUtil_1_1GStack_1a7636ba4fb5e4e09567ba93e72ffe3a69"/>    <section>
    <title>isValid()</title>
<indexterm><primary>isValid</primary><secondary>Util::GStack&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::GStack&lt; Data &gt;</primary><secondary>isValid</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1GStack">Util::GStack</link>&lt; Data &gt;::isValid</computeroutput></para><para>

<para>Is this <link linkend="_classUtil_1_1GStack">GStack</link> in a valid internal state? </para>
</para>
<para>
Definition at line 390 of file GStack.h.</para>
<para>
References UTIL_THROW.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
GStack.h</section>
</section>
