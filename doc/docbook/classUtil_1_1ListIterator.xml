<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1ListIterator">
<title>Util::ListIterator&lt; Data &gt; Class Template Reference</title>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary></indexterm>
<para>

<para>Bidirectional iterator for a <link linkend="_classUtil_1_1List">List</link>. </para>
 
</para>
<para>
<computeroutput>#include &lt;ListIterator.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1ListIterator_1a44f8ef660b74eae26002f1b056d992e2">ListIterator</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1ListIterator_1a06ddffe30c132da25dbab32fea4e2d4f">ListIterator</link> (const <link linkend="_classUtil_1_1List">List</link>&lt; Data &gt; &amp;list)</para>

<para>Constructor for initialized iterator. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1ListIterator_1a8afe69f441472010f8902e00cc343329">setCurrent</link> (<link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; *nodePtr)</para>

<para>Point the iterator at a <link linkend="_classUtil_1_1Node">Node</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1ListIterator_1ae34360ffdd3a750ac3eb735dc5eeeeec">isEnd</link> () const</para>

<para>Has the end of the list been reached? </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1ListIterator_1a4ede60f7ab2bf6c9b71578b571231fad">isBack</link> () const</para>

<para>Is this the back of the <link linkend="_classUtil_1_1List">List</link>? </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1ListIterator_1acc4dc12c2792f8418d4d5574c6184464">isFront</link> () const</para>

<para>Is this the front of the <link linkend="_classUtil_1_1List">List</link>? </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Operators    </title>
        <itemizedlist>
            <listitem><para>const Data &amp; <link linkend="_classUtil_1_1ListIterator_1a890810228dfdfcdc865cbcba3e9e020c">operator*</link> () const</para>

<para>Get a const reference to the associated Data object. </para>
</listitem>
            <listitem><para>Data &amp; <link linkend="_classUtil_1_1ListIterator_1a3dacfc6b8b0cf8905a8eb0dcc77e0556">operator*</link> ()</para>

<para>Get the associated Data object. </para>
</listitem>
            <listitem><para>const Data * <link linkend="_classUtil_1_1ListIterator_1ababbdd4af6ad822e037871323cc082c4">operator-&gt;</link> () const</para>

<para>Get a pointer to const to the associated Data object. </para>
</listitem>
            <listitem><para>Data * <link linkend="_classUtil_1_1ListIterator_1aa92fb7f6712e245ba84469237e9d1e6a">operator-&gt;</link> ()</para>

<para>Get a pointer to the associated Data object. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1ListIterator">ListIterator</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1ListIterator_1ae9f8d780c7933da8e18da8fcca0cbad5">operator++</link> ()</para>

<para>Go to the next element in a linked list. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1ListIterator">ListIterator</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1ListIterator_1a14834cb181ab8af96f4160027cf2748e">operator--</link> ()</para>

<para>Go to the previous element in a linked list. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data&gt;
class Util::ListIterator&lt; Data &gt;</title></simplesect>


<para>Bidirectional iterator for a <link linkend="_classUtil_1_1List">List</link>. </para>



<para>A <link linkend="_classUtil_1_1ListIterator">ListIterator</link> provides bidirectional input/output access to a linked list, similar to an STL bidirectional iterator. An * operator returns a reference to an associated Data object. The ++ and &#8211; operators change the current pointer to the next or prev element in a list.</para>

<para>The <link linkend="_classUtil_1_1ListIterator_1ae34360ffdd3a750ac3eb735dc5eeeeec">isEnd()</link> method returns true if either end of the list has already been passed by a previous ++ or &#8211; operation. When <link linkend="_classUtil_1_1ListIterator_1ae34360ffdd3a750ac3eb735dc5eeeeec">isEnd()</link> is true, the iterator is no longer usable, since it no longer points to a <link linkend="_classUtil_1_1Node">Node</link> and cannot be incremented or decremented. </para>
<para>
Definition at line 20 of file List.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1ListIterator_1a44f8ef660b74eae26002f1b056d992e2"/>    <section>
    <title>ListIterator()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ListIterator</primary><secondary>Util::ListIterator&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary><secondary>ListIterator</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1ListIterator">Util::ListIterator</link>&lt; Data &gt;::<link linkend="_classUtil_1_1ListIterator">ListIterator</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>

<para>Creates a &quot;dead&quot; iterator, for which <link linkend="_classUtil_1_1ListIterator_1ae34360ffdd3a750ac3eb735dc5eeeeec">isEnd()</link>==true. Before it can be used, such an iterator must be initialized by either the <link linkend="_classUtil_1_1ListIterator_1a8afe69f441472010f8902e00cc343329">ListIterator&lt;Data&gt;::setCurrent()</link> method or the <link linkend="_classUtil_1_1List_1a0df1b660e6417421aa3c489e18defb12">List&lt;Data&gt;::begin()</link> method of an associated <link linkend="_classUtil_1_1List">List</link>. </para>
<para>
Definition at line 40 of file ListIterator.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListIterator_1a06ddffe30c132da25dbab32fea4e2d4f"/>    <section>
    <title>ListIterator()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ListIterator</primary><secondary>Util::ListIterator&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary><secondary>ListIterator</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1ListIterator">Util::ListIterator</link>&lt; Data &gt;::<link linkend="_classUtil_1_1ListIterator">ListIterator</link> (const <link linkend="_classUtil_1_1List">List</link>&lt; Data &gt; &amp; list)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor for initialized iterator. </para>
</para>

<para>Creates an iterator that points to the front of a <link linkend="_classUtil_1_1List">List</link>. Calls List&lt;Data&gt;::begin(*this) internally.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>list</entry>
                                <entry>
<para>parent <link linkend="_classUtil_1_1List">List</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 52 of file ListIterator.h.</para>
<para>
References Util::List&lt; Data &gt;::begin().</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1ListIterator_1a8afe69f441472010f8902e00cc343329"/>    <section>
    <title>setCurrent()</title>
<indexterm><primary>setCurrent</primary><secondary>Util::ListIterator&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary><secondary>setCurrent</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ListIterator">Util::ListIterator</link>&lt; Data &gt;::setCurrent (<link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; * nodePtr)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Point the iterator at a <link linkend="_classUtil_1_1Node">Node</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>nodePtr</entry>
                                <entry>
<para>pointer to current <link linkend="_classUtil_1_1Node">Node</link> in a <link linkend="_classUtil_1_1List">List</link>, or null. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 61 of file ListIterator.h.</para>
<para>
Referenced by Util::List&lt; Data &gt;::begin().</para>
    </section><anchor xml:id="_classUtil_1_1ListIterator_1ae34360ffdd3a750ac3eb735dc5eeeeec"/>    <section>
    <title>isEnd()</title>
<indexterm><primary>isEnd</primary><secondary>Util::ListIterator&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary><secondary>isEnd</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1ListIterator">Util::ListIterator</link>&lt; Data &gt;::isEnd ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Has the end of the list been reached? </para>
</para>

<para>Return true if the current pointer is null, indicating that the previous increment or decrement passed an end of the list.</para>

<para><formalpara><title>Returns</title>

<para>true if current node is null, false otherwise. </para>
</formalpara>
</para>
<para>
Definition at line 72 of file ListIterator.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListIterator_1a4ede60f7ab2bf6c9b71578b571231fad"/>    <section>
    <title>isBack()</title>
<indexterm><primary>isBack</primary><secondary>Util::ListIterator&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary><secondary>isBack</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1ListIterator">Util::ListIterator</link>&lt; Data &gt;::isBack ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this the back of the <link linkend="_classUtil_1_1List">List</link>? </para>
</para>

<para><formalpara><title>Returns</title>

<para>true if current node is the back <link linkend="_classUtil_1_1Node">Node</link>, false otherwise. </para>
</formalpara>
</para>
<para>
Definition at line 80 of file ListIterator.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListIterator_1acc4dc12c2792f8418d4d5574c6184464"/>    <section>
    <title>isFront()</title>
<indexterm><primary>isFront</primary><secondary>Util::ListIterator&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary><secondary>isFront</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1ListIterator">Util::ListIterator</link>&lt; Data &gt;::isFront ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this the front of the <link linkend="_classUtil_1_1List">List</link>? </para>
</para>

<para><formalpara><title>Returns</title>

<para>true if current node is the front <link linkend="_classUtil_1_1Node">Node</link>, false otherwise. </para>
</formalpara>
</para>
<para>
Definition at line 88 of file ListIterator.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListIterator_1a890810228dfdfcdc865cbcba3e9e020c"/>    <section>
    <title>operator*()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Util::ListIterator&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>const Data&amp; <link linkend="_classUtil_1_1ListIterator">Util::ListIterator</link>&lt; Data &gt;::operator* ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get a const reference to the associated Data object. </para>
</para>

<para><formalpara><title>Returns</title>

<para>const reference to the associated Data object </para>
</formalpara>
</para>
<para>
Definition at line 99 of file ListIterator.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListIterator_1a3dacfc6b8b0cf8905a8eb0dcc77e0556"/>    <section>
    <title>operator*()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Util::ListIterator&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>Data&amp; <link linkend="_classUtil_1_1ListIterator">Util::ListIterator</link>&lt; Data &gt;::operator* ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the associated Data object. </para>
</para>

<para><formalpara><title>Returns</title>

<para>reference to associated Data object </para>
</formalpara>
</para>
<para>
Definition at line 107 of file ListIterator.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListIterator_1ababbdd4af6ad822e037871323cc082c4"/>    <section>
    <title>operator-&gt;()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-&gt;</primary><secondary>Util::ListIterator&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary><secondary>operator-&gt;</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>const Data* <link linkend="_classUtil_1_1ListIterator">Util::ListIterator</link>&lt; Data &gt;::operator-&gt; ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get a pointer to const to the associated Data object. </para>
</para>

<para><formalpara><title>Returns</title>

<para>pointer to associated Data object </para>
</formalpara>
</para>
<para>
Definition at line 115 of file ListIterator.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListIterator_1aa92fb7f6712e245ba84469237e9d1e6a"/>    <section>
    <title>operator-&gt;()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-&gt;</primary><secondary>Util::ListIterator&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary><secondary>operator-&gt;</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>Data* <link linkend="_classUtil_1_1ListIterator">Util::ListIterator</link>&lt; Data &gt;::operator-&gt; ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get a pointer to the associated Data object. </para>
</para>

<para><formalpara><title>Returns</title>

<para>pointer to associated Data object </para>
</formalpara>
</para>
<para>
Definition at line 123 of file ListIterator.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListIterator_1ae9f8d780c7933da8e18da8fcca0cbad5"/>    <section>
    <title>operator++()</title>
<indexterm><primary>operator++</primary><secondary>Util::ListIterator&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1ListIterator">ListIterator</link>&lt;Data&gt;&amp; <link linkend="_classUtil_1_1ListIterator">Util::ListIterator</link>&lt; Data &gt;::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Go to the next element in a linked list. </para>
</para>

<para>This method assigns the current pointer to the address of the next <link linkend="_classUtil_1_1Node">Node</link> in the list, and then returns *this. If there is no next <link linkend="_classUtil_1_1Node">Node</link>, the current pointer is set null, and any subsequent call to <link linkend="_classUtil_1_1ListIterator_1ae34360ffdd3a750ac3eb735dc5eeeeec">isEnd()</link> will return true.</para>

<para><formalpara><title>Returns</title>

<para>this <link linkend="_classUtil_1_1ListIterator">ListIterator</link>, after modification. </para>
</formalpara>
</para>
<para>
Definition at line 136 of file ListIterator.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListIterator_1a14834cb181ab8af96f4160027cf2748e"/>    <section>
    <title>operator--()</title>
<indexterm><primary>operator--</primary><secondary>Util::ListIterator&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListIterator&lt; Data &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1ListIterator">ListIterator</link>&lt;Data&gt;&amp; <link linkend="_classUtil_1_1ListIterator">Util::ListIterator</link>&lt; Data &gt;::operator-- ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Go to the previous element in a linked list. </para>
</para>

<para>This method assigns the current <link linkend="_classUtil_1_1Node">Node</link> to the previous in the <link linkend="_classUtil_1_1List">List</link>, and returns a reference to *this.</para>

<para><formalpara><title>Returns</title>

<para>this <link linkend="_classUtil_1_1ListIterator">ListIterator</link> </para>
</formalpara>
</para>
<para>
Definition at line 150 of file ListIterator.h.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
List.hListIterator.h</section>
</section>
