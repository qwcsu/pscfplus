<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1Manager">
<title>Util::Manager&lt; Data &gt; Class Template Reference</title>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary></indexterm>
<para>

<para>Template container for pointers to objects with a common base class. </para>
 
</para>
<para>
<computeroutput>#include &lt;Manager.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Util::Manager&lt; Data &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUtil_1_1Manager.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Manager_1af247bb22b6c9c624ee7acf19186d7f3a">Manager</link> (bool uniqueNames=false)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1Manager_1a3cea09e1ebc29426b743cac062ceeb51">~Manager</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Manager_1aa4b5ed1282aad551951fa086ec125aab">addSubfactory</link> (<link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; &amp;subfactory)</para>

<para>Set a SubFactory for this <link linkend="_classUtil_1_1Manager">Manager</link>. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Manager_1a102f5b21e2f7788ade3e4743758f9827">setFactory</link> (<link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; &amp;<link linkend="_classUtil_1_1Manager_1a12f3d8f6c5747ac6e267cf3bf4dea4cf">factory</link>)</para>

<para>Associate a <link linkend="_classUtil_1_1Factory">Factory</link> with this <link linkend="_classUtil_1_1Manager">Manager</link>. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Manager_1a068e403529f63b0d333b53c5a7ff41d8">setFactory</link> (<link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; *factoryPtr)</para>

<para>Associated a <link linkend="_classUtil_1_1Factory">Factory</link> with this <link linkend="_classUtil_1_1Manager">Manager</link> (pass by pointer). </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Manager_1a115f9d62a9e538f20660683eb0eb3a10">readParam</link> (std::istream &amp;in)</para>

<para>Read and create a set of objects. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Manager_1a901abf6562a55d743ee848a959e32b43">readParamOptional</link> (std::istream &amp;in)</para>

<para>Optionally read and create a set of objects. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Manager_1a5b2ac54cc08ef23b910cef70be60d6d3">readParameters</link> (std::istream &amp;in)</para>

<para>Read child blocks, return when closing bracket encountered. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Manager_1a5c6bbf9162def94ca3cbffb11d29596c">loadParameters</link> (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp;ar)</para>

<para>Load a set of objects to an output archive. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Manager_1a676a1b986d066d8cd6a303f369d7403f">save</link> (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp;ar)</para>

<para>Save a set of objects to an output archive. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Manager_1ab9674d8bcbbb96c13424624f6c0c09c6">append</link> (Data &amp;data, const std::string &amp;name)</para>

<para>Append a Data object to the end of the sequence. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1Manager_1ab25a6a0fb7d40c87496501d0ce3dea4b">size</link> () const</para>

<para>Get logical size. </para>
</listitem>
            <listitem><para>std::string <link linkend="_classUtil_1_1Manager_1ae06e7f058969fe77615e19ee21aae45a">className</link> (int i) const</para>

<para>Get the subclass name for object number i. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1Manager_1a12f3d8f6c5747ac6e267cf3bf4dea4cf">factory</link> ()</para>

<para>Return a reference to the factory. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Manager_1a501a97ce22f9af86e20982f5b05468ee">hasFactory</link> () const</para>

<para>Return true if this <link linkend="_classUtil_1_1Manager">Manager</link> has a <link linkend="_classUtil_1_1Factory">Factory</link>, false otherwise. </para>
</listitem>
            <listitem><para>Data &amp; <link linkend="_classUtil_1_1Manager_1aa24d3c436006dc0a3ac81a1d9dc1e2ec">operator[]</link> (int i) const</para>

<para>Mimic C array subscripting. </para>
</listitem>
            <listitem><para>Data * <link linkend="_classUtil_1_1Manager_1a21b2dfaa9ef292a1964f0f15da20e4eb">findFirst</link> (std::string const &amp;<link linkend="_classUtil_1_1Manager_1ae06e7f058969fe77615e19ee21aae45a">className</link>)</para>

<para>Return pointer to first object with specified class name. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_classUtil_1_1Manager_1a7ea36d5a4b0c75f6572e020eadc11a00">beginReadManager</link> (std::istream &amp;in)</para>

<para>Read (or attempt to read) opening line: &quot;ManagerName{&quot;. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Manager_1ac52e96076d3059229e6828838a946083">endReadManager</link> ()</para>

<para>Add closing bracket to output format. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Manager_1a2061554cbc37ccf90946baba0ddb7d4f">initFactory</link> ()</para>

<para>Create factory if necessary. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; * <link linkend="_classUtil_1_1Manager_1a29d0aed9b79da902674104a541efa684">newDefaultFactory</link> () const</para>

<para>Create an instance of the default Factory&lt;Data&gt; class. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; * <link linkend="_classUtil_1_1Manager_1a01081756b34092fe5d327c90d2617601">factoryPtr_</link></para>

<para>Pointer to an associated Factory&lt;Data&gt; object. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data&gt;
class Util::Manager&lt; Data &gt;</title></simplesect>


<para>Template container for pointers to objects with a common base class. </para>



<para>A Manager&lt;Data&gt; has an array of Data* pointers to Data objects, an array of corresponding subclass names, and a pointer to a Factory&lt;Data&gt; object. The default implementation of the <link linkend="_classUtil_1_1Manager_1a115f9d62a9e538f20660683eb0eb3a10">Manager&lt;Data&gt;::readParam()</link> method uses an associated Factory&lt;Data&gt; object to recognize the class name string that begins a polymorphic block in a parameter file (which must refer to a known subclass of Data) and to instantiate an object of the specified subclass.</para>

<para>Subclasses of Manager&lt;Data&gt; are used to manage arrays of Species, McMove, and Analyzer objects. </para>
<para>
Definition at line 38 of file Manager.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1Manager_1af247bb22b6c9c624ee7acf19186d7f3a"/>    <section>
    <title>Manager()</title>
<indexterm><primary>Manager</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>Manager</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::<link linkend="_classUtil_1_1Manager">Manager</link> (bool uniqueNames = <computeroutput>false</computeroutput>
)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>uniqueNames</entry>
                                <entry>
<para>set true to require unique element class names. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 232 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a3cea09e1ebc29426b743cac062ceeb51"/>    <section>
    <title>~Manager()</title>
<indexterm><primary>~Manager</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>~Manager</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::~<link linkend="_classUtil_1_1Manager">Manager</link><computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 246 of file Manager.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1Manager_1aa4b5ed1282aad551951fa086ec125aab"/>    <section>
    <title>addSubfactory()</title>
<indexterm><primary>addSubfactory</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>addSubfactory</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::addSubfactory (<link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; &amp; subfactory)</computeroutput></para><para>

<para>Set a SubFactory for this <link linkend="_classUtil_1_1Manager">Manager</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>subfactory</entry>
                                <entry>
<para>Referernce to a sub-Factory to be added. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 275 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a102f5b21e2f7788ade3e4743758f9827"/>    <section>
    <title>setFactory()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>setFactory</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>setFactory</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::setFactory (<link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; &amp; factory)</computeroutput></para><para>

<para>Associate a <link linkend="_classUtil_1_1Factory">Factory</link> with this <link linkend="_classUtil_1_1Manager">Manager</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>factory</entry>
                                <entry>
<para>Reference to a <link linkend="_classUtil_1_1Factory">Factory</link> object </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 284 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a068e403529f63b0d333b53c5a7ff41d8"/>    <section>
    <title>setFactory()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>setFactory</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>setFactory</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::setFactory (<link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; * factoryPtr)</computeroutput></para><para>

<para>Associated a <link linkend="_classUtil_1_1Factory">Factory</link> with this <link linkend="_classUtil_1_1Manager">Manager</link> (pass by pointer). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>factoryPtr</entry>
                                <entry>
<para>pointer to a Factory&lt;Data&gt; object. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 297 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a115f9d62a9e538f20660683eb0eb3a10"/>    <section>
    <title>readParam()</title>
<indexterm><primary>readParam</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>readParam</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::readParam (std::istream &amp; in)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Read and create a set of objects. </para>
</para>

<para>The default implementation of this method reads a sequence of blocks for different subclasses of Data, terminated by a closing bracket. For each block it:</para>

<para><itemizedlist>
<listitem>
<para>reads a className string for a subclass of Data,</para>
</listitem><listitem>
<para>uses factory object to create a new instance of className.</para>
</listitem><listitem>
<para>invokes the <link linkend="_classUtil_1_1Manager_1a115f9d62a9e538f20660683eb0eb3a10">readParam()</link> method of the new object.</para>
</listitem></itemizedlist>
</para>

<para>The implementation of the factory must recognize all valid className string values, and invoke the appropriate constructor for each. The loop over blocks terminates when it encounters a closing bracket &apos;}&apos; surrounded by white space.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1a6fc094b057fd9a21641b089f6f063b39">Util::ParamComposite</link>.</para>
<para>
Definition at line 310 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a901abf6562a55d743ee848a959e32b43"/>    <section>
    <title>readParamOptional()</title>
<indexterm><primary>readParamOptional</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>readParamOptional</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::readParamOptional (std::istream &amp; in)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Optionally read and create a set of objects. </para>
</para>

<para>Equivalent to <link linkend="_classUtil_1_1Manager_1a115f9d62a9e538f20660683eb0eb3a10">readParam()</link>, except that this function does nothing if the first line does not match the expected label, whereas <link linkend="_classUtil_1_1Manager_1a115f9d62a9e538f20660683eb0eb3a10">readParam()</link> throws an <link linkend="_classUtil_1_1Exception">Exception</link></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1aba5de04c5db452000b044e0331ad5182">Util::ParamComposite</link>.</para>
<para>
Definition at line 323 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a5b2ac54cc08ef23b910cef70be60d6d3"/>    <section>
    <title>readParameters()</title>
<indexterm><primary>readParameters</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>readParameters</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::readParameters (std::istream &amp; in)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Read child blocks, return when closing bracket encountered. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1a172a3a656b5829c8d758424ad09a22a6">Util::ParamComposite</link>.</para>
<para>
Definition at line 356 of file Manager.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a5c6bbf9162def94ca3cbffb11d29596c"/>    <section>
    <title>loadParameters()</title>
<indexterm><primary>loadParameters</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>loadParameters</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::loadParameters (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp; ar)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Load a set of objects to an output archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>input/loading archive </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1adec07dcba0895ba69463147314cde7ce">Util::ParamComposite</link>.</para>
<para>
Definition at line 411 of file Manager.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a676a1b986d066d8cd6a303f369d7403f"/>    <section>
    <title>save()</title>
<indexterm><primary>save</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>save</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::save (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp; ar)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Save a set of objects to an output archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>output/saving archive </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1a3c430a4e31a9573eadb06ab89d3bf780">Util::ParamComposite</link>.</para>
<para>
Definition at line 448 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1ab9674d8bcbbb96c13424624f6c0c09c6"/>    <section>
    <title>append()</title>
<indexterm><primary>append</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>append</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::append (Data &amp; data, const std::string &amp; name)</computeroutput></para><para>

<para>Append a Data object to the end of the sequence. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>Data object to be appended </para>
</entry>
                            </row>
                            <row>
                                <entry>name</entry>
                                <entry>
<para>subclass name </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 462 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1ab25a6a0fb7d40c87496501d0ce3dea4b"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::size<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get logical size. </para>
</para>

<para><formalpara><title>Returns</title>

<para>logical size of this array. </para>
</formalpara>
</para>
<para>
Definition at line 494 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1ae06e7f058969fe77615e19ee21aae45a"/>    <section>
    <title>className()</title>
<indexterm><primary>className</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>className</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>std::string <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::className (int i) const</computeroutput></para><para>

<para>Get the subclass name for object number i. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>integer index of object </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>class name of managed object </para>
</formalpara>
</para>
<para>
Definition at line 473 of file Manager.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a12f3d8f6c5747ac6e267cf3bf4dea4cf"/>    <section>
    <title>factory()</title>
<indexterm><primary>factory</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>factory</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::factory</computeroutput></para><para>

<para>Return a reference to the factory. </para>
</para>
<para>
Definition at line 265 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a501a97ce22f9af86e20982f5b05468ee"/>    <section>
    <title>hasFactory()</title>
<indexterm><primary>hasFactory</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>hasFactory</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::hasFactory</computeroutput></para><para>

<para>Return true if this <link linkend="_classUtil_1_1Manager">Manager</link> has a <link linkend="_classUtil_1_1Factory">Factory</link>, false otherwise. </para>
</para>
<para>
Definition at line 485 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1aa24d3c436006dc0a3ac81a1d9dc1e2ec"/>    <section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>Data &amp; <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::operator[] (int i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Mimic C array subscripting. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>array index </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to element i </para>
</formalpara>
</para>
<para>
Definition at line 501 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a21b2dfaa9ef292a1964f0f15da20e4eb"/>    <section>
    <title>findFirst()</title>
<indexterm><primary>findFirst</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>findFirst</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>Data * <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::findFirst (std::string const &amp; className)</computeroutput></para><para>

<para>Return pointer to first object with specified class name. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>className</entry>
                                <entry>
<para>desired class name string </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>pointer to specified objectd, or null if not found. </para>
</formalpara>
</para>
<para>
Definition at line 512 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a7ea36d5a4b0c75f6572e020eadc11a00"/>    <section>
    <title>beginReadManager()</title>
<indexterm><primary>beginReadManager</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>beginReadManager</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::beginReadManager (std::istream &amp; in)<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Read (or attempt to read) opening line: &quot;ManagerName{&quot;. </para>
</para>
<para>
Definition at line 338 of file Manager.h.</para>
<para>
References Util::ParamComposite::className(), and Util::Begin::isActive().</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1ac52e96076d3059229e6828838a946083"/>    <section>
    <title>endReadManager()</title>
<indexterm><primary>endReadManager</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>endReadManager</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::endReadManager<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Add closing bracket to output format. </para>
</para>
<para>
Definition at line 399 of file Manager.h.</para>
<para>
References Util::ParamComponent::echo(), Util::Log::file(), and Util::End::writeParam().</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a2061554cbc37ccf90946baba0ddb7d4f"/>    <section>
    <title>initFactory()</title>
<indexterm><primary>initFactory</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>initFactory</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::initFactory<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Create factory if necessary. </para>
</para>
<para>
Definition at line 528 of file Manager.h.</para>
    </section><anchor xml:id="_classUtil_1_1Manager_1a29d0aed9b79da902674104a541efa684"/>    <section>
    <title>newDefaultFactory()</title>
<indexterm><primary>newDefaultFactory</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>newDefaultFactory</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Factory">Factory</link>&lt; Data &gt; * <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::newDefaultFactory<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Create an instance of the default Factory&lt;Data&gt; class. </para>
</para>

<para><formalpara><title>Returns</title>

<para>a pointer to a new Factory&lt;Data&gt; object. </para>
</formalpara>
</para>
<para>
Definition at line 541 of file Manager.h.</para>
<para>
References UTIL_THROW.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classUtil_1_1Manager_1a01081756b34092fe5d327c90d2617601"/>    <section>
    <title>factoryPtr_</title>
<indexterm><primary>factoryPtr_</primary><secondary>Util::Manager&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Manager&lt; Data &gt;</primary><secondary>factoryPtr_</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Factory">Factory</link>&lt;Data&gt;* <link linkend="_classUtil_1_1Manager">Util::Manager</link>&lt; Data &gt;::factoryPtr_<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Pointer to an associated Factory&lt;Data&gt; object. </para>
</para>
<para>
Definition at line 182 of file Manager.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Manager.h</section>
</section>
