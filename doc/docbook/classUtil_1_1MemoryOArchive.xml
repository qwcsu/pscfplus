<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1MemoryOArchive">
<title>Util::MemoryOArchive Class Reference</title>
<indexterm><primary>Util::MemoryOArchive</primary></indexterm>
<para>

<para>Save archive for packed heterogeneous binary data. </para>
 
</para>
<para>
<computeroutput>#include &lt;MemoryOArchive.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1MemoryOArchive_1ad81684bd33290948af4025e29207eb50">MemoryOArchive</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1MemoryOArchive_1a0641f5b50b3fcb0e5fa6f8745bce6535">~MemoryOArchive</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1MemoryOArchive_1a35a274c65ace40aa7082d4f779667282">allocate</link> (size_t <link linkend="_classUtil_1_1MemoryOArchive_1ab5414ddd1dca8c01c83eefecd123aa48">capacity</link>)</para>

<para>Allocate memory. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1MemoryOArchive_1afe51aa4147bd49fdfe697dabf1b5b520">clear</link> ()</para>

<para>Resets the cursor to the beginning. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_classUtil_1_1MemoryOArchive_1a22d294f7818f1efe7cd3901342dff19b">operator&amp;</link> (T &amp;data)</para>

<para>Save one object. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_classUtil_1_1MemoryOArchive">MemoryOArchive</link> &amp; <link linkend="_classUtil_1_1MemoryOArchive_1a7c9e0350f695b7edad064648cbdc37e2">operator&lt;&lt;</link> (T &amp;data)</para>

<para>Save one object. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_classUtil_1_1MemoryOArchive_1a4b2f7b7758dddcbaf36ce6636cd29dc0">pack</link> (const T &amp;data)</para>

<para>Pack a T object. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_classUtil_1_1MemoryOArchive_1a8d1ee44f33e22fcca93d6d7966ea63ad">pack</link> (const T *array, int n)</para>

<para>Pack a C array. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_classUtil_1_1MemoryOArchive_1a24256917e42eaa1eb4146992a2f59eb8">pack</link> (const T *array, int m, int n, int np)</para>

<para>Pack a 2D C array. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1MemoryOArchive_1adffaaaeb29d85d44becb9d9e56c9877f">send</link> (MPI::Intracomm &amp;comm, int dest)</para>

<para>Send packed data via MPI. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1MemoryOArchive_1a0c73ec0710fb406fd6d7ce7542ac9914">iSend</link> (MPI::Intracomm &amp;comm, MPI::Request &amp;req, int dest)</para>

<para>Send packed data via MPI (non-blocking) </para>
</listitem>
            <listitem><para><link linkend="_namespaceUtil_1aeb6f2071b71e3433dd3cfc1bce6c2e6d">Byte</link> * <link linkend="_classUtil_1_1MemoryOArchive_1ab1bdf087902cb214f28eb1849ae8614a">begin</link> () const</para>

<para>Return pointer to beginning of block. </para>
</listitem>
            <listitem><para><link linkend="_namespaceUtil_1aeb6f2071b71e3433dd3cfc1bce6c2e6d">Byte</link> * <link linkend="_classUtil_1_1MemoryOArchive_1a60fdf485b66b8e766179b727dfa88967">cursor</link> () const</para>

<para>Return pointer to current position (cursor). </para>
</listitem>
            <listitem><para>size_t <link linkend="_classUtil_1_1MemoryOArchive_1ab5414ddd1dca8c01c83eefecd123aa48">capacity</link> () const</para>

<para>Return capacity in Bytes. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1MemoryOArchive_1a5e3ce69e3a27af5831da88fec4b43619">isAllocated</link> () const</para>

<para>Has memory been allocated? </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static bool <link linkend="_classUtil_1_1MemoryOArchive_1a7531f7544f44289e5947f1bf60626800">is_saving</link> ()</para>

<para>Returns true;. </para>
</listitem>
            <listitem><para>static bool <link linkend="_classUtil_1_1MemoryOArchive_1a59efa6a26012f770c95e4f39edb3aaac">is_loading</link> ()</para>

<para>Returns false;. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Save archive for packed heterogeneous binary data. </para>
<para>
Definition at line 31 of file MemoryOArchive.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1MemoryOArchive_1ad81684bd33290948af4025e29207eb50"/>    <section>
    <title>MemoryOArchive()</title>
<indexterm><primary>MemoryOArchive</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>MemoryOArchive</secondary></indexterm>
<para><computeroutput>Util::MemoryOArchive::MemoryOArchive ( )</computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 19 of file MemoryOArchive.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1a0641f5b50b3fcb0e5fa6f8745bce6535"/>    <section>
    <title>~MemoryOArchive()</title>
<indexterm><primary>~MemoryOArchive</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>~MemoryOArchive</secondary></indexterm>
<para><computeroutput>Util::MemoryOArchive::~MemoryOArchive ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 33 of file MemoryOArchive.cpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1MemoryOArchive_1a7531f7544f44289e5947f1bf60626800"/>    <section>
    <title>is_saving()</title>
<indexterm><primary>is_saving</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>is_saving</secondary></indexterm>
<para><computeroutput>bool Util::MemoryOArchive::is_saving ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Returns true;. </para>
</para>
<para>
Definition at line 188 of file MemoryOArchive.h.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1a59efa6a26012f770c95e4f39edb3aaac"/>    <section>
    <title>is_loading()</title>
<indexterm><primary>is_loading</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>is_loading</secondary></indexterm>
<para><computeroutput>bool Util::MemoryOArchive::is_loading ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Returns false;. </para>
</para>
<para>
Definition at line 191 of file MemoryOArchive.h.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1a35a274c65ace40aa7082d4f779667282"/>    <section>
    <title>allocate()</title>
<indexterm><primary>allocate</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>allocate</secondary></indexterm>
<para><computeroutput>void Util::MemoryOArchive::allocate (size_t capacity)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Allocate memory. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>capacity</entry>
                                <entry>
<para>size of memory block in bytes </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 44 of file MemoryOArchive.cpp.</para>
<para>
References begin(), capacity(), and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1afe51aa4147bd49fdfe697dabf1b5b520"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>clear</secondary></indexterm>
<para><computeroutput>void Util::MemoryOArchive::clear ( )</computeroutput></para><para>

<para>Resets the cursor to the beginning. </para>
</para>
<para>
Definition at line 62 of file MemoryOArchive.cpp.</para>
<para>
References begin(), isAllocated(), and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1a22d294f7818f1efe7cd3901342dff19b"/>    <section>
    <title>operator&amp;()</title>
<indexterm><primary>operator&amp;</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>operator&amp;</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::MemoryOArchive::operator&amp; (T &amp; data)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Save one object. </para>
</para>
<para>
Definition at line 224 of file MemoryOArchive.h.</para>
<para>
References Util::serialize().</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1a7c9e0350f695b7edad064648cbdc37e2"/>    <section>
    <title>operator&lt;&lt;()</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1MemoryOArchive">MemoryOArchive</link> &amp; Util::MemoryOArchive::operator&lt;&lt; (T &amp; data)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Save one object. </para>
</para>
<para>
Definition at line 231 of file MemoryOArchive.h.</para>
<para>
References Util::serialize().</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1a4b2f7b7758dddcbaf36ce6636cd29dc0"/>    <section>
    <title>pack()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>pack</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>pack</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::MemoryOArchive::pack (const T &amp; data)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Pack a T object. </para>
</para>
<para>
Definition at line 243 of file MemoryOArchive.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1a8d1ee44f33e22fcca93d6d7966ea63ad"/>    <section>
    <title>pack()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>pack</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>pack</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::MemoryOArchive::pack (const T * array, int n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Pack a C array. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>array</entry>
                                <entry>
<para>C array </para>
</entry>
                            </row>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>number of elements </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 261 of file MemoryOArchive.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1a24256917e42eaa1eb4146992a2f59eb8"/>    <section>
    <title>pack()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>pack</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>pack</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::MemoryOArchive::pack (const T * array, int m, int n, int np)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Pack a 2D C array. </para>
</para>

<para>Pack m rows of n elements from array of type T array[mp][np], with n &lt;= np and m &lt;= mp.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>array</entry>
                                <entry>
<para>poiner to [0][0] element of 2D array </para>
</entry>
                            </row>
                            <row>
                                <entry>m</entry>
                                <entry>
<para>logical number of rows </para>
</entry>
                            </row>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>logical number of columns </para>
</entry>
                            </row>
                            <row>
                                <entry>np</entry>
                                <entry>
<para>physical number of columns </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 281 of file MemoryOArchive.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1adffaaaeb29d85d44becb9d9e56c9877f"/>    <section>
    <title>send()</title>
<indexterm><primary>send</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>send</secondary></indexterm>
<para><computeroutput>void Util::MemoryOArchive::send (MPI::Intracomm &amp; comm, int dest)</computeroutput></para><para>

<para>Send packed data via MPI. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>dest</entry>
                                <entry>
<para>rank of processor to which data is sent </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 74 of file MemoryOArchive.cpp.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1a0c73ec0710fb406fd6d7ce7542ac9914"/>    <section>
    <title>iSend()</title>
<indexterm><primary>iSend</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>iSend</secondary></indexterm>
<para><computeroutput>void Util::MemoryOArchive::iSend (MPI::Intracomm &amp; comm, MPI::Request &amp; req, int dest)</computeroutput></para><para>

<para>Send packed data via MPI (non-blocking) </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>req</entry>
                                <entry>
<para>MPI request </para>
</entry>
                            </row>
                            <row>
                                <entry>dest</entry>
                                <entry>
<para>rank of processor to which data is sent </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 97 of file MemoryOArchive.cpp.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1ab1bdf087902cb214f28eb1849ae8614a"/>    <section>
    <title>begin()</title>
<indexterm><primary>begin</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>begin</secondary></indexterm>
<para><computeroutput><link linkend="_namespaceUtil_1aeb6f2071b71e3433dd3cfc1bce6c2e6d">Byte</link> * Util::MemoryOArchive::begin ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return pointer to beginning of block. </para>
</para>
<para>
Definition at line 211 of file MemoryOArchive.h.</para>
<para>
Referenced by allocate(), and clear().</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1a60fdf485b66b8e766179b727dfa88967"/>    <section>
    <title>cursor()</title>
<indexterm><primary>cursor</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>cursor</secondary></indexterm>
<para><computeroutput><link linkend="_namespaceUtil_1aeb6f2071b71e3433dd3cfc1bce6c2e6d">Byte</link> * Util::MemoryOArchive::cursor ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return pointer to current position (cursor). </para>
</para>
<para>
Definition at line 217 of file MemoryOArchive.h.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1ab5414ddd1dca8c01c83eefecd123aa48"/>    <section>
    <title>capacity()</title>
<indexterm><primary>capacity</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>capacity</secondary></indexterm>
<para><computeroutput>size_t Util::MemoryOArchive::capacity ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return capacity in Bytes. </para>
</para>
<para>
Definition at line 205 of file MemoryOArchive.h.</para>
<para>
Referenced by allocate().</para>
    </section><anchor xml:id="_classUtil_1_1MemoryOArchive_1a5e3ce69e3a27af5831da88fec4b43619"/>    <section>
    <title>isAllocated()</title>
<indexterm><primary>isAllocated</primary><secondary>Util::MemoryOArchive</secondary></indexterm>
<indexterm><primary>Util::MemoryOArchive</primary><secondary>isAllocated</secondary></indexterm>
<para><computeroutput>bool Util::MemoryOArchive::isAllocated ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Has memory been allocated? </para>
</para>
<para>
Definition at line 199 of file MemoryOArchive.h.</para>
<para>
Referenced by clear().</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
MemoryOArchive.hMemoryOArchive.cpp</section>
</section>
