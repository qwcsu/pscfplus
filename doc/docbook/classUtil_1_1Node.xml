<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1Node">
<title>Util::Node&lt; Data &gt; Class Template Reference</title>
<indexterm><primary>Util::Node&lt; Data &gt;</primary></indexterm>
<para>

<para>Linked <link linkend="_classUtil_1_1List">List</link> <link linkend="_classUtil_1_1Node">Node</link>, class template. </para>
 
</para>
<para>
<computeroutput>#include &lt;Node.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Node_1a375354517073d352ea602286eb41d3a2">Node</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Node_1ac963239dea7a0952fef610eb68cc2186">Node</link> (const <link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; &amp;other)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; * <link linkend="_classUtil_1_1Node_1a8c69f8b2744400b8e2c8ca7bdc265196">next</link> () const</para>

<para>Get the next pointer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; * <link linkend="_classUtil_1_1Node_1ab80b5ac9842a13cda76d4c9ad5589366">prev</link> () const</para>

<para>Get the previous pointer. </para>
</listitem>
            <listitem><para>const Data &amp; <link linkend="_classUtil_1_1Node_1a24d69ceba179deeaab31e1ce79f649b6">data</link> () const</para>

<para>Get a const reference to the associated Data. </para>
</listitem>
            <listitem><para>Data &amp; <link linkend="_classUtil_1_1Node_1ac3b68777f2805bb1aaa941294fa16448">data</link> ()</para>

<para>Get a reference to the associated Data object. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1List">List</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1Node_1ad71e2a199b95fc82e150f27ed99a6931">list</link> () const</para>

<para>Get a reference to the <link linkend="_classUtil_1_1List">List</link>. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Node_1abbd1c485466e14dfadfff9fa17e7b5f8">setNext</link> (<link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; *<link linkend="_classUtil_1_1Node_1a8c69f8b2744400b8e2c8ca7bdc265196">next</link>)</para>

<para>Set pointer to the next <link linkend="_classUtil_1_1Node">Node</link>. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Node_1a20e5144f84e048328d76f2110f2c5987">setPrev</link> (<link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; *<link linkend="_classUtil_1_1Node_1ab80b5ac9842a13cda76d4c9ad5589366">prev</link>)</para>

<para>Set pointer to the previous <link linkend="_classUtil_1_1Node">Node</link>. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Node_1a89b6aff8223b062bb3cb75d06573bda1">setList</link> (<link linkend="_classUtil_1_1List">List</link>&lt; Data &gt; &amp;<link linkend="_classUtil_1_1Node_1ad71e2a199b95fc82e150f27ed99a6931">list</link>)</para>

<para>Set the list. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Node_1a4e5caa039e0df7075b6ed0917775b51b">setList</link> (<link linkend="_classUtil_1_1List">List</link>&lt; Data &gt; *<link linkend="_classUtil_1_1Node_1ad71e2a199b95fc82e150f27ed99a6931">list</link>)</para>

<para>Set the list. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Node_1a8e8d5687795acbce3a6681d9b97570a7">attachNext</link> (<link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; &amp;other)</para>

<para>Set pointers connecting the other node after this node. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Node_1a875335842884011eb1246d55134d9c98">attachPrev</link> (<link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; &amp;other)</para>

<para>Set pointers connecting the other node before this node. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Node_1a2dc789a11a0bb6974c5c0a037108d272">clear</link> ()</para>

<para>Nullify previous and next pointers, and nullify the list pointer. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data&gt;
class Util::Node&lt; Data &gt;</title></simplesect>


<para>Linked <link linkend="_classUtil_1_1List">List</link> <link linkend="_classUtil_1_1Node">Node</link>, class template. </para>
<para>
Definition at line 22 of file Node.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1Node_1a375354517073d352ea602286eb41d3a2"/>    <section>
    <title>Node()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Node</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>Node</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::<link linkend="_classUtil_1_1Node">Node</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
<para>
Definition at line 30 of file Node.h.</para>
    </section><anchor xml:id="_classUtil_1_1Node_1ac963239dea7a0952fef610eb68cc2186"/>    <section>
    <title>Node()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Node</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>Node</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::<link linkend="_classUtil_1_1Node">Node</link> (const <link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy constructor. </para>
</para>
<para>
Definition at line 40 of file Node.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1Node_1a8c69f8b2744400b8e2c8ca7bdc265196"/>    <section>
    <title>next()</title>
<indexterm><primary>next</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>next</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Node">Node</link>&lt;Data&gt;* <link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::next ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the next pointer. </para>
</para>

<para><formalpara><title>Returns</title>

<para>pointer to next <link linkend="_classUtil_1_1Node">Node</link> in <link linkend="_classUtil_1_1List">List</link>. </para>
</formalpara>
</para>
<para>
Definition at line 52 of file Node.h.</para>
<para>
Referenced by Util::List&lt; Data &gt;::insert(), Util::List&lt; Data &gt;::insertNext(), Util::List&lt; Data &gt;::isValid(), Util::List&lt; Data &gt;::popFront(), Util::List&lt; Data &gt;::remove(), and Util::Node&lt; Data &gt;::setNext().</para>
    </section><anchor xml:id="_classUtil_1_1Node_1ab80b5ac9842a13cda76d4c9ad5589366"/>    <section>
    <title>prev()</title>
<indexterm><primary>prev</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>prev</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Node">Node</link>&lt;Data&gt;* <link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::prev ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the previous pointer. </para>
</para>

<para><formalpara><title>Returns</title>

<para>pointer to previous <link linkend="_classUtil_1_1Node">Node</link> in <link linkend="_classUtil_1_1List">List</link>. </para>
</formalpara>
</para>
<para>
Definition at line 60 of file Node.h.</para>
<para>
Referenced by Util::List&lt; Data &gt;::insert(), Util::List&lt; Data &gt;::insertPrev(), Util::List&lt; Data &gt;::isValid(), Util::List&lt; Data &gt;::popBack(), Util::List&lt; Data &gt;::remove(), and Util::Node&lt; Data &gt;::setPrev().</para>
    </section><anchor xml:id="_classUtil_1_1Node_1a24d69ceba179deeaab31e1ce79f649b6"/>    <section>
    <title>data()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>data</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>data</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>const Data&amp; <link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::data ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get a const reference to the associated Data. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Data object associated with this <link linkend="_classUtil_1_1Node">Node</link>. </para>
</formalpara>
</para>
<para>
Definition at line 68 of file Node.h.</para>
    </section><anchor xml:id="_classUtil_1_1Node_1ac3b68777f2805bb1aaa941294fa16448"/>    <section>
    <title>data()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>data</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>data</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>Data&amp; <link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::data ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get a reference to the associated Data object. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Data object associated with this <link linkend="_classUtil_1_1Node">Node</link>. </para>
</formalpara>
</para>
<para>
Definition at line 76 of file Node.h.</para>
    </section><anchor xml:id="_classUtil_1_1Node_1ad71e2a199b95fc82e150f27ed99a6931"/>    <section>
    <title>list()</title>
<indexterm><primary>list</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>list</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1List">List</link>&lt;Data&gt;&amp; <link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::list ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get a reference to the <link linkend="_classUtil_1_1List">List</link>. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Reference to the list to which this <link linkend="_classUtil_1_1Node">Node</link> belongs. </para>
</formalpara>
</para>
<para>
Definition at line 84 of file Node.h.</para>
<para>
Referenced by Util::List&lt; Data &gt;::insert(), Util::List&lt; Data &gt;::isValid(), Util::List&lt; Data &gt;::remove(), and Util::Node&lt; Data &gt;::setList().</para>
    </section><anchor xml:id="_classUtil_1_1Node_1abbd1c485466e14dfadfff9fa17e7b5f8"/>    <section>
    <title>setNext()</title>
<indexterm><primary>setNext</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>setNext</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::setNext (<link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; * next)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set pointer to the next <link linkend="_classUtil_1_1Node">Node</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>next</entry>
                                <entry>
<para>pointer to next <link linkend="_classUtil_1_1Node">Node</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 92 of file Node.h.</para>
<para>
References Util::Node&lt; Data &gt;::next().</para>
<para>
Referenced by Util::List&lt; Data &gt;::insert(), Util::List&lt; Data &gt;::insertNext(), and Util::List&lt; Data &gt;::pushBack().</para>
    </section><anchor xml:id="_classUtil_1_1Node_1a20e5144f84e048328d76f2110f2c5987"/>    <section>
    <title>setPrev()</title>
<indexterm><primary>setPrev</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>setPrev</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::setPrev (<link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; * prev)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set pointer to the previous <link linkend="_classUtil_1_1Node">Node</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>prev</entry>
                                <entry>
<para>pointer to previous <link linkend="_classUtil_1_1Node">Node</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 100 of file Node.h.</para>
<para>
References Util::Node&lt; Data &gt;::prev().</para>
<para>
Referenced by Util::List&lt; Data &gt;::insert(), Util::List&lt; Data &gt;::insertPrev(), and Util::List&lt; Data &gt;::pushFront().</para>
    </section><anchor xml:id="_classUtil_1_1Node_1a89b6aff8223b062bb3cb75d06573bda1"/>    <section>
    <title>setList()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>setList</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>setList</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::setList (<link linkend="_classUtil_1_1List">List</link>&lt; Data &gt; &amp; list)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set the list. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>list</entry>
                                <entry>
<para>associated <link linkend="_classUtil_1_1List">List</link> object </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 108 of file Node.h.</para>
<para>
References Util::Node&lt; Data &gt;::list().</para>
<para>
Referenced by Util::List&lt; Data &gt;::insert(), Util::List&lt; Data &gt;::pushBack(), and Util::List&lt; Data &gt;::pushFront().</para>
    </section><anchor xml:id="_classUtil_1_1Node_1a4e5caa039e0df7075b6ed0917775b51b"/>    <section>
    <title>setList()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>setList</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>setList</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::setList (<link linkend="_classUtil_1_1List">List</link>&lt; Data &gt; * list)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set the list. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>list</entry>
                                <entry>
<para>pointer to an associated <link linkend="_classUtil_1_1List">List</link> object </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 116 of file Node.h.</para>
<para>
References Util::Node&lt; Data &gt;::list().</para>
    </section><anchor xml:id="_classUtil_1_1Node_1a8e8d5687795acbce3a6681d9b97570a7"/>    <section>
    <title>attachNext()</title>
<indexterm><primary>attachNext</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>attachNext</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::attachNext (<link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set pointers connecting the other node after this node. </para>
</para>

<para>This method sets the next pointer of this node to other and the previous node of other to this. It also also sets the list of the other node to this list.</para>

<para>It does not reset the next pointer of the other node, and so does not finish splicing the other node into the middle of this list. The next pointer of the other node is left unchanged.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>a <link linkend="_classUtil_1_1Node">Node</link> to connect to this one. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 132 of file Node.h.</para>
<para>
Referenced by Util::List&lt; Data &gt;::insert(), Util::List&lt; Data &gt;::insertNext(), and Util::List&lt; Data &gt;::pushBack().</para>
    </section><anchor xml:id="_classUtil_1_1Node_1a875335842884011eb1246d55134d9c98"/>    <section>
    <title>attachPrev()</title>
<indexterm><primary>attachPrev</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>attachPrev</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::attachPrev (<link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set pointers connecting the other node before this node. </para>
</para>

<para>This method sets the previous pointer of this node to other and the next node of other to this. It also also sets the list of the other node to this list.</para>

<para>It does not reset the previous pointer of the other node, and so does not finish splicing the other node into the middle of this list. The previous pointer of the other node is left unchanged.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>a <link linkend="_classUtil_1_1Node">Node</link> to connect to this one. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 152 of file Node.h.</para>
<para>
Referenced by Util::List&lt; Data &gt;::insertPrev(), and Util::List&lt; Data &gt;::pushFront().</para>
    </section><anchor xml:id="_classUtil_1_1Node_1a2dc789a11a0bb6974c5c0a037108d272"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::Node&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::Node&lt; Data &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Node">Util::Node</link>&lt; Data &gt;::clear ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Nullify previous and next pointers, and nullify the list pointer. </para>
</para>

<para>This method disconnects the <link linkend="_classUtil_1_1Node">Node</link> from any <link linkend="_classUtil_1_1List">List</link>, but does not modify the datum_. </para>
<para>
Definition at line 165 of file Node.h.</para>
<para>
Referenced by Util::List&lt; Data &gt;::popBack(), Util::List&lt; Data &gt;::popFront(), and Util::List&lt; Data &gt;::remove().</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Node.h</section>
</section>
