<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1Parameter">
<title>Util::Parameter Class Reference</title>
<indexterm><primary>Util::Parameter</primary></indexterm>
<para>

<para>A single variable in a parameter file. </para>
 
</para>
<para>
<computeroutput>#include &lt;Parameter.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Util::Parameter:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUtil_1_1Parameter.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Parameter_1a414619202fc5620eed36bf0eed0f4118">Parameter</link> (const char *<link linkend="_classUtil_1_1Parameter_1a2e6a63d5a0827ee3de51d481aee38174">label</link>, bool <link linkend="_classUtil_1_1Parameter_1accdc4c9c774b9394b387277543c1ba74">isRequired</link>=true)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1Parameter_1a298bf94db752ee437098795ea1f81110">~Parameter</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Parameter_1a814c4defbb8111a23a97eac7908332a3">readParam</link> (std::istream &amp;in)</para>

<para>Read a label and (if the label matches) a parameter value. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Parameter_1afee158d4448a9db32b8469c1e447e75c">load</link> (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp;ar)</para>

<para>Load from an archive. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Parameter_1a43ae1276ea1ef6562035bec15ea6fdc9">save</link> (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp;ar)</para>

<para>Save to an archive. </para>
</listitem>
            <listitem><para>std::string <link linkend="_classUtil_1_1Parameter_1a2e6a63d5a0827ee3de51d481aee38174">label</link> () const</para>

<para>Return label string. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Parameter_1accdc4c9c774b9394b387277543c1ba74">isRequired</link> () const</para>

<para>Is this an optional parameter? </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Parameter_1ae8c6d89210cc4d3eb3eb4eb8dd3e0ff9">isActive</link> () const</para>

<para>Is this parameter active? </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;class Type &gt; </para><para>static void <link linkend="_classUtil_1_1Parameter_1ae33aacac251a07bbc7cc98cce9dbed80">saveOptional</link> (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp;ar, Type &amp;value, bool <link linkend="_classUtil_1_1Parameter_1ae8c6d89210cc4d3eb3eb4eb8dd3e0ff9">isActive</link>)</para>

<para>Save an optional parameter value to an output archive. </para>
</listitem>
            <listitem><para>template&lt;class Type &gt; </para><para>static void <link linkend="_classUtil_1_1Parameter_1a1ae7e25c24ef3bd1f4fb7730e7a89933">saveOptionalCArray</link> (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp;ar, Type *ptr, int n, bool <link linkend="_classUtil_1_1Parameter_1ae8c6d89210cc4d3eb3eb4eb8dd3e0ff9">isActive</link>)</para>

<para>Save an optional C-array of n values to an output archive. </para>
</listitem>
            <listitem><para>template&lt;class Type &gt; </para><para>static void <link linkend="_classUtil_1_1Parameter_1a9da0810112098f3bd7c69c633ee174b6">saveOptionalCArray2D</link> (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp;ar, Type *ptr, int m, int n, int np, bool <link linkend="_classUtil_1_1Parameter_1ae8c6d89210cc4d3eb3eb4eb8dd3e0ff9">isActive</link>)</para>

<para>Save an optional two-dimensional C array to an output archive. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static const int <link linkend="_classUtil_1_1Parameter_1af4db8fd5ca850496e8e599bae93aa2f2">Width</link> = 20</para>

<para>Width of output field for a scalar variable. </para>
</listitem>
            <listitem><para>static const int <link linkend="_classUtil_1_1Parameter_1a5cd638eb2b87aef9ab7c755c6993d721">Precision</link> = 12</para>

<para>Precision for io of floating point data field. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Parameter_1a5817fa95bf2e32808d384a66e272dc37">readValue</link> (std::istream &amp;in)</para>

<para>Read parameter value from an input stream. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Parameter_1a9e3d8dbd2198974017cd8711ae9c990d">loadValue</link> (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp;ar)</para>

<para>Load bare parameter value from an archive. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Parameter_1a61858c5163b492f2618689a35ff05044">saveValue</link> (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp;ar)</para>

<para>Save parameter value to an archive. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Parameter_1ad93ad2700686a5a32755fdb67b2a0792">bcastValue</link> ()</para>

<para>Broadcast parameter value within the ioCommunicator. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Label">Label</link> <link linkend="_classUtil_1_1Parameter_1ace68d81036d6fb068da1a697a791c6b1">label_</link></para>

<para><link linkend="_classUtil_1_1Label">Label</link> object that contains parameter label string. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Parameter_1a66cdcb38f67b300eb0508d5e3f5949b0">isActive_</link></para>

<para>Is this parameter active (always true if isRequired). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A single variable in a parameter file. </para>



<para><link linkend="_classUtil_1_1Parameter">Parameter</link> is a base class for objects that read and write the value of a single C++ variable from or to a parameter file. The parameter file format for a parameter contains a string label followed by a value for the variable. Different subclasses of parameter are specialized for different variable types, which can include primitive C/C++ variables, user defined types that overload the &lt;&lt; and &gt;&gt; operators, or any of several different types of container.</para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> may be required or optional element in a parameter file, depending on the value of the bool isRequired parameter of the constructor. An optional element becomes &quot;active&quot; when an entry with the correct label is read from a parameter file, or when an active value is loaded from an archive. By convention, a required <link linkend="_classUtil_1_1Parameter">Parameter</link> is always active, even before its value is read or loaded. The bool functions <link linkend="_classUtil_1_1Parameter_1accdc4c9c774b9394b387277543c1ba74">isRequired()</link> and <link linkend="_classUtil_1_1Parameter_1ae8c6d89210cc4d3eb3eb4eb8dd3e0ff9">isActive()</link> can be used to query the state of a <link linkend="_classUtil_1_1Parameter">Parameter</link>.</para>

<para>The overloaded <link linkend="_classUtil_1_1Parameter_1ae33aacac251a07bbc7cc98cce9dbed80">saveOptional()</link> static member functions can be used to save optional parameters to an archive in a form that records whether or not they are active. </para>
<para>
Definition at line 45 of file Parameter.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1Parameter_1a414619202fc5620eed36bf0eed0f4118"/>    <section>
    <title>Parameter()</title>
<indexterm><primary>Parameter</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>Parameter</secondary></indexterm>
<para><computeroutput>Util::Parameter::Parameter (const char * label, bool isRequired = <computeroutput>true</computeroutput>
)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>label</entry>
                                <entry>
<para>label string preceding value in file format </para>
</entry>
                            </row>
                            <row>
                                <entry>isRequired</entry>
                                <entry>
<para>Is this a required parameter? </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 22 of file Parameter.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1a298bf94db752ee437098795ea1f81110"/>    <section>
    <title>~Parameter()</title>
<indexterm><primary>~Parameter</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>~Parameter</secondary></indexterm>
<para><computeroutput>Util::Parameter::~Parameter ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 30 of file Parameter.cpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1Parameter_1ae33aacac251a07bbc7cc98cce9dbed80"/>    <section>
    <title>saveOptional()</title>
<indexterm><primary>saveOptional</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>saveOptional</secondary></indexterm>
<computeroutput>template&lt;class Type &gt; </computeroutput><para><computeroutput>void Util::Parameter::saveOptional (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp; ar, Type &amp; value, bool isActive)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Save an optional parameter value to an output archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>output archive to which to save </para>
</entry>
                            </row>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>reference to value of optional parameter </para>
</entry>
                            </row>
                            <row>
                                <entry>isActive</entry>
                                <entry>
<para>Is this parameter present in the parameter file? </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 224 of file Parameter.h.</para>
<para>
References isActive().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1a1ae7e25c24ef3bd1f4fb7730e7a89933"/>    <section>
    <title>saveOptionalCArray()</title>
<indexterm><primary>saveOptionalCArray</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>saveOptionalCArray</secondary></indexterm>
<computeroutput>template&lt;class Type &gt; </computeroutput><para><computeroutput>void Util::Parameter::saveOptionalCArray (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp; ar, Type * ptr, int n, bool isActive)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Save an optional C-array of n values to an output archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>output archive to which to save </para>
</entry>
                            </row>
                            <row>
                                <entry>ptr</entry>
                                <entry>
<para>pointer to first element of optional C-array parameter </para>
</entry>
                            </row>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>number of elements in array </para>
</entry>
                            </row>
                            <row>
                                <entry>isActive</entry>
                                <entry>
<para>Is this parameter present in the parameter file? </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 237 of file Parameter.h.</para>
<para>
References isActive(), and Util::BinaryFileOArchive::pack().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1a9da0810112098f3bd7c69c633ee174b6"/>    <section>
    <title>saveOptionalCArray2D()</title>
<indexterm><primary>saveOptionalCArray2D</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>saveOptionalCArray2D</secondary></indexterm>
<computeroutput>template&lt;class Type &gt; </computeroutput><para><computeroutput>void Util::Parameter::saveOptionalCArray2D (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp; ar, Type * ptr, int m, int n, int np, bool isActive)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Save an optional two-dimensional C array to an output archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>output archive to which to save </para>
</entry>
                            </row>
                            <row>
                                <entry>ptr</entry>
                                <entry>
<para>pointer to first element optional 2D C-array parameter </para>
</entry>
                            </row>
                            <row>
                                <entry>m</entry>
                                <entry>
<para>logical number of rows in array </para>
</entry>
                            </row>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>logical number of columns in array </para>
</entry>
                            </row>
                            <row>
                                <entry>np</entry>
                                <entry>
<para>logical number of columns in array </para>
</entry>
                            </row>
                            <row>
                                <entry>isActive</entry>
                                <entry>
<para>Is this parameter present in the parameter file? </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 250 of file Parameter.h.</para>
<para>
References isActive(), and Util::BinaryFileOArchive::pack().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1a814c4defbb8111a23a97eac7908332a3"/>    <section>
    <title>readParam()</title>
<indexterm><primary>readParam</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>readParam</secondary></indexterm>
<para><computeroutput>void Util::Parameter::readParam (std::istream &amp; in)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Read a label and (if the label matches) a parameter value. </para>
</para>

<para>The parameter file format for a <link linkend="_classUtil_1_1Parameter">Parameter</link> consists of a label string followed by value. The value is read if and only if the label matches the expected value for this <link linkend="_classUtil_1_1Parameter">Parameter</link>. If this <link linkend="_classUtil_1_1Parameter">Parameter</link> is required and the input label not match, an error message is printed to the log file and <link linkend="_classUtil_1_1Exception">Exception</link> is thrown. If the <link linkend="_classUtil_1_1Parameter">Parameter</link> is not required and the input label does not match, the label string is retained in an buffer for later processing by the readParam method of other <link linkend="_classUtil_1_1ParamComponent">ParamComponent</link> objects.</para>

<para>Upon entry to this function, a label string is read into a label buffer if and only if the buffer is empty. This buffer is a static member of the <link linkend="_classUtil_1_1Label">Label</link> class, which can retain a label between invocations of the readParameter method of different <link linkend="_classUtil_1_1ParamComponent">ParamComponent</link> objects. Once a label string is read from file, it remains in the label buffer until until it is matched, at which point the buffer is cleared to allow processing of the next label.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream from which to read </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implements <link linkend="_classUtil_1_1ParamComponent_1a5234b604f9e852f53eedd7de7c354a1e">Util::ParamComponent</link>.</para>
<para>
Definition at line 36 of file Parameter.cpp.</para>
<para>
References Util::bcast&lt; bool &gt;(), bcastValue(), Util::ParamComponent::echo(), Util::Log::file(), Util::MpiFileIo::hasIoCommunicator(), Util::ParamComponent::indent(), Util::MpiFileIo::ioCommunicator(), isActive_, Util::MpiFileIo::isIoProcessor(), Util::Label::isMatched(), isRequired(), label_, readValue(), UTIL_THROW, Width, and Util::ParamComponent::writeParam().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1afee158d4448a9db32b8469c1e447e75c"/>    <section>
    <title>load()</title>
<indexterm><primary>load</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>load</secondary></indexterm>
<para><computeroutput>void Util::Parameter::load (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp; ar)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Load from an archive. </para>
</para>

<para>An optional <link linkend="_classUtil_1_1Parameter">Parameter</link> loads the value of an isActive flag, and then loads the parameter value only if the isActive is true. A required <link linkend="_classUtil_1_1Parameter">Parameter</link> simply loads the parameter value. The variable associated with an optional <link linkend="_classUtil_1_1Parameter">Parameter</link> must be set to its default value before attempting to load the parameter. Optional parameters should be saved either using the <link linkend="_classUtil_1_1Parameter_1a43ae1276ea1ef6562035bec15ea6fdc9">save()</link> method of an associated <link linkend="_classUtil_1_1Parameter">Parameter</link> object or using the appropriate overloaded <link linkend="_classUtil_1_1Parameter_1ae33aacac251a07bbc7cc98cce9dbed80">Parameter::saveOptional()</link> static member function, which both use the required format.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>input archive from which to load </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComponent_1a7925e60ccaf7ecf2ea866e689983124d">Util::ParamComponent</link>.</para>
<para>
Definition at line 98 of file Parameter.cpp.</para>
<para>
References Util::bcast&lt; bool &gt;(), bcastValue(), Util::ParamComponent::echo(), Util::Log::file(), Util::MpiFileIo::hasIoCommunicator(), Util::ParamComponent::indent(), Util::MpiFileIo::ioCommunicator(), isActive_, Util::MpiFileIo::isIoProcessor(), isRequired(), label_, loadValue(), UTIL_THROW, Width, and Util::ParamComponent::writeParam().</para>
<para>
Referenced by Util::ParamComposite::loadCArray(), Util::ParamComposite::loadCArray2D(), Util::ParamComposite::loadDArray(), Util::ParamComposite::loadDMatrix(), Util::ParamComposite::loadDSymmMatrix(), Util::ParamComposite::loadFArray(), and Util::ParamComposite::loadParameter().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1a43ae1276ea1ef6562035bec15ea6fdc9"/>    <section>
    <title>save()</title>
<indexterm><primary>save</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>save</secondary></indexterm>
<para><computeroutput>void Util::Parameter::save (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp; ar)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Save to an archive. </para>
</para>

<para>An optional <link linkend="_classUtil_1_1Parameter">Parameter</link> saves the value of the isActive flag, and then saves a parameter value only if the isActive is true. A required <link linkend="_classUtil_1_1Parameter">Parameter</link> simply saves its value. The label string is not saved to the archive.</para>

<para>The overloaded static saveOptional functions can also be used to save optional parameter values in this format.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>output archive to which to save </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComponent_1a433717dd5bb0a1ac3e4dec06459b7bde">Util::ParamComponent</link>.</para>
<para>
Definition at line 145 of file Parameter.cpp.</para>
<para>
References isActive_, isRequired(), and saveValue().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1a2e6a63d5a0827ee3de51d481aee38174"/>    <section>
    <title>label()</title>
<indexterm><primary>label</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>label</secondary></indexterm>
<para><computeroutput>std::string Util::Parameter::label ( ) const</computeroutput></para><para>

<para>Return label string. </para>
</para>
<para>
Definition at line 158 of file Parameter.cpp.</para>
<para>
References label_, and Util::Label::string().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1accdc4c9c774b9394b387277543c1ba74"/>    <section>
    <title>isRequired()</title>
<indexterm><primary>isRequired</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>isRequired</secondary></indexterm>
<para><computeroutput>bool Util::Parameter::isRequired ( ) const</computeroutput></para><para>

<para>Is this an optional parameter? </para>
</para>
<para>
Definition at line 164 of file Parameter.cpp.</para>
<para>
References Util::Label::isRequired(), and label_.</para>
<para>
Referenced by load(), readParam(), and save().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1ae8c6d89210cc4d3eb3eb4eb8dd3e0ff9"/>    <section>
    <title>isActive()</title>
<indexterm><primary>isActive</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>isActive</secondary></indexterm>
<para><computeroutput>bool Util::Parameter::isActive ( ) const</computeroutput></para><para>

<para>Is this parameter active? </para>
</para>
<para>
Definition at line 170 of file Parameter.cpp.</para>
<para>
References isActive_.</para>
<para>
Referenced by saveOptional(), saveOptionalCArray(), and saveOptionalCArray2D().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1a5817fa95bf2e32808d384a66e272dc37"/>    <section>
    <title>readValue()</title>
<indexterm><primary>readValue</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>readValue</secondary></indexterm>
<para><computeroutput>virtual void Util::Parameter::readValue (std::istream &amp; in)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Read parameter value from an input stream. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream from which to read </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented in <link linkend="_classUtil_1_1ScalarParam_1a536edaca5a76b51f20e14f12f1ff944f">Util::ScalarParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1CArray2DParam_1a3f0b4d2c75432ed9c9804eee6cdc05dd">Util::CArray2DParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1DMatrixParam_1a15a4481fadc1488d2ae20e3404c6c2bd">Util::DMatrixParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1DSymmMatrixParam_1a0273f653b47f5a47a57605e94fcbdcb9">Util::DSymmMatrixParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1FArrayParam_1aa9fb6e5e22c28f5b787996c226125369">Util::FArrayParam&lt; Type, N &gt;</link>, <link linkend="_classUtil_1_1DArrayParam_1ad550c2aadf45f68c24f69ddf54b6b2c7">Util::DArrayParam&lt; Type &gt;</link>, and <link linkend="_classUtil_1_1CArrayParam_1a4bfedd019e26fe4090a6234a8afd47a6">Util::CArrayParam&lt; Type &gt;</link>.</para>
<para>
Definition at line 195 of file Parameter.h.</para>
<para>
Referenced by readParam().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1a9e3d8dbd2198974017cd8711ae9c990d"/>    <section>
    <title>loadValue()</title>
<indexterm><primary>loadValue</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>loadValue</secondary></indexterm>
<para><computeroutput>virtual void Util::Parameter::loadValue (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp; ar)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Load bare parameter value from an archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>input archive from which to load </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented in <link linkend="_classUtil_1_1ScalarParam_1accc6024fbe49a8603392acaab1e30ce3">Util::ScalarParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1CArray2DParam_1a57e818a24bd08df9fca0fbb76fdeb74b">Util::CArray2DParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1DMatrixParam_1a608d6ce4ed20b0134465bfe2d8887fcb">Util::DMatrixParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1DSymmMatrixParam_1a3c962514154258d7fe8da1772bb98013">Util::DSymmMatrixParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1FArrayParam_1a4212b1eef135a3a7b9ab4169f8b7e7cb">Util::FArrayParam&lt; Type, N &gt;</link>, <link linkend="_classUtil_1_1DArrayParam_1a53d476a639110584e86565e2ee7fe0e3">Util::DArrayParam&lt; Type &gt;</link>, and <link linkend="_classUtil_1_1CArrayParam_1aa8f5175efeee4c5a1e3eff658e86d89d">Util::CArrayParam&lt; Type &gt;</link>.</para>
<para>
Definition at line 202 of file Parameter.h.</para>
<para>
Referenced by load().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1a61858c5163b492f2618689a35ff05044"/>    <section>
    <title>saveValue()</title>
<indexterm><primary>saveValue</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>saveValue</secondary></indexterm>
<para><computeroutput>virtual void Util::Parameter::saveValue (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp; ar)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Save parameter value to an archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>output archive to which to save </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented in <link linkend="_classUtil_1_1ScalarParam_1a5b7ebc18ee9d6e3c5bf866680e5aee1e">Util::ScalarParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1CArray2DParam_1a851fef862a4f242a552e02f4b7c79a52">Util::CArray2DParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1DMatrixParam_1ada9985426e5b14f9635eaabbc2a0841d">Util::DMatrixParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1DSymmMatrixParam_1aafb1e7d98687bd74f53eeae8d83d9095">Util::DSymmMatrixParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1FArrayParam_1ad1737f859cff068584f812fd9e279342">Util::FArrayParam&lt; Type, N &gt;</link>, <link linkend="_classUtil_1_1DArrayParam_1aa58cee6336e5f9cc5f373c5ecd2d1f51">Util::DArrayParam&lt; Type &gt;</link>, and <link linkend="_classUtil_1_1CArrayParam_1a8881749688cb0f41e0274774acfbe7d0">Util::CArrayParam&lt; Type &gt;</link>.</para>
<para>
Definition at line 209 of file Parameter.h.</para>
<para>
Referenced by save().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1ad93ad2700686a5a32755fdb67b2a0792"/>    <section>
    <title>bcastValue()</title>
<indexterm><primary>bcastValue</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>bcastValue</secondary></indexterm>
<para><computeroutput>virtual void Util::Parameter::bcastValue ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Broadcast parameter value within the ioCommunicator. </para>
</para>
<para>
Reimplemented in <link linkend="_classUtil_1_1ScalarParam_1abf6b6231f7425ac95c9d38658ad2184a">Util::ScalarParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1CArray2DParam_1a9ac64b6275cc9f3a30294eb3e67fa8b4">Util::CArray2DParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1DMatrixParam_1a30b31f637f58691e4394caaa033354a1">Util::DMatrixParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1DSymmMatrixParam_1afadea2af59b27500f31138805773ab4f">Util::DSymmMatrixParam&lt; Type &gt;</link>, <link linkend="_classUtil_1_1FArrayParam_1a3aee8175a45ea44b57fb5a2135f8957d">Util::FArrayParam&lt; Type, N &gt;</link>, <link linkend="_classUtil_1_1DArrayParam_1a55357aded8ae296398d78ae0a6bc39aa">Util::DArrayParam&lt; Type &gt;</link>, and <link linkend="_classUtil_1_1CArrayParam_1ac7cfc3e3ea2145c564d409d91c42e023">Util::CArrayParam&lt; Type &gt;</link>.</para>
<para>
Definition at line 215 of file Parameter.h.</para>
<para>
Referenced by load(), and readParam().</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classUtil_1_1Parameter_1af4db8fd5ca850496e8e599bae93aa2f2"/>    <section>
    <title>Width</title>
<indexterm><primary>Width</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>Width</secondary></indexterm>
<para><computeroutput>const int Util::Parameter::Width = 20<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Width of output field for a scalar variable. </para>
</para>
<para>
Definition at line 53 of file Parameter.h.</para>
<para>
Referenced by load(), readParam(), Util::CArrayParam&lt; Type &gt;::writeParam(), Util::DArrayParam&lt; Type &gt;::writeParam(), Util::FArrayParam&lt; Type, N &gt;::writeParam(), Util::DSymmMatrixParam&lt; Type &gt;::writeParam(), Util::DMatrixParam&lt; Type &gt;::writeParam(), Util::ScalarParam&lt; Type &gt;::writeParam(), and Util::CArray2DParam&lt; Type &gt;::writeParam().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1a5cd638eb2b87aef9ab7c755c6993d721"/>    <section>
    <title>Precision</title>
<indexterm><primary>Precision</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>Precision</secondary></indexterm>
<para><computeroutput>const int Util::Parameter::Precision = 12<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Precision for io of floating point data field. </para>
</para>
<para>
Definition at line 56 of file Parameter.h.</para>
<para>
Referenced by Util::CArrayParam&lt; Type &gt;::writeParam(), Util::DArrayParam&lt; Type &gt;::writeParam(), Util::FArrayParam&lt; Type, N &gt;::writeParam(), Util::DSymmMatrixParam&lt; Type &gt;::writeParam(), Util::DMatrixParam&lt; Type &gt;::writeParam(), Util::ScalarParam&lt; Type &gt;::writeParam(), and Util::CArray2DParam&lt; Type &gt;::writeParam().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1ace68d81036d6fb068da1a697a791c6b1"/>    <section>
    <title>label_</title>
<indexterm><primary>label_</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>label_</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Label">Label</link> Util::Parameter::label_<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para><link linkend="_classUtil_1_1Label">Label</link> object that contains parameter label string. </para>
</para>
<para>
Definition at line 185 of file Parameter.h.</para>
<para>
Referenced by isRequired(), label(), load(), pscfpp.ParamComposite.Parameter::read(), readParam(), and pscfpp.ParamComposite.Parameter::setValue().</para>
    </section><anchor xml:id="_classUtil_1_1Parameter_1a66cdcb38f67b300eb0508d5e3f5949b0"/>    <section>
    <title>isActive_</title>
<indexterm><primary>isActive_</primary><secondary>Util::Parameter</secondary></indexterm>
<indexterm><primary>Util::Parameter</primary><secondary>isActive_</secondary></indexterm>
<para><computeroutput>bool Util::Parameter::isActive_<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Is this parameter active (always true if isRequired). </para>
</para>
<para>
Definition at line 188 of file Parameter.h.</para>
<para>
Referenced by isActive(), load(), readParam(), and save().</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
Parameter.hParameter.cpp</section>
</section>
