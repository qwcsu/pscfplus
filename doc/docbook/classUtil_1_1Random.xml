<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1Random">
<title>Util::Random Class Reference</title>
<indexterm><primary>Util::Random</primary></indexterm>
<para>

<para><link linkend="_classUtil_1_1Random">Random</link> number generator. </para>
 
</para>
<para>
<computeroutput>#include &lt;Random.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Util::Random:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUtil_1_1Random.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Random_1a6bad1de57bdb28a3f5ff19d2ef9930b6">Random</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1Random_1a400d90d6f16a04474bf6a6878b2bc2d1">~Random</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Random_1a0a5f4eb6295c6ca1845678f7bfa9e978">readParameters</link> (std::istream &amp;in)</para>

<para>Read seed from file, initialize RNG. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Random_1a3aa452ad91349afc2c3c08b00db64510">loadParameters</link> (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp;ar)</para>

<para>Load internal state from file. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1Random_1aff18b17a0f4d6383d8ed881a8910b3b8">save</link> (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp;ar)</para>

<para>Save internal state to file. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Random_1a0754dc23b091036f86564d2e5e6dd310">setSeed</link> (SeedType <link linkend="_classUtil_1_1Random_1aee711f2c8b484046b148af207950c15d">seed</link>)</para>

<para>Sets of random seed, and initializes random number generator. </para>
</listitem>
            <listitem><para>double <link linkend="_classUtil_1_1Random_1ae18b83cdfb994352aa0ac1efc451e6ae">uniform</link> ()</para>

<para>Return a random floating point number x, uniformly distributed in the range 0 &lt;= x &lt; 1. </para>
</listitem>
            <listitem><para>double <link linkend="_classUtil_1_1Random_1a3beaaca47a8a62535b86b545061574ce">uniform</link> (double range1, double range2)</para>

<para>Return a random floating point number x, uniformly distributed in the range range1 &lt;= x &lt; range2. </para>
</listitem>
            <listitem><para>long <link linkend="_classUtil_1_1Random_1a2a7f4c20d13a3ea0bc532c224aecc40e">uniformInt</link> (long range1, long range2)</para>

<para>Return random long int x uniformly distributed in range1 &lt;= x &lt; range2. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Random_1a1b4a276aed589e7c73f33e2d22a8ebb5">getPoint</link> (double minR[], double maxR[], double r[])</para>

<para>Generate a random point in a box. </para>
</listitem>
            <listitem><para>double <link linkend="_classUtil_1_1Random_1ae4056fb996c7072ec2a8815d818c7102">gaussian</link> (void)</para>

<para>Return a Gaussian random number with zero average and unit variance. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Random_1a790b5d37cebb4f9d5bf711eba68d0948">unitVector</link> (<link linkend="_classUtil_1_1Vector">Vector</link> &amp;v)</para>

<para>Generate unit vector with uniform probability over the unit sphere. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Random_1aca8c04b92484ed95768827d6ad411e40">metropolis</link> (double ratio)</para>

<para>Metropolis algorithm for whether to accept a MC move. </para>
</listitem>
            <listitem><para>long <link linkend="_classUtil_1_1Random_1af1c8a9ff314e8aa7d802da8e0b59792b">drawFrom</link> (double probability[], long size)</para>

<para>Choose one of several outcomes with a specified set of probabilities. </para>
</listitem>
            <listitem><para>template&lt;class Archive &gt; </para><para>void <link linkend="_classUtil_1_1Random_1afe74c68515ca9266a504360f96ca2e01">serialize</link> (Archive &amp;ar, const unsigned int version)</para>

<para>Serialize to/from an archive. </para>
</listitem>
            <listitem><para>long <link linkend="_classUtil_1_1Random_1aee711f2c8b484046b148af207950c15d">seed</link> ()</para>

<para>Returns value of random seed (private member variable seed_). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para><link linkend="_classUtil_1_1Random">Random</link> number generator. </para>



<para>This class provides functions that return several forms of random numbers, using an internal Mersenne-Twister random number generator. 
<literallayout>&#160;&#xa;</literallayout>
</para>

<para>The generator may be seeded either by reading a seed from file, using the <link linkend="_classUtil_1_1ParamComposite_1a6fc094b057fd9a21641b089f6f063b39">readParam()</link> method, or by using setSeed() to set or reset it explicitly. In either case, inputting a positive integer causes that value to be used as a seed, but inputting a value of 0 causes the use of a seed that is generated from the system clock.</para>

<para>If the program is compiled with MPI, and MPI is initialized, then any automatically generated seed is also offset by a value that depends on the rank of the processor within the MPI world communicator, so that different processor use different seeds. </para>
<para>
Definition at line 46 of file Random.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1Random_1a6bad1de57bdb28a3f5ff19d2ef9930b6"/>    <section>
    <title>Random()</title>
<indexterm><primary>Random</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>Random</secondary></indexterm>
<para><computeroutput>Util::Random::Random ( )</computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 13 of file Random.cpp.</para>
<para>
References Util::ParamComposite::setClassName().</para>
    </section><anchor xml:id="_classUtil_1_1Random_1a400d90d6f16a04474bf6a6878b2bc2d1"/>    <section>
    <title>~Random()</title>
<indexterm><primary>~Random</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>~Random</secondary></indexterm>
<para><computeroutput>Util::Random::~Random ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 22 of file Random.cpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1Random_1a0a5f4eb6295c6ca1845678f7bfa9e978"/>    <section>
    <title>readParameters()</title>
<indexterm><primary>readParameters</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>readParameters</secondary></indexterm>
<para><computeroutput>void Util::Random::readParameters (std::istream &amp; in)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Read seed from file, initialize RNG. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1a172a3a656b5829c8d758424ad09a22a6">Util::ParamComposite</link>.</para>
<para>
Definition at line 28 of file Random.cpp.</para>
<para>
References setSeed().</para>
    </section><anchor xml:id="_classUtil_1_1Random_1a3aa452ad91349afc2c3c08b00db64510"/>    <section>
    <title>loadParameters()</title>
<indexterm><primary>loadParameters</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>loadParameters</secondary></indexterm>
<para><computeroutput>void Util::Random::loadParameters (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp; ar)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Load internal state from file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>input/loading archive </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1adec07dcba0895ba69463147314cde7ce">Util::ParamComposite</link>.</para>
<para>
Definition at line 37 of file Random.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Random_1aff18b17a0f4d6383d8ed881a8910b3b8"/>    <section>
    <title>save()</title>
<indexterm><primary>save</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>save</secondary></indexterm>
<para><computeroutput>void Util::Random::save (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp; ar)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Save internal state to file. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>output/saving archive </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1a3c430a4e31a9573eadb06ab89d3bf780">Util::ParamComposite</link>.</para>
<para>
Definition at line 46 of file Random.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Random_1a0754dc23b091036f86564d2e5e6dd310"/>    <section>
    <title>setSeed()</title>
<indexterm><primary>setSeed</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>setSeed</secondary></indexterm>
<para><computeroutput>void Util::Random::setSeed (Random::SeedType seed)</computeroutput></para><para>

<para>Sets of random seed, and initializes random number generator. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>seed</entry>
                                <entry>
<para>value for random seed (private member variable idum) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 57 of file Random.cpp.</para>
<para>
References seed(), and setSeed().</para>
<para>
Referenced by readParameters(), and setSeed().</para>
    </section><anchor xml:id="_classUtil_1_1Random_1ae18b83cdfb994352aa0ac1efc451e6ae"/>    <section>
    <title>uniform()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>uniform</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>uniform</secondary></indexterm>
<para><computeroutput>double Util::Random::uniform ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return a random floating point number x, uniformly distributed in the range 0 &lt;= x &lt; 1. </para>
</para>

<para><formalpara><title>Returns</title>

<para>random double precision number </para>
</formalpara>
</para>
<para>
Definition at line 203 of file Random.h.</para>
<para>
Referenced by drawFrom(), gaussian(), getPoint(), metropolis(), uniformInt(), and unitVector().</para>
    </section><anchor xml:id="_classUtil_1_1Random_1a3beaaca47a8a62535b86b545061574ce"/>    <section>
    <title>uniform()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>uniform</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>uniform</secondary></indexterm>
<para><computeroutput>double Util::Random::uniform (double range1, double range2)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return a random floating point number x, uniformly distributed in the range range1 &lt;= x &lt; range2. </para>
</para>

<para><formalpara><title>Returns</title>

<para>random double precision number </para>
</formalpara>
</para>
<para>
Definition at line 212 of file Random.h.</para>
    </section><anchor xml:id="_classUtil_1_1Random_1a2a7f4c20d13a3ea0bc532c224aecc40e"/>    <section>
    <title>uniformInt()</title>
<indexterm><primary>uniformInt</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>uniformInt</secondary></indexterm>
<para><computeroutput>long Util::Random::uniformInt (long range1, long range2)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return random long int x uniformly distributed in range1 &lt;= x &lt; range2. </para>
</para>

<para>Parameters range1 and range2 must be within the range of long integers.</para>

<para><formalpara><title>Returns</title>

<para>random integer </para>
</formalpara>
</para>
<para>
Definition at line 224 of file Random.h.</para>
<para>
References uniform().</para>
    </section><anchor xml:id="_classUtil_1_1Random_1a1b4a276aed589e7c73f33e2d22a8ebb5"/>    <section>
    <title>getPoint()</title>
<indexterm><primary>getPoint</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>getPoint</secondary></indexterm>
<para><computeroutput>void Util::Random::getPoint (double minR[], double maxR[], double r[])<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Generate a random point in a box. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>minR[]</entry>
                                <entry>
<para>array of minimum coordinate values along three axes </para>
</entry>
                            </row>
                            <row>
                                <entry>maxR[]</entry>
                                <entry>
<para>array of maximum coordinate values along three axes </para>
</entry>
                            </row>
                            <row>
                                <entry>r[]</entry>
                                <entry>
<para>random position such that minR[axis] &lt; r[axis] &lt; maxR[axis] </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 251 of file Random.h.</para>
<para>
References uniform().</para>
    </section><anchor xml:id="_classUtil_1_1Random_1ae4056fb996c7072ec2a8815d818c7102"/>    <section>
    <title>gaussian()</title>
<indexterm><primary>gaussian</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>gaussian</secondary></indexterm>
<para><computeroutput>double Util::Random::gaussian (void )</computeroutput></para><para>

<para>Return a Gaussian random number with zero average and unit variance. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Gaussian distributed random number. </para>
</formalpara>
</para>
<para>
Definition at line 92 of file Random.cpp.</para>
<para>
References uniform().</para>
<para>
Referenced by Util::Ar1Process::init(), and Util::Ar1Process::operator()().</para>
    </section><anchor xml:id="_classUtil_1_1Random_1a790b5d37cebb4f9d5bf711eba68d0948"/>    <section>
    <title>unitVector()</title>
<indexterm><primary>unitVector</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>unitVector</secondary></indexterm>
<para><computeroutput>void Util::Random::unitVector (<link linkend="_classUtil_1_1Vector">Vector</link> &amp; v)</computeroutput></para><para>

<para>Generate unit vector with uniform probability over the unit sphere. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>v</entry>
                                <entry>
<para>random unit vector (upon return) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 122 of file Random.cpp.</para>
<para>
References uniform().</para>
    </section><anchor xml:id="_classUtil_1_1Random_1aca8c04b92484ed95768827d6ad411e40"/>    <section>
    <title>metropolis()</title>
<indexterm><primary>metropolis</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>metropolis</secondary></indexterm>
<para><computeroutput>bool Util::Random::metropolis (double ratio)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Metropolis algorithm for whether to accept a MC move. </para>
</para>

<para>If ratio &gt; 1, this function return true. If 0 &lt; ratio &lt; 1, this function returns true with probability ratio, and false with probability 1 - ratio.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ratio</entry>
                                <entry>
<para>ratio of old to new equilibrium weights </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if accepted, false if rejected </para>
</formalpara>
</para>
<para>
Definition at line 260 of file Random.h.</para>
<para>
References uniform().</para>
    </section><anchor xml:id="_classUtil_1_1Random_1af1c8a9ff314e8aa7d802da8e0b59792b"/>    <section>
    <title>drawFrom()</title>
<indexterm><primary>drawFrom</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>drawFrom</secondary></indexterm>
<para><computeroutput>long Util::Random::drawFrom (double probability[], long size)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Choose one of several outcomes with a specified set of probabilities. </para>
</para>

<para>Precondition: Elements of probability array must add to 1.0</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>probability[]</entry>
                                <entry>
<para>array of probabilities, for indices 0,...,size-1 </para>
</entry>
                            </row>
                            <row>
                                <entry>size</entry>
                                <entry>
<para>number of options</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>random integer index of element of probability[] array </para>
</formalpara>
</para>
<para>
Definition at line 237 of file Random.h.</para>
<para>
References uniform().</para>
    </section><anchor xml:id="_classUtil_1_1Random_1afe74c68515ca9266a504360f96ca2e01"/>    <section>
    <title>serialize()</title>
<indexterm><primary>serialize</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>serialize</secondary></indexterm>
<computeroutput>template&lt;class Archive &gt; </computeroutput><para><computeroutput>void Util::Random::serialize (Archive &amp; ar, const unsigned int version)</computeroutput></para><para>

<para>Serialize to/from an archive. </para>
</para>
<para>
Definition at line 284 of file Random.h.</para>
    </section><anchor xml:id="_classUtil_1_1Random_1aee711f2c8b484046b148af207950c15d"/>    <section>
    <title>seed()</title>
<indexterm><primary>seed</primary><secondary>Util::Random</secondary></indexterm>
<indexterm><primary>Util::Random</primary><secondary>seed</secondary></indexterm>
<para><computeroutput>long Util::Random::seed ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Returns value of random seed (private member variable seed_). </para>
</para>

<para><formalpara><title>Returns</title>

<para>value of random number generator seed. </para>
</formalpara>
</para>
<para>
Definition at line 277 of file Random.h.</para>
<para>
Referenced by setSeed().</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
Random.hRandom.cpp</section>
</section>
