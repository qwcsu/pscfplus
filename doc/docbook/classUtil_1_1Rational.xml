<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1Rational">
<title>Util::Rational Class Reference</title>
<indexterm><primary>Util::Rational</primary></indexterm>
<para>

<para>A <link linkend="_classUtil_1_1Rational">Rational</link> number (a ratio of integers). </para>
 
</para>
<para>
<computeroutput>#include &lt;Rational.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
<simplesect><title>Constructors</title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Rational_1a50518df8936b805e6584ed714cc3d51d">Rational</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational_1aa3592dc56a8b0350a8afbe213831c647">Rational</link> (int <link linkend="_classUtil_1_1Rational_1a179eb99ab6617d219299d9cf55e4184a">num</link>, int <link linkend="_classUtil_1_1Rational_1ad6bc5e8b4a3ecdf51823cb857292cf63">den</link>)</para>

<para>Constructor, explicit numerator and denominator. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational_1a681c759e7d5950430e242f50b0ca3cd7">Rational</link> (int number)</para>

<para>Constructor, construct from integer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational_1afb38da9417096436233e106e771d50c9">Rational</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;v)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational_1af8f49b2e820360775163f95940725557">~Rational</link> ()</para>

<para>Destructor. </para>
</listitem>
        </itemizedlist>
</simplesect>
</simplesect>
<simplesect><title>Assignment and Conversion.</title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> &amp; <link linkend="_classUtil_1_1Rational_1aa9f0e6d34fb48d35f8d98d2cb6a23654">operator=</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;other)</para>

<para>Copy assignment from another <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> &amp; <link linkend="_classUtil_1_1Rational_1ada73556bc028e68e1a38b78b2c143b92">operator=</link> (int other)</para>

<para>Assignment from integer. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Arithmetic Assignment Operators</title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> &amp; <link linkend="_classUtil_1_1Rational_1a90244a31df764fbc25f80a551fe196ff">operator+=</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Add another rational to this one. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> &amp; <link linkend="_classUtil_1_1Rational_1afbf5e1f78abf5c581e7e6a49ba8ad17b">operator+=</link> (int a)</para>

<para>Add an integer to this rational. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> &amp; <link linkend="_classUtil_1_1Rational_1ab65d686104a35f3275a94f04d57f09ce">operator-=</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Subtract another rational from this one. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> &amp; <link linkend="_classUtil_1_1Rational_1ac0fa158e41ad0c721db92d21c41d206b">operator-=</link> (int)</para>

<para>Subtract an integer from this rational. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> &amp; <link linkend="_classUtil_1_1Rational_1a61416b3a30c56aa4f44c147ca5fb1f8b">operator*=</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Multiply this rational by another. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> &amp; <link linkend="_classUtil_1_1Rational_1a2b5226fae5fe4ca9f0fd2d0c2ba1aac3">operator*=</link> (int a)</para>

<para>Multiply this rational by an integer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> &amp; <link linkend="_classUtil_1_1Rational_1a486a5c3280840ea8be55eac29d3a9b65">operator/=</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Divide this rational by another. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> &amp; <link linkend="_classUtil_1_1Rational_1ac5e5faf6e90f3e791ff7d2d3cb36f28e">operator/=</link> (int a)</para>

<para>Divide this rational by an integer. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Accessors    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_classUtil_1_1Rational_1a179eb99ab6617d219299d9cf55e4184a">num</link> () const</para>

<para>Return numerator. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1Rational_1ad6bc5e8b4a3ecdf51823cb857292cf63">den</link> () const</para>

<para>Return denominator. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational_1afff076c544ab3c18efcd3c44d11c0bc9">operator double</link> () const</para>

<para>Cast (convert) to double precision floating point. </para>
</listitem>
            <listitem><para>template&lt;class Archive &gt; </para><para>void <link linkend="_classUtil_1_1Rational_1afd527697e72e14075814e2d0162dee12">serialize</link> (Archive &amp;ar, const unsigned int version)</para>

<para>Serialize to/from an archive. </para>
</listitem>
            <listitem><para>static void <link linkend="_classUtil_1_1Rational_1a9596b285f9afceb25ca3081bf861234a">commitMpiType</link> ()</para>

<para>Commit MPI datatype <link linkend="_classUtil_1_1MpiTraits_3_01Rational_01_4_1a8abbce2f5a068f876f3456ea7fd65c56">MpiTraits&lt;Rational&gt;::type</link>. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_classUtil_1_1Rational_1afc0a85ebf4bfdddab9b747bdb2cb1f94">operator+</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;b)</para>

<para>Compute sum of two rationals. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_classUtil_1_1Rational_1a8b6e28e5c0b8c6e48f750d83e489f4f5">operator+</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, int b)</para>

<para>Compute sum of rational and integer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_classUtil_1_1Rational_1af8a49b12b42a23d0e9afcae42572b1f7">operator-</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;b)</para>

<para>Compute difference of rationals. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_classUtil_1_1Rational_1a647797a22bba55b75ada95a9dd275d58">operator-</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, int b)</para>

<para>Compute difference of rational and integer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_classUtil_1_1Rational_1ac8215289eed1fd99a08c3c7be99682b5">operator-</link> (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Compute difference of integer and rational. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_classUtil_1_1Rational_1a809f3d77774d9dff9f6c0d901358e42a">operator*</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;b)</para>

<para>Compute product of rationals. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_classUtil_1_1Rational_1ab0797b31398965285b2f51029154cf62">operator*</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, int b)</para>

<para>Compute product of rational and integer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_classUtil_1_1Rational_1afed8bc93ccbaf2aaee6507881c4c41c3">operator/</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;b)</para>

<para>Compute quotient of two rationals. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_classUtil_1_1Rational_1a628b72d48b29aba13426b5a3feed4cbc">operator/</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, int b)</para>

<para>Compute quotient <link linkend="_classUtil_1_1Rational">Rational</link> divided by integer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_classUtil_1_1Rational_1a191646b620422a8d9a80b2355bfb54c9">operator/</link> (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Compute quotient integer divided by <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Rational_1a6eb6c01585edb09ba10b269cefda130d">operator==</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;b)</para>

<para>Equality operators. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Rational_1af6dd406bfc2b62a576b0472eb5ce7f9a">operator==</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, int b)</para>

<para>Equality operator for a <link linkend="_classUtil_1_1Rational">Rational</link> and an integer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_classUtil_1_1Rational_1a5b8977086fac5a8eeb755916bdeb0e0c">operator-</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Unary negation of <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_classUtil_1_1Rational_1ace1fb2e48d17c6b4937d89e9676e3a39">operator&lt;&lt;</link> (std::ostream &amp;out, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;rational)</para>

<para>Output stream inserter for a <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A <link linkend="_classUtil_1_1Rational">Rational</link> number (a ratio of integers). </para>



<para>A rational is always stored in a standard reduced form in which the denominator is a positive integer and the numerator and denominator have no common divisors other than unity. All integers, including zero, are stored with a denominator of 1. </para>
<para>
Definition at line 33 of file Rational.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1Rational_1a50518df8936b805e6584ed714cc3d51d"/>    <section>
    <title>Rational()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Rational</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>Rational</secondary></indexterm>
<para><computeroutput>Util::Rational::Rational ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
<para>
Definition at line 271 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1aa3592dc56a8b0350a8afbe213831c647"/>    <section>
    <title>Rational()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Rational</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>Rational</secondary></indexterm>
<para><computeroutput>Util::Rational::Rational (int num, int den)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor, explicit numerator and denominator. </para>
</para>

<para>Denominator is reduced to greatest common divisor before return.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>num</entry>
                                <entry>
<para>numerator </para>
</entry>
                            </row>
                            <row>
                                <entry>den</entry>
                                <entry>
<para>denominator </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 280 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a681c759e7d5950430e242f50b0ca3cd7"/>    <section>
    <title>Rational()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Rational</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>Rational</secondary></indexterm>
<para><computeroutput>Util::Rational::Rational (int number)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor, construct from integer. </para>
</para>

<para>Creates a rational with a denominator == 1.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>number</entry>
                                <entry>
<para>integer number. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 289 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1afb38da9417096436233e106e771d50c9"/>    <section>
    <title>Rational()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Rational</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>Rational</secondary></indexterm>
<para><computeroutput>Util::Rational::Rational (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>v</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> to be copied </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 298 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1af8f49b2e820360775163f95940725557"/>    <section>
    <title>~Rational()</title>
<indexterm><primary>~Rational</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>~Rational</secondary></indexterm>
<para><computeroutput>Util::Rational::~Rational ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 75 of file Rational.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1Rational_1aa9f0e6d34fb48d35f8d98d2cb6a23654"/>    <section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> &amp; Util::Rational::operator= (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy assignment from another <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> to assign. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 307 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1ada73556bc028e68e1a38b78b2c143b92"/>    <section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> &amp; Util::Rational::operator= (int other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Assignment from integer. </para>
</para>

<para>Creates an integer using a denominator == 1.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>integer to assign. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 318 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a90244a31df764fbc25f80a551fe196ff"/>    <section>
    <title>operator+=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> &amp; Util::Rational::operator+= (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Add another rational to this one. </para>
</para>

<para>Upon return, *this = this + a.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>increment (input) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 331 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1afbf5e1f78abf5c581e7e6a49ba8ad17b"/>    <section>
    <title>operator+=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator+=</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> &amp; Util::Rational::operator+= (int a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Add an integer to this rational. </para>
</para>

<para>Upon return, *this = this + a.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>increment (input) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 343 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1ab65d686104a35f3275a94f04d57f09ce"/>    <section>
    <title>operator-=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator-=</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> &amp; Util::Rational::operator-= (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Subtract another rational from this one. </para>
</para>

<para>Upon return, *this = this + a.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>rational decrement (input) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 354 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1ac0fa158e41ad0c721db92d21c41d206b"/>    <section>
    <title>operator-=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-=</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator-=</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> &amp; Util::Rational::operator-= (int a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Subtract an integer from this rational. </para>
</para>

<para>Upon return, *this = this + a.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>integer decrement (input) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 366 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a61416b3a30c56aa4f44c147ca5fb1f8b"/>    <section>
    <title>operator*=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator*=</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> &amp; Util::Rational::operator*= (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Multiply this rational by another. </para>
</para>

<para>Upon return, *this = this*a.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> number to multiply this by (input) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 377 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a2b5226fae5fe4ca9f0fd2d0c2ba1aac3"/>    <section>
    <title>operator*=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator*=</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> &amp; Util::Rational::operator*= (int a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Multiply this rational by an integer. </para>
</para>

<para>Upon return, *this = this*a.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>integer to multiply this by (input) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 389 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a486a5c3280840ea8be55eac29d3a9b65"/>    <section>
    <title>operator/=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator/=</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator/=</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> &amp; Util::Rational::operator/= (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Divide this rational by another. </para>
</para>

<para>Upon return, *this = this*a.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>rational number to divide this by (input) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 400 of file Rational.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1ac5e5faf6e90f3e791ff7d2d3cb36f28e"/>    <section>
    <title>operator/=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator/=</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator/=</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> &amp; Util::Rational::operator/= (int a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Divide this rational by an integer. </para>
</para>

<para>Upon return, *this = this*a.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>integer to divide this by (input) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 415 of file Rational.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a179eb99ab6617d219299d9cf55e4184a"/>    <section>
    <title>num()</title>
<indexterm><primary>num</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>num</secondary></indexterm>
<para><computeroutput>int Util::Rational::num ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return numerator. </para>
</para>
<para>
Definition at line 431 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1ad6bc5e8b4a3ecdf51823cb857292cf63"/>    <section>
    <title>den()</title>
<indexterm><primary>den</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>den</secondary></indexterm>
<para><computeroutput>int Util::Rational::den ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return denominator. </para>
</para>
<para>
Definition at line 438 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1afff076c544ab3c18efcd3c44d11c0bc9"/>    <section>
    <title>operator double()</title>
<indexterm><primary>operator double</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator double</secondary></indexterm>
<para><computeroutput>Util::Rational::operator double ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Cast (convert) to double precision floating point. </para>
</para>

<para><formalpara><title>Returns</title>

<para>double precision representation of this. </para>
</formalpara>
</para>
<para>
Definition at line 445 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1afd527697e72e14075814e2d0162dee12"/>    <section>
    <title>serialize()</title>
<indexterm><primary>serialize</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>serialize</secondary></indexterm>
<computeroutput>template&lt;class Archive &gt; </computeroutput><para><computeroutput>void Util::Rational::serialize (Archive &amp; ar, const unsigned int version)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Serialize to/from an archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>archive </para>
</entry>
                            </row>
                            <row>
                                <entry>version</entry>
                                <entry>
<para>archive version id </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 454 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a9596b285f9afceb25ca3081bf861234a"/>    <section>
    <title>commitMpiType()</title>
<indexterm><primary>commitMpiType</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>commitMpiType</secondary></indexterm>
<para><computeroutput>static void Util::Rational::commitMpiType ( )<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Commit MPI datatype <link linkend="_classUtil_1_1MpiTraits_3_01Rational_01_4_1a8abbce2f5a068f876f3456ea7fd65c56">MpiTraits&lt;Rational&gt;::type</link>. </para>
</para>
</section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_classUtil_1_1Rational_1afc0a85ebf4bfdddab9b747bdb2cb1f94"/>    <section>
    <title>operator+<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> operator+ (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; b)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Compute sum of two rationals. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st argument </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2st argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>sum a + b </para>
</formalpara>
</para>
<para>
Definition at line 490 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a8b6e28e5c0b8c6e48f750d83e489f4f5"/>    <section>
    <title>operator+<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> operator+ (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, int b)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Compute sum of rational and integer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>sum a + b </para>
</formalpara>
</para>
<para>
Definition at line 505 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1af8a49b12b42a23d0e9afcae42572b1f7"/>    <section>
    <title>operator-<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> operator- (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; b)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Compute difference of rationals. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st argument </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2st argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>difference a - b </para>
</formalpara>
</para>
<para>
Definition at line 530 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a647797a22bba55b75ada95a9dd275d58"/>    <section>
    <title>operator-<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> operator- (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, int b)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Compute difference of rational and integer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>difference a - b </para>
</formalpara>
</para>
<para>
Definition at line 545 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1ac8215289eed1fd99a08c3c7be99682b5"/>    <section>
    <title>operator-<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> operator- (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Compute difference of integer and rational. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument </para>
</entry>
                            </row>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>difference b - a </para>
</formalpara>
</para>
<para>
Definition at line 559 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a809f3d77774d9dff9f6c0d901358e42a"/>    <section>
    <title>operator*<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> operator* (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; b)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Compute product of rationals. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st <link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2st <link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>product a*b </para>
</formalpara>
</para>
<para>
Definition at line 573 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1ab0797b31398965285b2f51029154cf62"/>    <section>
    <title>operator*<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> operator* (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, int b)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Compute product of rational and integer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>product a*b </para>
</formalpara>
</para>
<para>
Definition at line 588 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1afed8bc93ccbaf2aaee6507881c4c41c3"/>    <section>
    <title>operator/<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator/</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> operator/ (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; b)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Compute quotient of two rationals. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st <link linkend="_classUtil_1_1Rational">Rational</link> argument (numerator) </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2st <link linkend="_classUtil_1_1Rational">Rational</link> argument (denominator) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>ratio a/b </para>
</formalpara>
</para>
<para>
Definition at line 610 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a628b72d48b29aba13426b5a3feed4cbc"/>    <section>
    <title>operator/<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator/</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> operator/ (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, int b)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Compute quotient <link linkend="_classUtil_1_1Rational">Rational</link> divided by integer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument (numerator) </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument (denominator) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>ratio a/b </para>
</formalpara>
</para>
<para>
Definition at line 628 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a191646b620422a8d9a80b2355bfb54c9"/>    <section>
    <title>operator/<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator/</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> operator/ (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Compute quotient integer divided by <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument (numerator) </para>
</entry>
                            </row>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument (denominator) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>ratio b/a </para>
</formalpara>
</para>
<para>
Definition at line 644 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a6eb6c01585edb09ba10b269cefda130d"/>    <section>
    <title>operator==<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool operator== (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; b)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Equality operators. </para>
</para>

<para>Equality operator for two <link linkend="_classUtil_1_1Rational">Rational</link> numbers.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st <link linkend="_classUtil_1_1Rational">Rational</link> </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2nd <link linkend="_classUtil_1_1Rational">Rational</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if equal, false otherwise </para>
</formalpara>
</para>
<para>
Definition at line 674 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1af6dd406bfc2b62a576b0472eb5ce7f9a"/>    <section>
    <title>operator==<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool operator== (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, int b)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Equality operator for a <link linkend="_classUtil_1_1Rational">Rational</link> and an integer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> number </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer number </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if equal, false otherwise </para>
</formalpara>
</para>
<para>
Definition at line 684 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1a5b8977086fac5a8eeb755916bdeb0e0c"/>    <section>
    <title>operator-<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> operator- (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Unary negation of <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> number </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>negation -a </para>
</formalpara>
</para>
<para>
Definition at line 661 of file Rational.h.</para>
    </section><anchor xml:id="_classUtil_1_1Rational_1ace1fb2e48d17c6b4937d89e9676e3a39"/>    <section>
    <title>operator&lt;&lt;</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util::Rational</secondary></indexterm>
<indexterm><primary>Util::Rational</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; out, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; rational)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Output stream inserter for a <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</para>

<para>Output elements of a rational to stream, without line breaks. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                            <row>
                                <entry>rational</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> to be written to stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified output stream </para>
</formalpara>
</para>
<para>
Definition at line 16 of file Rational.cpp.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Rational.h</section>
</section>
