<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1Setable">
<title>Util::Setable&lt; T &gt; Class Template Reference</title>
<indexterm><primary>Util::Setable&lt; T &gt;</primary></indexterm>
<para>

<para>Template for a value that can be set or declared null (i.e., unknown). </para>
 
</para>
<para>
<computeroutput>#include &lt;Setable.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Setable_1a4a0820c2ff52c216b875ce3f4558f458">Setable</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Setable_1a5becf77ef5a191ba65b255a55259dda5">Setable</link> (const <link linkend="_classUtil_1_1Setable">Setable</link>&lt; T &gt; &amp;other)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Setable_1a6ac4a3dcfd5767805ff6d25c7b8efb71">Setable</link> (const T &amp;<link linkend="_classUtil_1_1Setable_1a7191b64bd103c2e39120e12fd453b540">value</link>)</para>

<para>Construct from T value (explicit). </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Setable">Setable</link>&lt; T &gt; &amp; <link linkend="_classUtil_1_1Setable_1a65ac19b4ef112486b372c480a202b864">operator=</link> (const <link linkend="_classUtil_1_1Setable">Setable</link>&lt; T &gt; &amp;other)</para>

<para>Assignment from another Setable&lt;T&gt; object. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Setable">Setable</link>&lt; T &gt; &amp; <link linkend="_classUtil_1_1Setable_1a65502c843ce57d45295b0e6c83d8d910">operator=</link> (const T &amp;<link linkend="_classUtil_1_1Setable_1a7191b64bd103c2e39120e12fd453b540">value</link>)</para>

<para>Assignment from T value. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Setable_1a55b427d5a875e0b74c58d050306dd20d">set</link> (const T &amp;<link linkend="_classUtil_1_1Setable_1a7191b64bd103c2e39120e12fd453b540">value</link>)</para>

<para>Set the value and mark as set. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Setable_1a9273330685b8af63ffba35c28a3631fb">unset</link> ()</para>

<para>Unset the value (mark as unknown). </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Setable_1a8ec573c9e46a3e531e26bcf72522ef13">isSet</link> () const</para>

<para>Is this object set (is the value known)? </para>
</listitem>
            <listitem><para>const T &amp; <link linkend="_classUtil_1_1Setable_1a7191b64bd103c2e39120e12fd453b540">value</link> () const</para>

<para>Return value (if set). </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Setable_1a589788f3143f3efd84d81ac0b6fce085">isValid</link> (MPI::Intracomm &amp;communicator) const</para>

<para>Test consistency of states on different processors. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class T&gt;
class Util::Setable&lt; T &gt;</title></simplesect>


<para>Template for a value that can be set or declared null (i.e., unknown). </para>



<para>Type T must be copy-constructable and have an assignment (=) operator.</para>

<para>Convention for MPI programs: In parallel MPI programs in which a value for a variable is calculated by a reduce operation and is set only on a master processor, a default value should be set on all other processors whenever the true value is set on the master. This indicates on all processors that the value is known, though it may only be available on the master processor. Similarly, when a value is unset, the <link linkend="_classUtil_1_1Setable_1a9273330685b8af63ffba35c28a3631fb">unset()</link> function should be called on all processors. This convention allows the <link linkend="_classUtil_1_1Setable_1a8ec573c9e46a3e531e26bcf72522ef13">isSet()</link> function to be used on all processors to query whether the value is known, which may be then be used to decide when to initiate a recomputation that may require computation on all processors. This convention is imposed by the <link linkend="_classUtil_1_1Setable_1a589788f3143f3efd84d81ac0b6fce085">isValid()</link> function, which requires that isSet have the same value on all processors within a communicator (i.e., all true or all false). </para>
<para>
Definition at line 38 of file Setable.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1Setable_1a4a0820c2ff52c216b875ce3f4558f458"/>    <section>
    <title>Setable()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>Setable</primary><secondary>Util::Setable&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::Setable&lt; T &gt;</primary><secondary>Setable</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Setable">Util::Setable</link>&lt; T &gt;::<link linkend="_classUtil_1_1Setable">Setable</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
<para>
Definition at line 46 of file Setable.h.</para>
    </section><anchor xml:id="_classUtil_1_1Setable_1a5becf77ef5a191ba65b255a55259dda5"/>    <section>
    <title>Setable()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>Setable</primary><secondary>Util::Setable&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::Setable&lt; T &gt;</primary><secondary>Setable</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Setable">Util::Setable</link>&lt; T &gt;::<link linkend="_classUtil_1_1Setable">Setable</link> (const <link linkend="_classUtil_1_1Setable">Setable</link>&lt; T &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Copy constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Setable">Setable</link> object being copied. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 56 of file Setable.h.</para>
    </section><anchor xml:id="_classUtil_1_1Setable_1a6ac4a3dcfd5767805ff6d25c7b8efb71"/>    <section>
    <title>Setable()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>Setable</primary><secondary>Util::Setable&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::Setable&lt; T &gt;</primary><secondary>Setable</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Setable">Util::Setable</link>&lt; T &gt;::<link linkend="_classUtil_1_1Setable">Setable</link> (const T &amp; value)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Construct from T value (explicit). </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>value of wrapped object </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 66 of file Setable.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1Setable_1a65ac19b4ef112486b372c480a202b864"/>    <section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Util::Setable&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::Setable&lt; T &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Setable">Setable</link>&lt;T&gt;&amp; <link linkend="_classUtil_1_1Setable">Util::Setable</link>&lt; T &gt;::operator= (const <link linkend="_classUtil_1_1Setable">Setable</link>&lt; T &gt; &amp; other)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Assignment from another Setable&lt;T&gt; object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>object on RHS of assignment </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 76 of file Setable.h.</para>
    </section><anchor xml:id="_classUtil_1_1Setable_1a65502c843ce57d45295b0e6c83d8d910"/>    <section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>Util::Setable&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::Setable&lt; T &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Setable">Setable</link>&lt;T&gt;&amp; <link linkend="_classUtil_1_1Setable">Util::Setable</link>&lt; T &gt;::operator= (const T &amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Assignment from T value. </para>
</para>

<para>Equivalent to set(value). Sets the value and marks it as set.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>T value on RHS of assignment </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>this object </para>
</formalpara>
</para>
<para>
Definition at line 95 of file Setable.h.</para>
<para>
References Util::Setable&lt; T &gt;::value().</para>
    </section><anchor xml:id="_classUtil_1_1Setable_1a55b427d5a875e0b74c58d050306dd20d"/>    <section>
    <title>set()</title>
<indexterm><primary>set</primary><secondary>Util::Setable&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::Setable&lt; T &gt;</primary><secondary>set</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Setable">Util::Setable</link>&lt; T &gt;::set (const T &amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set the value and mark as set. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>value to be assigned. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 107 of file Setable.h.</para>
<para>
References Util::Setable&lt; T &gt;::value().</para>
    </section><anchor xml:id="_classUtil_1_1Setable_1a9273330685b8af63ffba35c28a3631fb"/>    <section>
    <title>unset()</title>
<indexterm><primary>unset</primary><secondary>Util::Setable&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::Setable&lt; T &gt;</primary><secondary>unset</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Setable">Util::Setable</link>&lt; T &gt;::unset ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Unset the value (mark as unknown). </para>
</para>
<para>
Definition at line 116 of file Setable.h.</para>
    </section><anchor xml:id="_classUtil_1_1Setable_1a8ec573c9e46a3e531e26bcf72522ef13"/>    <section>
    <title>isSet()</title>
<indexterm><primary>isSet</primary><secondary>Util::Setable&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::Setable&lt; T &gt;</primary><secondary>isSet</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1Setable">Util::Setable</link>&lt; T &gt;::isSet ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this object set (is the value known)? </para>
</para>

<para><formalpara><title>Returns</title>

<para>true if set (known), false if null (unknown). </para>
</formalpara>
</para>
<para>
Definition at line 124 of file Setable.h.</para>
    </section><anchor xml:id="_classUtil_1_1Setable_1a7191b64bd103c2e39120e12fd453b540"/>    <section>
    <title>value()</title>
<indexterm><primary>value</primary><secondary>Util::Setable&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::Setable&lt; T &gt;</primary><secondary>value</secondary></indexterm>
<computeroutput>template&lt;class T &gt; </computeroutput><para><computeroutput>const T&amp; <link linkend="_classUtil_1_1Setable">Util::Setable</link>&lt; T &gt;::value ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return value (if set). </para>
</para>

<para>Throws an <link linkend="_classUtil_1_1Exception">Exception</link> if value is not set. </para>
<para>
Definition at line 132 of file Setable.h.</para>
<para>
References UTIL_THROW.</para>
<para>
Referenced by Util::Setable&lt; T &gt;::operator=(), and Util::Setable&lt; T &gt;::set().</para>
    </section><anchor xml:id="_classUtil_1_1Setable_1a589788f3143f3efd84d81ac0b6fce085"/>    <section>
    <title>isValid()</title>
<indexterm><primary>isValid</primary><secondary>Util::Setable&lt; T &gt;</secondary></indexterm>
<indexterm><primary>Util::Setable&lt; T &gt;</primary><secondary>isValid</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1Setable">Util::Setable</link>&lt; T &gt;::isValid (MPI::Intracomm &amp; communicator) const</computeroutput></para><para>

<para>Test consistency of states on different processors. </para>
</para>

<para>If valid, return true, else throws an <link linkend="_classUtil_1_1Exception">Exception</link>. The state is valid if the value of isSet is the same on all processors. </para>
<para>
Definition at line 163 of file Setable.h.</para>
<para>
References UTIL_THROW.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Setable.h</section>
</section>
