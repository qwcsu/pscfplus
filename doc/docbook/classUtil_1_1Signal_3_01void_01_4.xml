<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1Signal_3_01void_01_4">
<title>Util::Signal&lt; void &gt; Class Reference</title>
<indexterm><primary>Util::Signal&lt; void &gt;</primary></indexterm>
<para>

<para><link linkend="_classUtil_1_1Notifier">Notifier</link> (or subject) in the <link linkend="_classUtil_1_1Observer">Observer</link> design pattern (zero parameters). </para>
 
</para>
<para>
<computeroutput>#include &lt;Signal.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Signal_3_01void_01_4_1ac874fc09caf29d4a723e50d4f0a8b024">Signal</link> ()</para>

<para>Default constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Signal_3_01void_01_4_1af07ffe893650408737edd36bf8bb5ba3">~Signal</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>template&lt;class Observer &gt; </para><para>void <link linkend="_classUtil_1_1Signal_3_01void_01_4_1a705da45edaec1c873f5f0321368196cb">addObserver</link> (<link linkend="_classUtil_1_1Observer">Observer</link> &amp;observer, void(Observer::*methodPtr)())</para>

<para>Register an observer. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Signal_3_01void_01_4_1aa0cf9f5ee4bba045e2762261c8ba2804">clear</link> ()</para>

<para>Clear all observerse from list. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1Signal_3_01void_01_4_1af6afb7693e87bdc2e028b77b493d2a8b">nObserver</link> () const</para>

<para>Get number of registered observers. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Signal_3_01void_01_4_1abcf8e082e4fb3284c36987f8593943a4">notify</link> ()</para>

<para>Notify all observers. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para><link linkend="_classUtil_1_1Notifier">Notifier</link> (or subject) in the <link linkend="_classUtil_1_1Observer">Observer</link> design pattern (zero parameters). </para>



<para>This explicit specialization of Signal&lt;T&gt; provides a notify method that takes no parameters, and that calls methods of each observer object that take no parameters. </para>
<para>
Definition at line 168 of file Signal.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1Signal_3_01void_01_4_1ac874fc09caf29d4a723e50d4f0a8b024"/>    <section>
    <title>Signal()</title>
<indexterm><primary>Signal</primary><secondary>Util::Signal&lt; void &gt;</secondary></indexterm>
<indexterm><primary>Util::Signal&lt; void &gt;</primary><secondary>Signal</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Signal">Util::Signal</link>&lt; void &gt;::<link linkend="_classUtil_1_1Signal">Signal</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor. </para>
</para>
<para>
Definition at line 176 of file Signal.h.</para>
    </section><anchor xml:id="_classUtil_1_1Signal_3_01void_01_4_1af07ffe893650408737edd36bf8bb5ba3"/>    <section>
    <title>~Signal()</title>
<indexterm><primary>~Signal</primary><secondary>Util::Signal&lt; void &gt;</secondary></indexterm>
<indexterm><primary>Util::Signal&lt; void &gt;</primary><secondary>~Signal</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Signal">Util::Signal</link>&lt; void &gt;::~<link linkend="_classUtil_1_1Signal">Signal</link> ( )</computeroutput></para><para>

<para>Destructor. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1Signal_3_01void_01_4_1a705da45edaec1c873f5f0321368196cb"/>    <section>
    <title>addObserver()</title>
<indexterm><primary>addObserver</primary><secondary>Util::Signal&lt; void &gt;</secondary></indexterm>
<indexterm><primary>Util::Signal&lt; void &gt;</primary><secondary>addObserver</secondary></indexterm>
<computeroutput>template&lt;class Observer &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1Signal">Util::Signal</link>&lt; void &gt;::addObserver (<link linkend="_classUtil_1_1Observer">Observer</link> &amp; observer, void(Observer::*)() methodPtr)</computeroutput></para><para>

<para>Register an observer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>observer</entry>
                                <entry>
<para>observer object (invokes method) </para>
</entry>
                            </row>
                            <row>
                                <entry>methodPtr</entry>
                                <entry>
<para>pointer to relevant method </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
    </section><anchor xml:id="_classUtil_1_1Signal_3_01void_01_4_1aa0cf9f5ee4bba045e2762261c8ba2804"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::Signal&lt; void &gt;</secondary></indexterm>
<indexterm><primary>Util::Signal&lt; void &gt;</primary><secondary>clear</secondary></indexterm>
<para><computeroutput>void <link linkend="_classUtil_1_1Signal">Util::Signal</link>&lt; void &gt;::clear ( )</computeroutput></para><para>

<para>Clear all observerse from list. </para>
</para>
    </section><anchor xml:id="_classUtil_1_1Signal_3_01void_01_4_1af6afb7693e87bdc2e028b77b493d2a8b"/>    <section>
    <title>nObserver()</title>
<indexterm><primary>nObserver</primary><secondary>Util::Signal&lt; void &gt;</secondary></indexterm>
<indexterm><primary>Util::Signal&lt; void &gt;</primary><secondary>nObserver</secondary></indexterm>
<para><computeroutput>int <link linkend="_classUtil_1_1Signal">Util::Signal</link>&lt; void &gt;::nObserver ( ) const</computeroutput></para><para>

<para>Get number of registered observers. </para>
</para>
    </section><anchor xml:id="_classUtil_1_1Signal_3_01void_01_4_1abcf8e082e4fb3284c36987f8593943a4"/>    <section>
    <title>notify()</title>
<indexterm><primary>notify</primary><secondary>Util::Signal&lt; void &gt;</secondary></indexterm>
<indexterm><primary>Util::Signal&lt; void &gt;</primary><secondary>notify</secondary></indexterm>
<para><computeroutput>void <link linkend="_classUtil_1_1Signal">Util::Signal</link>&lt; void &gt;::notify ( )</computeroutput></para><para>

<para>Notify all observers. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
Signal.h</section>
</section>
