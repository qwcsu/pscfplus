<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1TensorAverage">
<title>Util::TensorAverage Class Reference</title>
<indexterm><primary>Util::TensorAverage</primary></indexterm>
<para>

<para>Calculates averages of all components of a Tensor-valued variable. </para>
 
</para>
<para>
<computeroutput>#include &lt;TensorAverage.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Util::TensorAverage:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUtil_1_1TensorAverage.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1TensorAverage_1a6895e560502fb8a92f8caa43966a9302">TensorAverage</link> (int blockFactor=2)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1TensorAverage_1ae6ea8da068c0598c9acd266115f76195">~TensorAverage</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1TensorAverage_1a9b78125d5c49ab4b5a2e9c7e031e6a36">setNSamplePerBlock</link> (int <link linkend="_classUtil_1_1TensorAverage_1a12b0e5bb210e78ac199eade38aaadcc4">nSamplePerBlock</link>)</para>

<para>Set nSamplePerBlock. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1TensorAverage_1aa80ddc967d68329ab18e3f3c3ad9709a">readParameters</link> (std::istream &amp;in)</para>

<para>Read parameter nSamplePerBlock from file and initialize. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1TensorAverage_1a829cd46caa6f5cff6369b758a0feba26">loadParameters</link> (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp;ar)</para>

<para>Load internal state from an archive. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1TensorAverage_1a88d6b99a9fbac6185490c5508f8805e4">save</link> (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp;ar)</para>

<para>Save internal state to an archive. </para>
</listitem>
            <listitem><para>template&lt;class Archive &gt; </para><para>void <link linkend="_classUtil_1_1TensorAverage_1a74b359142d7126f07ef6c6615a5bd6f4">serialize</link> (Archive &amp;ar, const unsigned int version)</para>

<para>Serialize this to or from an archive. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1TensorAverage_1aa3c9c75a34fc5e1ef8ca002a493c9ea2">clear</link> ()</para>

<para>Clear all accumulators, set to empty initial state. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1TensorAverage_1af356f4a311b8ea7e8aa3a4e4b7e31efb">sample</link> (const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;value)</para>

<para>Add a sampled value to the ensemble. </para>
</listitem>
            <listitem><para>const <link linkend="_classUtil_1_1Average">Average</link> &amp; <link linkend="_classUtil_1_1TensorAverage_1a33d98fcb28f575591279b1c870c0a36d">operator()</link> (int i, int j)</para>

<para>Access the <link linkend="_classUtil_1_1Average">Average</link> object for one tensor component. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1TensorAverage_1a12b0e5bb210e78ac199eade38aaadcc4">nSamplePerBlock</link> () const</para>

<para>Get number of samples per block average. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1TensorAverage_1a88e74e9a3a116e43ba294bd2628097ac">iBlock</link> () const</para>

<para>Get number of samples in current block average. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1TensorAverage_1a8c9c3cbc46b2289e9a85a673659404ad">isBlockComplete</link> () const</para>

<para>Is the current block average complete? </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Calculates averages of all components of a Tensor-valued variable. </para>



<para><link linkend="_classUtil_1_1TensorAverage">TensorAverage</link> is a simple container for an array of <link linkend="_classUtil_1_1Average">Average</link> objects, each of which calculates averages and error estimates for one component of a <link linkend="_classUtil_1_1Tensor">Tensor</link>. </para>
<para>
Definition at line 32 of file TensorAverage.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1TensorAverage_1a6895e560502fb8a92f8caa43966a9302"/>    <section>
    <title>TensorAverage()</title>
<indexterm><primary>TensorAverage</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>TensorAverage</secondary></indexterm>
<para><computeroutput>Util::TensorAverage::TensorAverage (int blockFactor = <computeroutput>2</computeroutput>
)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>blockFactor</entry>
                                <entry>
<para>ratio of block sizes for subsequent stages. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 21 of file TensorAverage.cpp.</para>
<para>
References Util::Dimension, and Util::ParamComposite::setClassName().</para>
    </section><anchor xml:id="_classUtil_1_1TensorAverage_1ae6ea8da068c0598c9acd266115f76195"/>    <section>
    <title>~TensorAverage()</title>
<indexterm><primary>~TensorAverage</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>~TensorAverage</secondary></indexterm>
<para><computeroutput>Util::TensorAverage::~TensorAverage ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 40 of file TensorAverage.cpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1TensorAverage_1a9b78125d5c49ab4b5a2e9c7e031e6a36"/>    <section>
    <title>setNSamplePerBlock()</title>
<indexterm><primary>setNSamplePerBlock</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>setNSamplePerBlock</secondary></indexterm>
<para><computeroutput>void Util::TensorAverage::setNSamplePerBlock (int nSamplePerBlock)</computeroutput></para><para>

<para>Set nSamplePerBlock. </para>
</para>

<para>If nSamplePerBlock &gt; 0, the sample function will increment block averages, and reset the average every nSamplePerBlock samples.</para>

<para>If nSamplePerBlock == 0, block averaging is disabled. This is the default (i.e., the initial value set in the constructor).</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>nSamplePerBlock</entry>
                                <entry>
<para>number of samples per block average output </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 46 of file TensorAverage.cpp.</para>
<para>
References Util::Dimension, nSamplePerBlock(), and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1TensorAverage_1aa80ddc967d68329ab18e3f3c3ad9709a"/>    <section>
    <title>readParameters()</title>
<indexterm><primary>readParameters</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>readParameters</secondary></indexterm>
<para><computeroutput>void Util::TensorAverage::readParameters (std::istream &amp; in)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Read parameter nSamplePerBlock from file and initialize. </para>
</para>

<para>See <link linkend="_classUtil_1_1TensorAverage_1a9b78125d5c49ab4b5a2e9c7e031e6a36">setNSamplePerBlock()</link> for discussion of value.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1a172a3a656b5829c8d758424ad09a22a6">Util::ParamComposite</link>.</para>
<para>
Definition at line 65 of file TensorAverage.cpp.</para>
<para>
References Util::Dimension, and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1TensorAverage_1a829cd46caa6f5cff6369b758a0feba26"/>    <section>
    <title>loadParameters()</title>
<indexterm><primary>loadParameters</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>loadParameters</secondary></indexterm>
<para><computeroutput>void Util::TensorAverage::loadParameters (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp; ar)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Load internal state from an archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>input/loading archive </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1adec07dcba0895ba69463147314cde7ce">Util::ParamComposite</link>.</para>
<para>
Definition at line 84 of file TensorAverage.cpp.</para>
<para>
References Util::Dimension, and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1TensorAverage_1a88d6b99a9fbac6185490c5508f8805e4"/>    <section>
    <title>save()</title>
<indexterm><primary>save</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>save</secondary></indexterm>
<para><computeroutput>void Util::TensorAverage::save (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp; ar)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Save internal state to an archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>output/saving archive </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1ParamComposite_1a3c430a4e31a9573eadb06ab89d3bf780">Util::ParamComposite</link>.</para>
<para>
Definition at line 104 of file TensorAverage.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1TensorAverage_1a74b359142d7126f07ef6c6615a5bd6f4"/>    <section>
    <title>serialize()</title>
<indexterm><primary>serialize</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>serialize</secondary></indexterm>
<computeroutput>template&lt;class Archive &gt; </computeroutput><para><computeroutput>void Util::TensorAverage::serialize (Archive &amp; ar, const unsigned int version)</computeroutput></para><para>

<para>Serialize this to or from an archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>input or output archive </para>
</entry>
                            </row>
                            <row>
                                <entry>version</entry>
                                <entry>
<para>file version id </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 185 of file TensorAverage.h.</para>
<para>
References Util::Dimension.</para>
    </section><anchor xml:id="_classUtil_1_1TensorAverage_1aa3c9c75a34fc5e1ef8ca002a493c9ea2"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>clear</secondary></indexterm>
<para><computeroutput>void Util::TensorAverage::clear ( )</computeroutput></para><para>

<para>Clear all accumulators, set to empty initial state. </para>
</para>
<para>
Definition at line 110 of file TensorAverage.cpp.</para>
<para>
References Util::Dimension.</para>
    </section><anchor xml:id="_classUtil_1_1TensorAverage_1af356f4a311b8ea7e8aa3a4e4b7e31efb"/>    <section>
    <title>sample()</title>
<indexterm><primary>sample</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>sample</secondary></indexterm>
<para><computeroutput>void Util::TensorAverage::sample (const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; value)</computeroutput></para><para>

<para>Add a sampled value to the ensemble. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>sampled value </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 126 of file TensorAverage.cpp.</para>
<para>
References Util::Dimension.</para>
    </section><anchor xml:id="_classUtil_1_1TensorAverage_1a33d98fcb28f575591279b1c870c0a36d"/>    <section>
    <title>operator()()</title>
<indexterm><primary>operator()</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>operator()</secondary></indexterm>
<para><computeroutput>const <link linkend="_classUtil_1_1Average">Average</link> &amp; Util::TensorAverage::operator() (int i, int j)</computeroutput></para><para>

<para>Access the <link linkend="_classUtil_1_1Average">Average</link> object for one tensor component. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>first index of associated tensor component </para>
</entry>
                            </row>
                            <row>
                                <entry>j</entry>
                                <entry>
<para>second index of associated tensor component </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_classUtil_1_1Average">Average</link> object associated with element (i, j) </para>
</formalpara>
</para>
<para>
Definition at line 147 of file TensorAverage.cpp.</para>
<para>
References Util::Dimension.</para>
    </section><anchor xml:id="_classUtil_1_1TensorAverage_1a12b0e5bb210e78ac199eade38aaadcc4"/>    <section>
    <title>nSamplePerBlock()</title>
<indexterm><primary>nSamplePerBlock</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>nSamplePerBlock</secondary></indexterm>
<para><computeroutput>int Util::TensorAverage::nSamplePerBlock ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get number of samples per block average. </para>
</para>

<para>Returns zero if block averaging is disabled.</para>

<para><formalpara><title>Returns</title>

<para>number of samples per block (or 0 if disabled). </para>
</formalpara>
</para>
<para>
Definition at line 166 of file TensorAverage.h.</para>
<para>
Referenced by setNSamplePerBlock().</para>
    </section><anchor xml:id="_classUtil_1_1TensorAverage_1a88e74e9a3a116e43ba294bd2628097ac"/>    <section>
    <title>iBlock()</title>
<indexterm><primary>iBlock</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>iBlock</secondary></indexterm>
<para><computeroutput>int Util::TensorAverage::iBlock ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get number of samples in current block average. </para>
</para>

<para>Returns 0 if block averaging is disabled (i.e., nSamplePerBlock == 0).</para>

<para><formalpara><title>Returns</title>

<para>number of samples in current block (or 0 if disabled) </para>
</formalpara>
</para>
<para>
Definition at line 172 of file TensorAverage.h.</para>
    </section><anchor xml:id="_classUtil_1_1TensorAverage_1a8c9c3cbc46b2289e9a85a673659404ad"/>    <section>
    <title>isBlockComplete()</title>
<indexterm><primary>isBlockComplete</primary><secondary>Util::TensorAverage</secondary></indexterm>
<indexterm><primary>Util::TensorAverage</primary><secondary>isBlockComplete</secondary></indexterm>
<para><computeroutput>bool Util::TensorAverage::isBlockComplete ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is the current block average complete? </para>
</para>

<para>Returns true iff blocking is enabled and iBlock == nSamplePerBlock</para>

<para><formalpara><title>Returns</title>

<para>(iBlock &gt; 0) &amp;&amp; (iBlock == nSamplePerBlock) </para>
</formalpara>
</para>
<para>
Definition at line 178 of file TensorAverage.h.</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
TensorAverage.hTensorAverage.cpp</section>
</section>
