<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_developer_page">

<para><link linkend="_user_page">User Guide</link> (Prev) &#160; &#160; &#160; &#160; 
<literallayout>&#160;&#xa;</literallayout>
</para>

<para><formalpara><title>Contents:</title></formalpara>
</para>

<para><itemizedlist>
<listitem>

<para><link linkend="_structure_page">4.1 Directory Structure</link>  </para>
</listitem>
<listitem>

<para><link linkend="_code_format_page">4.2 Coding Standards</link> </para>

<para>
<literallayout>&#160;&#xa;</literallayout>
 <link linkend="_user_page">User Guide</link> (Prev) &#160; &#160; &#160; &#160; <link linkend="_index">Main Page</link> (Up) &#160; &#160; &#160; &#160; </para>
</listitem>
</itemizedlist>
</para>
    <section xml:id="_structure_page"><title>4.1 Directory Structure</title>    </section>
<para><link linkend="_developer_page">4 Developer Information</link> (Prev) &#160; &#160; &#160; &#160; <link linkend="_code_format_page">4.2 Coding Standards</link> (Next) 
<literallayout>&#160;&#xa;</literallayout>
</para>

<para>All source files of PSCF+ are in the pscfplus/src/ directory tree. The header and source file for each class are in the same directory. The name of each C++ file is the same as the class name, followed by an extension to indicate file type. We use extension .h to indicate a header file, .tpp to indicate the implementation of a class template, .cpp to indicate a C++ source file, and .cu to indicate a CUDA source file. All class names and corresponding file names are upper space camel (like <link linkend="_classUtil_1_1Vector">Util::Vector</link> or <link linkend="_classPscf_1_1Basis">Pscf::Basis</link>).</para>

<para>The source code in pscfpp/src is divided among two top-level namespaces, named <link linkend="_namespaceUtil">Util</link> and <link linkend="_namespacePscf">Pscf</link>.</para>

<para>The <link linkend="_namespaceUtil">Util</link> namespace contains a collection of utilities for scientific computation that is also used by other projects. All code in the <link linkend="_namespaceUtil">Util</link> namespace is contained in the src/util directory. This directory contains the contents of a separate github git repository (repository dmorse/util) that is imported into the pscfpp as a submodule.</para>

<para>The <link linkend="_namespacePscf">Pscf</link> namespace contains all C++ and CUDA code that is specific to the PSCF+ project. The <link linkend="_namespacePscf">Pscf</link> namespace contains several enclosed namespaces that each contain code that is used only by one program or set of closely related programs.</para>

<para>The main subdirectories of src/ are:</para>

<para><itemizedlist>
<listitem>
<para>src/util/ contains code of utilities for scientific computation that is also used by other projects.</para>
</listitem><listitem>
<para>src/pscf/ contains basic classes in the <link linkend="_namespacePscf">Pscf</link> namespace for polymer self-consistent field calculations, which is accessible to all PSCF+ programs.</para>
</listitem><listitem>
<para>src/pspg/ contains CUDA code of utilities in the <link linkend="_namespacePscf_1_1Pspg">Pscf::Pspg</link> namespace for scientific computation, including encapsulation of fast fourier transform, fast cosine transform, and input/output of omega/phi fields storing in GPU RAM.</para>
</listitem><listitem>
<para>src/pgc/ contains implementation of model system using continuous Gaussian chain model in the <link linkend="_namespacePscf_1_1Pspg_1_1Continuous">Pscf::Pspg::Continuous</link> namespace</para>
</listitem><listitem>
<para>src/pgd/ contains implementation of model system using discrete chain model, including discrete Gaussian and freely-jointed chain, in the <link linkend="_namespacePscf_1_1Pspg_1_1Discrete">Pscf::Pspg::Discrete</link>.</para>
</listitem></itemizedlist>
</para>

<para>
<literallayout>&#160;&#xa;</literallayout>
 <link linkend="_developer_page">4 Developer Information</link> (Prev) &#160; &#160; &#160; &#160; <link linkend="_index">Main Page</link> (Up) &#160; &#160; &#160; &#160; <link linkend="_code_format_page">4.2 Coding Standards</link> (Next) </para>
    <section xml:id="_code_format_page"><title>4.2 Coding Standards</title>    </section>
<para><link linkend="_structure_page">4.1 Directory Structure</link> (Prev) &#160; &#160; &#160; &#160; build_page (Next) 
<literallayout>&#160;&#xa;</literallayout>
</para>

<para><itemizedlist>
<listitem>
<para>Naming Conventions:</para>
</listitem></itemizedlist>
</para>

<para>CamelCase: Use camelCase for variable and function names. Start with a lowercase letter, and capitalize the first letter of each subsequent word within the name. For example: myVariable, calculateTotalCost(). PascalCase: Use PascalCase for class names. Start with an uppercase letter, and capitalize the first letter of each subsequent word within the name. For example: MyClass. UPPER_CASE_WITH_UNDERSCORES: Use uppercase letters and underscores to name constants and macros. For example: PI, MAX_VALUE. Namespace Names: Namespace names should follow the same rules as other identifiers. Typically, they are in lowercase, and underscores can be used to separate words. For example: my_namespace.</para>

<para><itemizedlist>
<listitem>
<para>File Names: File names should generally be in lowercase and use underscores to separate words. For example: my_file_name.cpp.</para>
</listitem><listitem>
<para>Formatting: The code of PSCF+ are reformatted using Prettier, which a free plug-in supported by many editors. Here is the configuration file for Prettier:</para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>{
  &quot;printWidth&quot;: 80,
  &quot;tabWidth&quot;: 4,
  &quot;useTabs&quot;: false,
  &quot;semi&quot;: true,
  &quot;singleQuote&quot;: false,
  &quot;trailingComma&quot;: &quot;none&quot;,
  &quot;bracketSpacing&quot;: true,
  &quot;endOfLine&quot;: &quot;lf&quot;
}
- printWidth: Sets the maximum line length.
- tabWidth: The number of spaces per tab.
- useTabs: Whether to use tabs or spaces for indentation.
- semi: Whether to add semicolons at the end of statements.
- singleQuote: Whether to prefer single quotes over double quotes. 
- trailingComma: Whether to add a trailing comma in multi-line arrays or objects. 
- bracketSpacing: Controls whether spaces are added inside object braces.
- endOfLine: Defines the line ending format, useful for maintaining consistency across different OSes
</computeroutput></literallayout></para>

<para>Please see <link xlink:href="https://prettier.io/">Prettier documentation</link> for details.</para>

<para>
<literallayout>&#160;&#xa;</literallayout>
 <link linkend="_structure_page">4.1 Directory Structure</link> (Prev) &#160; &#160; &#160; &#160; <link linkend="_index">Main Page</link> (Up) &#160; &#160; &#160; &#160; build_page (Next) </para>
</section>
