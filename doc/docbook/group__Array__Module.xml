<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__Array__Module">
<title>Object Arrays</title>
<indexterm><primary>Object Arrays</primary></indexterm>
<para>

<para><link linkend="_classUtil_1_1Array">Array</link> containers that store objects by value, and related iterators. </para>
 
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classUtil_1_1Array">Util::Array&lt; Data &gt;</link></para>

<para><link linkend="_classUtil_1_1Array">Array</link> container class template. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ArrayIterator">Util::ArrayIterator&lt; Data &gt;</link></para>

<para>Forward iterator for an <link linkend="_classUtil_1_1Array">Array</link> or a C array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ConstArrayIterator">Util::ConstArrayIterator&lt; Data &gt;</link></para>

<para>Forward const iterator for an <link linkend="_classUtil_1_1Array">Array</link> or a C array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DArray">Util::DArray&lt; Data &gt;</link></para>

<para>Dynamically allocatable contiguous array template. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DSArray">Util::DSArray&lt; Data &gt;</link></para>

<para>Dynamically allocated array with variable logical size. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1FArray">Util::FArray&lt; Data, Capacity &gt;</link></para>

<para>A fixed size (static) contiguous array template. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1FSArray">Util::FSArray&lt; Data, Capacity &gt;</link></para>

<para>A fixed capacity (static) contiguous array with a variable logical size. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1GArray">Util::GArray&lt; Data &gt;</link></para>

<para>An automatically growable array, analogous to a std::vector. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1GridArray">Util::GridArray&lt; Data &gt;</link></para>

<para>Multi-dimensional array with the dimensionality of space. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Pair">Util::Pair&lt; Data &gt;</link></para>

<para>An array of exactly 2 objects. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1RArray">Util::RArray&lt; Data &gt;</link></para>

<para>An <link linkend="_classUtil_1_1Array">Array</link> that acts as a reference to another <link linkend="_classUtil_1_1Array">Array</link> or C array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1RingBuffer">Util::RingBuffer&lt; Data &gt;</link></para>

<para>Class for storing history of previous values in an array. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para><link linkend="_classUtil_1_1Array">Array</link> containers that store objects by value, and related iterators. </para>

<para>The <link linkend="_classUtil_1_1Array">Array</link> containers that do not have a P prefix are one-dimensional array containers that store objects by value. These all overload the subscript [] operator to provide access to elements as references.</para>

<para>The <link linkend="_classUtil_1_1DArray">DArray</link> and <link linkend="_classUtil_1_1FArray">FArray</link> containers are simple wrappers for dynamically allocated and fixed-size C arrays, respectively. The <link linkend="_classUtil_1_1DSArray">DSArray</link> and <link linkend="_classUtil_1_1FSArray">FSArray</link> containers are dynamically and statically allocated arrays, respectively, that have both a fixed capacity but a variable logical size, with contiguous elements. The <link linkend="_classUtil_1_1GArray">GArray</link> container is a growable sized array, similar to a std::vector. Destructors for these arrays all delete the associated C array of objects.</para>

<para>An <link linkend="_classUtil_1_1RArray">RArray</link> &lt; T &gt; is an <link linkend="_classUtil_1_1Array">Array</link> that is intended to be used as an alias for, or a shallow copy of, a target <link linkend="_classUtil_1_1DArray">DArray</link>, <link linkend="_classUtil_1_1FArray">FArray</link> or C array. An <link linkend="_classUtil_1_1RArray">RArray</link> contains a copy of the array address and capacity of the target array, where are copied by the <link linkend="_classUtil_1_1RArray_1a5ce7d0c2e141487a265591cc8e6d00dc">RArray::associate()</link> method. Like other array containers, an <link linkend="_classUtil_1_1RArray">RArray</link> overloads the [] operator to provide access to elements as references. The destructor of an <link linkend="_classUtil_1_1RArray">RArray</link> does not delete the associated C array.</para>

<para>A <link linkend="_classUtil_1_1RingBuffer">RingBuffer</link> is a cylic buffer array for which the append() method adds elements to the end of a sequence if the buffer is not full, and overwrites the oldest element if it is. </para>
</section>
</section>
