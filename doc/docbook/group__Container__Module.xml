<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__Container__Module">
<title>Container Templates</title>
<indexterm><primary>Container Templates</primary></indexterm>
<simplesect>
    <title>Modules    </title>
        <itemizedlist>
            <listitem><para><link linkend="_group__Array__Module">Object Arrays</link></para>

<para><link linkend="_classUtil_1_1Array">Array</link> containers that store objects by value, and related iterators. </para>
</listitem>
            <listitem><para><link linkend="_group__Pointer__Array__Module">Pointer Arrays</link></para>

<para><link linkend="_classUtil_1_1Array">Array</link> containers that store pointers to objects, and related iterators. </para>
</listitem>
            <listitem><para><link linkend="_group__Matrix__Module">Matrix Containers</link></para>

<para>Two-dimensional array containers that store by objects value. </para>
</listitem>
            <listitem><para><link linkend="_group__List__Module">Linked List</link></para>

<para>A simple linked list implementation and associated iterator. </para>
</listitem>
            <listitem><para><link linkend="_group__Iterator__Module">Iterators</link></para>

<para>Iterators for use with particular containers. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Container and iterator class templates.</para>

<para>This module contains a set of simple container templates, some of which are similar to containers provided by the C++ standard library. Bounds checking of indices for all array containers can be turned on (for safety) or off (for speed) by defining or not defining the UTIL_DEBUG preprocessor macro.</para>
<section xml:id="_group__Container__Module_1container_array_matrix_sec">
<title>Array and Matrix Containers</title>

<para>Containers templates whose name contains the string &apos;<link linkend="_classUtil_1_1Array">Array</link>&apos; are one dimensional array containers, much like C arrays. All such containers overload the subscript [] operator so as to return an object by reference, using the same syntax as a C array or a std::vector: If A is an array, then A[i] is a reference to the ith element of A.</para>

<para>Container templates whose name contains the string &apos;<link linkend="_classUtil_1_1Matrix">Matrix</link>&apos; are two dimensional arrays. These overload the (int, int) operator to access elements: If M is a <link linkend="_classUtil_1_1Matrix">Matrix</link>, then M(i, j) is a reference to the element in column j of row i of A.</para>
</section>
<section xml:id="_group__Container__Module_1container_prefix_sec">
<title>Container Name Prefixes</title>

<para>The names of many containers have prefixes before the word <link linkend="_classUtil_1_1Array">Array</link> or <link linkend="_classUtil_1_1Matrix">Matrix</link> that indicates policies for memory allocation and management.</para>

<para>Containers templates whose name begins with the letter &apos;D&apos; (such as <link linkend="_classUtil_1_1DArray">DArray</link>, <link linkend="_classUtil_1_1DSArray">DSArray</link>, <link linkend="_classUtil_1_1DPArray">DPArray</link>, and <link linkend="_classUtil_1_1DMatrix">DMatrix</link>) use dynamically allocated memory. The declaration &quot;DArray&lt;int&gt; A&quot; declares a dynamically allocated array of integers. <link linkend="_classUtil_1_1Memory">Memory</link> must be explicitly allocated for these containers by calling the &quot;allocate&quot; method after the container is instantiated and before it is used. Dynamically allocated containers can only be allocated once and are not resizable. Attempting to allocate a container more than once is as an error, and causes an <link linkend="_classUtil_1_1Exception">Exception</link> to be thrown.</para>

<para>Containers templates whose name begins with a letter &apos;F&apos; (such as <link linkend="_classUtil_1_1FArray">FArray</link>, <link linkend="_classUtil_1_1FSArray">FSArray</link>, <link linkend="_classUtil_1_1FPArray">FPArray</link>, and <link linkend="_classUtil_1_1FMatrix">FMatrix</link>) are fixed size containers. The capacity of each such container is determined at compile time by a template parameter or parameters. Thus, for example, <literallayout><computeroutput>FArray&lt;int,&#32;4&gt;&#32;A;
</computeroutput></literallayout> declares a fixed size array of four integers, much like the declaration &quot;int V[4]&quot; of a fixed size C array.</para>

<para>The letter &quot;S&quot; in the names of <link linkend="_classUtil_1_1DSArray">DSArray</link> and <link linkend="_classUtil_1_1FSArray">FSArray</link> indicate that these are &quot;sized&quot; arrays. These arrays have a variable logical size that is less than or equal to the physical capacity. The logical size is the current number of elements, which are always stored contiguously from index 0 to index size - 1. Accessing an element with index greater than or equal to size is an error, and will cause an <link linkend="_classUtil_1_1Exception">Exception</link> to be thrown if debugging is enabled. The capacity of an array is the number of elements for which memory has been allocated. The size of such an array is initially set to zero, and elements are added sequentially by the append() method, which adds a new element at the end of the array and increments the size counter. Once the size reaches the array capacity, attempting to append another element will cause an <link linkend="_classUtil_1_1Exception">Exception</link> to be thrown.</para>

<para><link linkend="_classUtil_1_1Array">Array</link> containers whose name includes the prefix G are sized arrays with a capacity that can grow (G=&quot;growable&quot;) as needed as elements are appended. The &quot;GArray&quot; template thus implements a dynamic array very similiar to the standard library std::vector. Automatic resizing changes the address of the beginning of the array, and invalidates all iterators and pointers to elements.</para>
</section>
<section xml:id="_group__Container__Module_1container_pointer_sec">
<title>Pointer Arrays</title>

<para>Container templates whose name contains the prefix &quot;P&quot; are pointer arrays. A pointer array is a container that stores pointers to objects that are instantiated outside of the array, rather than storing actual objects. The containers <link linkend="_classUtil_1_1DPArray">DPArray</link> and <link linkend="_classUtil_1_1FPArray">FPArray</link> are dynamically allocated fixed size pointer arrays, respectively. The <link linkend="_classUtil_1_1GPArray">GPArray</link> array is a growable pointer array, which can grow without bound. The pointer arrays are all similar to &quot;sized&quot; arrays in that they have a logical size that must be less than or equal to their capacity, and in that elements must can be added to the end of an initially empty array by function &quot;append(T&amp; )&quot;. Pointer arrays use the same interface for the subscript operator (which returns a reference) and the append function (which takes a reference parameter) as that used by the sized and object arrays. A pointer array of type DPArray&lt; T &gt; is thus different from a sized array of pointers, of type DSArray&lt;T*&gt;, because DPArray&lt; T &gt; overloads the [] operator to return a reference to an object of type T that is referenced by a private pointer, whereas the subscript operator for a DSArray&lt;T*&gt; returns an actual pointer. </para>
</section>
</section>
</section>
