<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__Format__Module">
<title>Output Format</title>
<indexterm><primary>Output Format</primary></indexterm>
<para>

<para>Utilities to simplify formatted C++ stream output. </para>
 
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classUtil_1_1Bool">Util::Bool</link></para>

<para>Wrapper for an bool value, for formatted ostream output. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Dbl">Util::Dbl</link></para>

<para>Wrapper for a double precision number, for formatted ostream output. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Format">Util::Format</link></para>

<para>Base class for output wrappers for formatted C++ ostream output. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Int">Util::Int</link></para>

<para>Wrapper for an int, for formatted ostream output. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Lng">Util::Lng</link></para>

<para>Wrapper for a long int, for formatted ostream output. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Str">Util::Str</link></para>

<para>Wrapper for a std::string, for formatted ostream output. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename Type &gt; </para><para>void <link linkend="_group__Format__Module_1ga9ccb226b62d2b848cd3233c7cee9ba3f">Util::write</link> (std::ostream &amp;out, Type data)</para>

<para>Function template for output in a standard format. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Utilities to simplify formatted C++ stream output. </para>

<para>This module provides wrapper classes that can simplify formatted output of the primitive data types with controllable field width and floating point precision.</para>
<section xml:id="_group__Format__Module_1Wrapper">
<title>Classes</title>

<para>The classes <link linkend="_classUtil_1_1Int">Int</link>, <link linkend="_classUtil_1_1Lng">Lng</link>, <link linkend="_classUtil_1_1Dbl">Dbl</link>, <link linkend="_classUtil_1_1Bool">Bool</link>, and <link linkend="_classUtil_1_1Str">Str</link> are wrappers for outputting the data types int, long double, bool, and std::string, respectively. An inserter (&lt;&lt;) operator is defined for each such wrapper class that produces formatted output of the enclosed data with a controllable field width and (for <link linkend="_classUtil_1_1Dbl">Dbl</link>) precision. Each wrapper class has a member variable of the associated data type and an integer field width member. The <link linkend="_classUtil_1_1Dbl">Dbl</link> class also has an integer precision member, to control floating point precision.</para>

<para>Example: We wish to output the elements of two double precision precision array named &quot;A&quot; and &quot;B&quot; in two column with a minimum field width of 20 characters for elements of A, with 10 digit precision, and 10 characters for elements of B, with 6 digit precision. The following code accomplishes this: <literallayout><computeroutput>double&#32;A[10],&#32;B[10];

//&#32;...&#32;code&#32;that&#32;assigns&#32;values&#32;to&#32;elements&#32;of&#32;A&#32;and&#32;B&#32;...

for&#32;(int&#32;i=0;&#32;i&lt;&#32;10;&#32;++i)&#32;{
&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;Dbl(A[i],&#32;20,&#32;10)&#32;&lt;&lt;&#32;Dbl(B[i],&#32;10,&#32;6)&#32;&lt;&lt;&#32;std::endl;
}
</computeroutput></literallayout> The <link linkend="_classUtil_1_1Dbl">Dbl</link> constructor used in this snippet has the interface Dbl::Dbl(double value, int width, int precision). The use of wrapper classes allows one to control output format using an an interface that is more compact than the C++ iostream interace, and only slightly more verbose than that of the C fprint function.</para>

<para>Two or more constructors are provide for each wrapper class. Each class has a constructor that requires only the value of of the variable, while others require the value and field width or (as in the above example) the value, width and precision. If a field width or precision is not specified as a parameter to the constructor, it may be set after construction using setter functions.</para>

<para>When no value is specified for the field width or (for <link linkend="_classUtil_1_1Dbl">Dbl</link>) the precision, default values are used. The default width and precision for all data types are given by <link linkend="_classUtil_1_1Format_1ac6cf6620e160c66757429bec0fb4dd23">Format::defaultWidth()</link> and <link linkend="_classUtil_1_1Format_1ad09d93166bbb678297938e83a88bab9a">Format::defaultPrecision()</link>. These default values may be modified using the static methods <link linkend="_classUtil_1_1Format_1ac74f4b64bc83811fcd5e5f1a13b1e87f">Format::setDefaultWidth()</link> and <link linkend="_classUtil_1_1Format_1a8af41659ebb3de8137359e1a4a4947f7">Format::setDefaultPrecision()</link>.</para>

<para>Example: Suppose we wish to output the two column array described in the previous example, but are willing to use a 15 column field an 7 digits of precision for both columns. This could also be accomplished as follows: <literallayout><computeroutput>double&#32;A[10],&#32;B[10];

Format::setDefaultWidth(15);
Format::setDefaultPrecision(7);

for&#32;(int&#32;i=0;&#32;i&lt;&#32;10;&#32;++i)&#32;{
&#32;&#32;&#32;std::cout&#32;&lt;&lt;&#32;Dbl(A[i])&#32;&lt;&lt;&#32;Dbl(B[i])&#32;&lt;&lt;&#32;std::endl;
}
</computeroutput></literallayout> The setDefaultWidth() and setDefaultPrecision() functions are not needed if one is happy with the initial default settings, which are a width of 20 characters and a precision of 12.</para>
</section>
<section xml:id="_group__Format__Module_1Write">
<title>Function Template</title>

<para>The <link linkend="_namespaceUtil_1aea4b68fdbe8e4832e252b372730cbbb3">write()</link> function template provides a generic interface for formatting ostream output, which can be used within a class or function template to output data for which the type is a template parameter. The wrapper classes cannot be used directly in this situation, because they require that an object of the appropriate wrapper class be specified explicitly. To output a variable data to an ostream out, one calls write(out, data). An explicit specialization of <link linkend="_namespaceUtil_1aea4b68fdbe8e4832e252b372730cbbb3">write()</link> is provided for each data type for which there exists a wrapper class. Each explicit specialization uses the corresponding wrapper class internally to format the output. Thus, if variable data is an int, write(out, data) is equivalent to out &lt;&lt; Int(data). For other data types, for which there exists no wrapper class, write(out, data) is equivalent out &lt;&lt; data. </para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__Format__Module_1ga9ccb226b62d2b848cd3233c7cee9ba3f"/>    <section>
    <title>write()</title>
<indexterm><primary>write</primary><secondary>Output Format</secondary></indexterm>
<indexterm><primary>Output Format</primary><secondary>write</secondary></indexterm>
<computeroutput>template&lt;typename Type &gt; </computeroutput><para><computeroutput>void Util::write (std::ostream &amp; out, Type data)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Function template for output in a standard format. </para>
</para>

<para>The write function template is designed to simplify formatted stream output of variables within class and function template, when the typename of a variable is a template parameter.</para>

<para>The primary template implementation simply invokes the insertion &lt;&lt; operator for the specified type. For types controlled by the primary template (i.e., those for which no explicit specialization is provided) the expression write(out, data) is equivalent to out &lt;&lt; data.</para>

<para>Explicit specializations of this method are provided for int, long, double, bool, and string. Each of these uses an appropriate wrapper class (<link linkend="_classUtil_1_1Int">Int</link>, <link linkend="_classUtil_1_1Lng">Lng</link>, <link linkend="_classUtil_1_1Dbl">Dbl</link>, <link linkend="_classUtil_1_1Bool">Bool</link>, or <link linkend="_classUtil_1_1Str">Str</link>) to format output. For example, if data is an int, write(out, data) is equivalent to out &lt;&lt; Int(data). The width and (if appropriate) precision are controlled by <link linkend="_classUtil_1_1Format_1ac6cf6620e160c66757429bec0fb4dd23">Format::defaultWidth()</link> and <link linkend="_classUtil_1_1Format_1ac6cf6620e160c66757429bec0fb4dd23">Format::defaultWidth()</link>. </para>
<para>
Definition at line 80 of file write.h.</para>
</section>
</section>
</section>
