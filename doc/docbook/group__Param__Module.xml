<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__Param__Module">
<title>Parameter File IO</title>
<indexterm><primary>Parameter File IO</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classUtil_1_1Begin">Util::Begin</link></para>

<para>Beginning line of a composite parameter block. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Blank">Util::Blank</link></para>

<para>An empty line within a parameter file. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1CArray2DParam">Util::CArray2DParam&lt; Type &gt;</link></para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> associated with a 2D built-in C array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1CArrayParam">Util::CArrayParam&lt; Type &gt;</link></para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> associated with a 1D C array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DArrayParam">Util::DArrayParam&lt; Type &gt;</link></para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> associated with a <link linkend="_classUtil_1_1DArray">DArray</link> container. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DMatrixParam">Util::DMatrixParam&lt; Type &gt;</link></para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> associated with a 2D built-in C array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DSymmMatrixParam">Util::DSymmMatrixParam&lt; Type &gt;</link></para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> associated with a symmetric <link linkend="_classUtil_1_1DMatrix">DMatrix</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1End">Util::End</link></para>

<para><link linkend="_classUtil_1_1End">End</link> bracket of a <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link> parameter block. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1FArrayParam">Util::FArrayParam&lt; Type, N &gt;</link></para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> associated with a <link linkend="_classUtil_1_1FArray">FArray</link> container. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Label">Util::Label</link></para>

<para>A label string in a file format. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1OptionalLabel">Util::OptionalLabel</link></para>

<para>An optional <link linkend="_classUtil_1_1Label">Label</link> string in a file format. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ParamComponent">Util::ParamComponent</link></para>

<para>Abstract base class for classes that input and output parameters to file. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ParamComposite">Util::ParamComposite</link></para>

<para>An object that can read multiple parameters from file. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Parameter">Util::Parameter</link></para>

<para>A single variable in a parameter file. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ScalarParam">Util::ScalarParam&lt; Type &gt;</link></para>

<para>Template for a <link linkend="_classUtil_1_1Parameter">Parameter</link> object associated with a scalar variable. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Classes used to read parameters from a parameter file. Any class that must read values of member variables from a file should be derived from <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link>, which provides methods for reading and writing a parameter file, using a programmatically defined file format.</para>

<para><link linkend="_classUtil_1_1ParamComponent">ParamComponent</link> is an abstract base class. The classes <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link>, <link linkend="_classUtil_1_1Parameter">Parameter</link>, <link linkend="_classUtil_1_1Begin">Begin</link>, <link linkend="_classUtil_1_1End">End</link>, and <link linkend="_classUtil_1_1Blank">Blank</link> are derived directly from <link linkend="_classUtil_1_1ParamComponent">ParamComponent</link>. <link linkend="_classUtil_1_1Parameter">Parameter</link>, <link linkend="_classUtil_1_1Begin">Begin</link>, <link linkend="_classUtil_1_1End">End</link>, and <link linkend="_classUtil_1_1Blank">Blank</link> are &quot;leaf&quot; notes it a tree structure.</para>

<para>Each subclasses of <link linkend="_classUtil_1_1Parameter">Parameter</link> represents a parameter associated with a different type of C++ object. Such subclasses include class templates <link linkend="_classUtil_1_1ScalarParam">ScalarParam</link>, <link linkend="_classUtil_1_1CArrayParam">CArrayParam</link>, <link linkend="_classUtil_1_1DArrayParam">DArrayParam</link>, <link linkend="_classUtil_1_1FArrayParam">FArrayParam</link>, <link linkend="_classUtil_1_1CArray2DParam">CArray2DParam</link> and MatrixParam. The template <link linkend="_classUtil_1_1ScalarParam">ScalarParam</link> represents any parameter that is associated with either a primitive C type or a user type for which their exist overloaded &quot;&lt;&lt;&quot; and &quot;&gt;&gt;&quot; file IO operators. The templates <link linkend="_classUtil_1_1CArrayParam">CArrayParam</link>, <link linkend="_classUtil_1_1DArrayParam">DArrayParam</link>, <link linkend="_classUtil_1_1FArrayParam">FArrayParam</link>, <link linkend="_classUtil_1_1CArray2DParam">CArray2DParam</link>, and MatrixParam difine parameter file formats for different types of 1D and 2D arrays. </para>
</section>
</section>
