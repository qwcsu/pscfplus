<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__Serialize__Module">
<title>Serialization</title>
<indexterm><primary>Serialization</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classUtil_1_1BinaryFileIArchive">Util::BinaryFileIArchive</link></para>

<para>Saving archive for binary istream. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1BinaryFileOArchive">Util::BinaryFileOArchive</link></para>

<para>Saving / output archive for binary ostream. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MemoryIArchive">Util::MemoryIArchive</link></para>

<para>Input archive for packed heterogeneous binary data. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MemoryOArchive">Util::MemoryOArchive</link></para>

<para>Save archive for packed heterogeneous binary data. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Serializable">Util::Serializable</link></para>

<para>Abstract class for serializable objects. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1TextFileIArchive">Util::TextFileIArchive</link></para>

<para>Loading archive for text istream. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1TextFileOArchive">Util::TextFileOArchive</link></para>

<para>Saving archive for character based ostream. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1XdrFileIArchive">Util::XdrFileIArchive</link></para>

<para>Loading / input archive for binary XDR file. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1XdrFileOArchive">Util::XdrFileOArchive</link></para>

<para>Saving / output archive for binary XDR file. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;class Archive , typename T &gt; </para><para>void <link linkend="_group__Serialize__Module_1ga3425912b370d34372bdd6939becb208f">Util::serialize</link> (Archive &amp;ar, T &amp;data, const unsigned int version)</para>

<para>Serialize one object of type T. </para>
</listitem>
            <listitem><para>template&lt;class Archive , typename T &gt; </para><para>void <link linkend="_group__Serialize__Module_1ga965cecf6693616b058003471cbd786de">Util::serializeEnum</link> (Archive &amp;ar, T &amp;data, const unsigned int version=0)</para>

<para>Serialize an enumeration value. </para>
</listitem>
            <listitem><para>template&lt;class Archive , typename T &gt; </para><para>void <link linkend="_group__Serialize__Module_1gaebec7331d2435226c0ca11acef0788bf">Util::serializeCheck</link> (Archive &amp;ar, T &amp;data, const char *label=&quot;&quot;)</para>

<para>Save a value, or save and check correctness on loading. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Serialization of C++ objects to/from file or memory.</para>

<para>The code in this module provides a system for serializing sequences of C++ objects to a file or to random access memory. A serialization of an object stores the full internal state and allows the object to be reconstructed. The design is loosely based on that of the Boost serialization library, <link xlink:href="http://www.boost.org/doc/libs/1_48_0/libs/serialization/doc/index.html">http://www.boost.org/doc/libs/1_48_0/libs/serialization/doc/index.html</link> but is much simpler (and less powerful) than the Boost library.</para>
<section xml:id="_group__Serialize__Module_1Archives">
<title>Archives</title>

<para>An archive stores serialized data, either in a file or in RAM. The definition of an archive used here is very similar to that used in the Boost serialization library. An archive class may model either a saving / output archive, to which data is saved, or a loading / input archive, from which data is loaded. By convention, the names of saving/output archive classes end with the string OArchive and the names of loading/input archive classes end with the string IArchive.</para>

<para>Different archive classes store serialized objects in different forms. For example, <link linkend="_classUtil_1_1TextFileOArchive">TextFileOArchive</link> and <link linkend="_classUtil_1_1TextFileIArchive">TextFileIArchive</link> are saving and loading archive classes, respectively, that are wrappers for ofstream or ifstream file stream objects in which data is stored in a character representation. <link linkend="_classUtil_1_1BinaryFileOArchive">BinaryFileOArchive</link> and <link linkend="_classUtil_1_1BinaryFileIArchive">BinaryFileIArchive</link> are saving/output and loading / input archives that store data in a binary format. <link linkend="_classUtil_1_1MemoryOArchive">MemoryOArchive</link> and <link linkend="_classUtil_1_1MemoryIArchive">MemoryIArchive</link> are saving and loading archives that stored data in binary form in a block of random-access memory.</para>
</section>
<section xml:id="_group__Serialize__Module_1Operators">
<title>Overloaded IO operators</title>

<para>Objects may be saved to a saving archive or loaded from a loading archive using overloaded operators, using the same syntax as that of the Boost library. Each saving archive class must define method templates that overload the &lt;&lt; (insertion) and &amp; operators. These overloaded operators must be equivalent, and must save an object to the archive. If ar is an instance of a saving archive, such as <link linkend="_classUtil_1_1BinaryFileOArchive">BinaryFileOArchive</link>, the expressions <literallayout><computeroutput>ar&#32;&lt;&lt;&#32;data;&#32;
ar&#32;&amp;&#32;&#32;data;
</computeroutput></literallayout> are thus equivalent, and both save the state of variable data into archive ar. Each loading archive class must instead define template methods to overload the &gt;&gt; (extractor) and &amp; operator, which must be equivalent, and which must load an object from the archive. If ar is an instance of a loading archive, such as <link linkend="_classUtil_1_1BinaryFileIArchive">BinaryFileIArchive</link>, then the expressions <literallayout><computeroutput>ar&#32;&gt;&gt;&#32;data;
ar&#32;&amp;&#32;&#32;data;
</computeroutput></literallayout> are equivalent, and both load the state of variable data from archive ar.</para>
</section>
<section xml:id="_group__Serialize__Module_1Serialize">
<title>Serialize Functions</title>

<para>Objects of type T can be saved to or loaded from an instance of a class Archive if and only if the compiler can find a function named serialize with the signature <literallayout><computeroutput>void&#32;serialize(Archive&amp;&#32;ar,&#32;T&amp;&#32;data,&#32;unsigned&#32;int&#32;version)
</computeroutput></literallayout> Here, &quot;version&quot; is an integer index that indicates the version of the archive. This version id is normally given by an integer member of the archive class. The operator &amp; for a class Archive is normally implemented by a method template <literallayout><computeroutput>template&#32;&lt;typename&#32;T&gt;
void&#32;Archive::operator&#32;&amp;&#32;(T&amp;&#32;data);
{&#32;&#32;serialize(*this,&#32;data,&#32;version_);&#32;}
</computeroutput></literallayout> that simply calls the appropiate serialize method. Here, version_ is an integer member of the Archive class that stores the archive version id. Similar templates must be provided for the &lt;&lt; or &gt;&gt; operator.</para>

<para>Each archive class provides serialize functions for all of the built-in C/C++ types, as well as few other common data types such as std::string. Definitions of the serialize function for saving archive types must save (write) data, and those for loading archive types must load (read) data.</para>

<para>Instances of user-defined classes may also be serialized if an appropriate serialize function can be found by the compiler. Serialization of instances of a class T may be enabled by defining either:</para>

<para><itemizedlist>
<listitem>
<para>A global serialize function template, with a signature <literallayout><computeroutput>template&#32;&lt;class&#32;Archive&gt;
inline&#32;void&#32;serialize(Archive&amp;&#32;ar,&#32;T&amp;&#32;data,&#32;const&#32;unsigned&#32;int&#32;version);
</computeroutput></literallayout></para>
</listitem><listitem>
<para>A serialize method template in class T, with a signature <literallayout><computeroutput>template&#32;&lt;class&#32;Archive&gt;
void&#32;T::serialize(Archive&amp;&#32;ar,&#32;const&#32;unsigned&#32;int&#32;version);
</computeroutput></literallayout> Note that, in either case, the archive type is normally a template parameter, so that the same serialize function can work with multiple types of archives.</para>
</listitem></itemizedlist>
</para>

<para>In order to use this system, it is worth understanding how the compiler finds an appropriate serialize method. When the C++ compiler needs a serialize method for a particular archive type Archive and data type T, it will look first for a function <link linkend="_group__Serialize__Module_1ga3425912b370d34372bdd6939becb208f">serialize(Archive&amp;, T&amp;, unsigned int)</link> with exactly the required signature, and then for an appropriate template. Such functions are provided for each archive classes for all of the built-in C/C++ types, and are always used to serialize such types. For class types, their is normally no such non-template function, and so the compiler will look for an appropriate template, giving priority to templates in which fewer of the function parameters have types given by template arguments, rather than explicit types. If the compiler has access to a global serialize function template for class T with the signature described above, in which the archive type is a template parameter but the data type T is explicit, it will use this. If no such global serialize function template is found, the compiler will try to compile the following generic template, <literallayout><computeroutput>template&#32;&lt;class&#32;Archive,&#32;typename&#32;T&gt;
inline&#32;void&#32;serialize(Archive&amp;&#32;ar,&#32;T&amp;&#32;data,&#32;const&#32;unsigned&#32;int&#32;version)
{&#32;&#32;data.serialize(ar,&#32;version);&#32;}
</computeroutput></literallayout> which is defined in the file src/util/serialize.h. This template simply calls the serialize method of class T, and so will not compile if no such method exists. The compiler can thus use, in decreasing order of priority: 1) An explicit serialize function for type T and a specific archive type, 2) A serialize function template for a specific type T in which the archive type is a template parameter, or 3) A serialize method of class T in which the archive type is a template parameter. If none of these are accessible for class T, compilation will fail for any code that attempts to serialize an instance of class T.</para>

<para>The use of a single operator &amp; to represent both output (when applied to a saving archive) and input (when applied to a loading archive), makes it possible to write a single serialize function template for each class that specifies how to order save or load instances of that class, by specifying the order in which members of the class are serialized. For example, consider the following definition of a simple complex number class: <literallayout><computeroutput>class&#32;Complex&#32;&#32;{
public:

&#32;&#32;&#32;A(double&#32;real,&#32;double&#32;imag)&#32;:&#32;real_(real),&#32;imag_(imag)&#32;{}

&#32;&#32;&#32;template&#32;&lt;class&#32;Archive&gt;
&#32;&#32;&#32;void&#32;serialize(Archive&amp;&#32;ar,&#32;unsigned&#32;int&#32;version)
&#32;&#32;&#32;{&#32;
&#32;&#32;&#32;&#32;&#32;&#32;ar&#32;&amp;&#32;real_;
&#32;&#32;&#32;&#32;&#32;&#32;ar&#32;&amp;&#32;imag_:
&#32;&#32;&#32;}

private:

&#32;&#32;&#32;double&#32;real_;
&#32;&#32;&#32;double&#32;imag_;&#32;&#32;&#32;

}&#32;
</computeroutput></literallayout> The serialize method template provides instructions for the order in which to either save the two floating point members of the class to a saving archive, or to load them from a loading archive. The use of a template in which the archive type is a parameter allows a single serialize method to be used with any type of saving or loading archive.</para>

<para>The most serious disadvantage of this system is that, if the serialize method is defined by a template, it cannot also be a virtual method. As a result, the serialize method template for a class cannot be accessed polymorphically, via a pointer or reference to a base class. This limitation becomes a problem in designs in which some objects are accessed only via base class pointers. The <link linkend="_classUtil_1_1Serializable">Serializable</link> abstract base class, discussed below, partially solves this problem, by replacing the serialize method template by a pair of virtual save() and load() methods.</para>
</section>
<section xml:id="_group__Serialize__Module_1Serializable">
<title>Serializable Classes</title>

<para><link linkend="_classUtil_1_1Serializable">Serializable</link> is an abstract base class that provides an alternate interface for serializing objects, using virtual functions rather than method templates. Each subclass of <link linkend="_classUtil_1_1Serializable">Serializable</link> must define virtual save() and load() methods with the following signatures: <literallayout><computeroutput>virtual&#32;void&#32;save(Serializable::OArchive&amp;&#32;ar);
virtual&#32;void&#32;load(Serializable::IArchive&amp;&#32;ar);
</computeroutput></literallayout> The typenames <link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> and <link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> are typedefs that define a pair of archive classes to be used for serialization.</para>

<para>The advantage of using virtual functions is that it allows these methods to be accessed polymorphically, via base class pointers or references. The disadvantage is that it requires the hard-coding of a single type type of saving and loading archive. To retain some flexibility, these saving and loading types are defined in the <link linkend="_classUtil_1_1Serializable">Serializable</link> class by a pair of typedefs. This allows the type of archives used with <link linkend="_classUtil_1_1Serializable">Serializable</link> objects to be changed throughout the code by changing these two typedefs and recompiling.</para>

<para>In practice, a serialize method or function template should be defined for relatively simple, non-polymorphic classes, but polymorhpic classes that are normally accessed via base class pointers need to be derived from <link linkend="_classUtil_1_1Serializable">Serializable</link>, and must implement save and load methods. </para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_group__Serialize__Module_1ga3425912b370d34372bdd6939becb208f"/>    <section>
    <title>serialize()</title>
<indexterm><primary>serialize</primary><secondary>Serialization</secondary></indexterm>
<indexterm><primary>Serialization</primary><secondary>serialize</secondary></indexterm>
<computeroutput>template&lt;class Archive , typename T &gt; </computeroutput><para><computeroutput>void Util::serialize (Archive &amp; ar, T &amp; data, const unsigned int version)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Serialize one object of type T. </para>
</para>

<para>Default implementation calls serialize method of data object. Can be overridden by any explicit specialization.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>archive object </para>
</entry>
                            </row>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>object to be serialized </para>
</entry>
                            </row>
                            <row>
                                <entry>version</entry>
                                <entry>
<para>archive version id </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 29 of file serialize.h.</para>
<para>
Referenced by Util::MemoryOArchive::operator&amp;(), and Util::MemoryOArchive::operator&lt;&lt;().</para>
    </section><anchor xml:id="_group__Serialize__Module_1ga965cecf6693616b058003471cbd786de"/>    <section>
    <title>serializeEnum()</title>
<indexterm><primary>serializeEnum</primary><secondary>Serialization</secondary></indexterm>
<indexterm><primary>Serialization</primary><secondary>serializeEnum</secondary></indexterm>
<computeroutput>template&lt;class Archive , typename T &gt; </computeroutput><para><computeroutput>void Util::serializeEnum (Archive &amp; ar, T &amp; data, const unsigned int version = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Serialize an enumeration value. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>archive object </para>
</entry>
                            </row>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>object to be serialized </para>
</entry>
                            </row>
                            <row>
                                <entry>version</entry>
                                <entry>
<para>archive version id </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 42 of file serialize.h.</para>
<para>
Referenced by Pscf::serialize().</para>
    </section><anchor xml:id="_group__Serialize__Module_1gaebec7331d2435226c0ca11acef0788bf"/>    <section>
    <title>serializeCheck()</title>
<indexterm><primary>serializeCheck</primary><secondary>Serialization</secondary></indexterm>
<indexterm><primary>Serialization</primary><secondary>serializeCheck</secondary></indexterm>
<computeroutput>template&lt;class Archive , typename T &gt; </computeroutput><para><computeroutput>void Util::serializeCheck (Archive &amp; ar, T &amp; data, const char * label = <computeroutput>&quot;&quot;</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Save a value, or save and check correctness on loading. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>archive object </para>
</entry>
                            </row>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>object to be serialized </para>
</entry>
                            </row>
                            <row>
                                <entry>label</entry>
                                <entry>
<para>label C-string for object. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 64 of file serialize.h.</para>
<para>
References UTIL_THROW.</para>
</section>
</section>
</section>
