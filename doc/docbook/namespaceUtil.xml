<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespaceUtil">
<title>Util Namespace Reference</title>
<indexterm><primary>Util</primary></indexterm>
<para>

<para>Utility classes for scientific computation. </para>
 
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classUtil_1_1Ar1Process">Ar1Process</link></para>

<para>Generator for a discrete AR(1) Markov process. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Array">Array</link></para>

<para><link linkend="_classUtil_1_1Array">Array</link> container class template. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ArrayIterator">ArrayIterator</link></para>

<para>Forward iterator for an <link linkend="_classUtil_1_1Array">Array</link> or a C array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ArraySet">ArraySet</link></para>

<para>A container for pointers to a subset of elements of an associated array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ArrayStack">ArrayStack</link></para>

<para>A stack of fixed capacity. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1AutoCorr">AutoCorr</link></para>

<para>Auto-correlation function for one sequence of Data values. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1AutoCorrArray">AutoCorrArray</link></para>

<para>Auto-correlation function for an ensemble of sequences. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1AutoCorrelation">AutoCorrelation</link></para>

<para>Auto-correlation function, using hierarchical algorithm. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1AutoCorrStage">AutoCorrStage</link></para>

<para>Hierarchical auto-correlation function algorithm. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Average">Average</link></para>

<para>Calculates the average and variance of a sampled property. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1AverageStage">AverageStage</link></para>

<para>Evaluate average with hierarchical blocking error analysis. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Begin">Begin</link></para>

<para>Beginning line of a composite parameter block. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1BinaryFileIArchive">BinaryFileIArchive</link></para>

<para>Saving archive for binary istream. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1BinaryFileOArchive">BinaryFileOArchive</link></para>

<para>Saving / output archive for binary ostream. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Binomial">Binomial</link></para>

<para>Class for binomial coefficients (all static members) </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Bit">Bit</link></para>

<para>Represents a specific bit location within an unsigned int. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Blank">Blank</link></para>

<para>An empty line within a parameter file. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Bool">Bool</link></para>

<para>Wrapper for an bool value, for formatted ostream output. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1CardinalBSpline">CardinalBSpline</link></para>

<para>A cardinal B-spline basis function. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1CArray2DParam">CArray2DParam</link></para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> associated with a 2D built-in C array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1CArrayParam">CArrayParam</link></para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> associated with a 1D C array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Constants">Constants</link></para>

<para>Mathematical constants. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ConstArrayIterator">ConstArrayIterator</link></para>

<para>Forward const iterator for an <link linkend="_classUtil_1_1Array">Array</link> or a C array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ConstPArrayIterator">ConstPArrayIterator</link></para>

<para>Forward iterator for a <link linkend="_classUtil_1_1PArray">PArray</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DArray">DArray</link></para>

<para>Dynamically allocatable contiguous array template. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DArrayParam">DArrayParam</link></para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> associated with a <link linkend="_classUtil_1_1DArray">DArray</link> container. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Dbl">Dbl</link></para>

<para>Wrapper for a double precision number, for formatted ostream output. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Distribution">Distribution</link></para>

<para>A distribution (or histogram) of values for a real variable. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DMatrix">DMatrix</link></para>

<para>Dynamically allocated <link linkend="_classUtil_1_1Matrix">Matrix</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DMatrixParam">DMatrixParam</link></para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> associated with a 2D built-in C array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DPArray">DPArray</link></para>

<para>A dynamic array that only holds pointers to its elements. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DRaggedMatrix">DRaggedMatrix</link></para>

<para>Dynamically allocated <link linkend="_classUtil_1_1RaggedMatrix">RaggedMatrix</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DSArray">DSArray</link></para>

<para>Dynamically allocated array with variable logical size. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DSymmMatrixParam">DSymmMatrixParam</link></para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> associated with a symmetric <link linkend="_classUtil_1_1DMatrix">DMatrix</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1End">End</link></para>

<para><link linkend="_classUtil_1_1End">End</link> bracket of a <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link> parameter block. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Exception">Exception</link></para>

<para>A user-defined exception. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Factory">Factory</link></para>

<para><link linkend="_classUtil_1_1Factory">Factory</link> template. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1FArray">FArray</link></para>

<para>A fixed size (static) contiguous array template. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1FArrayParam">FArrayParam</link></para>

<para>A <link linkend="_classUtil_1_1Parameter">Parameter</link> associated with a <link linkend="_classUtil_1_1FArray">FArray</link> container. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1FileMaster">FileMaster</link></para>

<para>A <link linkend="_classUtil_1_1FileMaster">FileMaster</link> manages input and output files for a simulation. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1FlagSet">FlagSet</link></para>

<para>A set of boolean variables represented by characters. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1FlexPtr">FlexPtr</link></para>

<para>A pointer that may or may not own the object to which it points. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1FMatrix">FMatrix</link></para>

<para>Fixed Size <link linkend="_classUtil_1_1Matrix">Matrix</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Format">Format</link></para>

<para>Base class for output wrappers for formatted C++ ostream output. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1FPArray">FPArray</link></para>

<para>Statically allocated pointer array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1FSArray">FSArray</link></para>

<para>A fixed capacity (static) contiguous array with a variable logical size. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1GArray">GArray</link></para>

<para>An automatically growable array, analogous to a std::vector. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1GPArray">GPArray</link></para>

<para>An automatically growable <link linkend="_classUtil_1_1PArray">PArray</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Grid">Grid</link></para>

<para>A grid of points indexed by integer coordinates. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1GridArray">GridArray</link></para>

<para>Multi-dimensional array with the dimensionality of space. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1GStack">GStack</link></para>

<para>An automatically growable Stack. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1IFunctor">IFunctor</link></para>

<para>Interface for functor that wraps a void function with one argument (abstract). </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1IFunctor_3_01void_01_4">IFunctor&lt; void &gt;</link></para>

<para>Interface for functor that wraps a void function with no arguments (abstract). </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Int">Int</link></para>

<para>Wrapper for an int, for formatted ostream output. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1IntDistribution">IntDistribution</link></para>

<para>A distribution (or histogram) of values for an int variable. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1IntVector">IntVector</link></para>

<para>An <link linkend="_classUtil_1_1IntVector">IntVector</link> is an integer Cartesian vector. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Label">Label</link></para>

<para>A label string in a file format. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1List">List</link></para>

<para>Linked list class template. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ListArray">ListArray</link></para>

<para>An array of objects that are accessible by one or more linked <link linkend="_classUtil_1_1List">List</link> objects. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ListIterator">ListIterator</link></para>

<para>Bidirectional iterator for a <link linkend="_classUtil_1_1List">List</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Lng">Lng</link></para>

<para>Wrapper for a long int, for formatted ostream output. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Log">Log</link></para>

<para>A static class that holds a log output stream. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Manager">Manager</link></para>

<para>Template container for pointers to objects with a common base class. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Matrix">Matrix</link></para>

<para>Two-dimensional array container template (abstract). </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MeanSqDispArray">MeanSqDispArray</link></para>

<para>Mean-squared displacement (MSD) vs. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Memory">Memory</link></para>

<para>Provides method to allocate array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MemoryCounter">MemoryCounter</link></para>

<para>Archive to computed packed size of a sequence of objects, in bytes. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MemoryIArchive">MemoryIArchive</link></para>

<para>Input archive for packed heterogeneous binary data. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MemoryOArchive">MemoryOArchive</link></para>

<para>Save archive for packed heterogeneous binary data. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MethodFunctor">MethodFunctor</link></para>

<para>Functor that wraps a one-argument class member function. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MethodFunctor_3_01Object_00_01void_01_4">MethodFunctor&lt; Object, void &gt;</link></para>

<para>Functor that wraps a class member function with no arguments. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiFileIo">MpiFileIo</link></para>

<para>Identifies whether this processor may do file I/O. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiLoader">MpiLoader</link></para>

<para>Provides methods for MPI-aware loading of data from input archive. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiLogger">MpiLogger</link></para>

<para>Allows information from every processor in a communicator, to be output in rank sequence. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiStructBuilder">MpiStructBuilder</link></para>

<para>A <link linkend="_classUtil_1_1MpiStructBuilder">MpiStructBuilder</link> objects is used to create an MPI Struct datatype. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits">MpiTraits</link></para>

<para>Default <link linkend="_classUtil_1_1MpiTraits">MpiTraits</link> class. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01bool_01_4">MpiTraits&lt; bool &gt;</link></para>

<para><link linkend="_classUtil_1_1MpiTraits_3_01bool_01_4">MpiTraits&lt;bool&gt;</link> explicit specialization. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01char_01_4">MpiTraits&lt; char &gt;</link></para>

<para><link linkend="_classUtil_1_1MpiTraits_3_01char_01_4">MpiTraits&lt;char&gt;</link> explicit specialization. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01double_01_4">MpiTraits&lt; double &gt;</link></para>

<para><link linkend="_classUtil_1_1MpiTraits_3_01double_01_4">MpiTraits&lt;double&gt;</link> explicit specialization. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01float_01_4">MpiTraits&lt; float &gt;</link></para>

<para><link linkend="_classUtil_1_1MpiTraits_3_01float_01_4">MpiTraits&lt;float&gt;</link> explicit specialization. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01int_01_4">MpiTraits&lt; int &gt;</link></para>

<para><link linkend="_classUtil_1_1MpiTraits_3_01int_01_4">MpiTraits&lt;int&gt;</link> explicit specialization. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01IntVector_01_4">MpiTraits&lt; IntVector &gt;</link></para>

<para>Explicit specialization <link linkend="_classUtil_1_1MpiTraits_3_01IntVector_01_4">MpiTraits&lt;IntVector&gt;</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01long_01_4">MpiTraits&lt; long &gt;</link></para>

<para><link linkend="_classUtil_1_1MpiTraits_3_01long_01_4">MpiTraits&lt;long&gt;</link> explicit specialization. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01long_01double_01_4">MpiTraits&lt; long double &gt;</link></para>

<para><link linkend="_classUtil_1_1MpiTraits_3_01long_01double_01_4">MpiTraits&lt;long double&gt;</link> explicit specialization. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01Rational_01_4">MpiTraits&lt; Rational &gt;</link></para>

<para>Explicit specialization <link linkend="_classUtil_1_1MpiTraits_3_01Rational_01_4">MpiTraits&lt;Rational&gt;</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01short_01_4">MpiTraits&lt; short &gt;</link></para>

<para><link linkend="_classUtil_1_1MpiTraits_3_01short_01_4">MpiTraits&lt;short&gt;</link> explicit specialization. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01Tensor_01_4">MpiTraits&lt; Tensor &gt;</link></para>

<para>Explicit specialization <link linkend="_classUtil_1_1MpiTraits_3_01Tensor_01_4">MpiTraits&lt;Tensor&gt;</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01unsigned_01char_01_4">MpiTraits&lt; unsigned char &gt;</link></para>

<para><link linkend="_classUtil_1_1MpiTraits_3_01unsigned_01char_01_4">MpiTraits&lt;unsigned char&gt;</link> explicit specialization. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01unsigned_01int_01_4">MpiTraits&lt; unsigned int &gt;</link></para>

<para><link linkend="_classUtil_1_1MpiTraits_3_01unsigned_01int_01_4">MpiTraits&lt;unsigned int&gt;</link> explicit specialization. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01unsigned_01long_01_4">MpiTraits&lt; unsigned long &gt;</link></para>

<para><link linkend="_classUtil_1_1MpiTraits_3_01unsigned_01long_01_4">MpiTraits&lt;unsigned long&gt;</link> explicit specialization. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01unsigned_01short_01_4">MpiTraits&lt; unsigned short &gt;</link></para>

<para><link linkend="_classUtil_1_1MpiTraits_3_01unsigned_01short_01_4">MpiTraits&lt;unsigned short&gt;</link> explicit specialization. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraits_3_01Vector_01_4">MpiTraits&lt; Vector &gt;</link></para>

<para>Explicit specialization <link linkend="_classUtil_1_1MpiTraits_3_01Vector_01_4">MpiTraits&lt;Vector&gt;</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MpiTraitsNoType">MpiTraitsNoType</link></para>

<para>Base class for <link linkend="_classUtil_1_1MpiTraits">MpiTraits</link> with no type. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MTRand">MTRand</link></para>

<para>Generates double floating point numbers in the half-open interval [0, 1) </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MTRand53">MTRand53</link></para>

<para>generates 53 bit resolution doubles in the half-open interval [0, 1) </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MTRand__closed">MTRand_closed</link></para>

<para>Generates double floating point numbers in the closed interval [0, 1]. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MTRand__int32">MTRand_int32</link></para>

<para>Mersenne Twister random number generator engine. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1MTRand__open">MTRand_open</link></para>

<para>Generates double floating point numbers in the open interval (0, 1). </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Node">Node</link></para>

<para>Linked <link linkend="_classUtil_1_1List">List</link> <link linkend="_classUtil_1_1Node">Node</link>, class template. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Notifier">Notifier</link></para>

<para>Abstract template for a notifier (or subject) in the <link linkend="_classUtil_1_1Observer">Observer</link> design pattern. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Observer">Observer</link></para>

<para>Abstract class template for observer in the observer design pattern. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1OptionalLabel">OptionalLabel</link></para>

<para>An optional <link linkend="_classUtil_1_1Label">Label</link> string in a file format. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Pair">Pair</link></para>

<para>An array of exactly 2 objects. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ParamComponent">ParamComponent</link></para>

<para>Abstract base class for classes that input and output parameters to file. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ParamComposite">ParamComposite</link></para>

<para>An object that can read multiple parameters from file. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Parameter">Parameter</link></para>

<para>A single variable in a parameter file. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1PArray">PArray</link></para>

<para>An array that only holds pointers to its elements. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1PArrayIterator">PArrayIterator</link></para>

<para>Forward iterator for a <link linkend="_classUtil_1_1PArray">PArray</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Polynomial">Polynomial</link></para>

<para>A <link linkend="_classUtil_1_1Polynomial">Polynomial</link> (i.e,. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1RadialDistribution">RadialDistribution</link></para>

<para><link linkend="_classUtil_1_1Distribution">Distribution</link> (or histogram) of values for particle separations. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1RaggedMatrix">RaggedMatrix</link></para>

<para>A 2D array in which different rows can have different lengths. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Random">Random</link></para>

<para><link linkend="_classUtil_1_1Random">Random</link> number generator. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1RArray">RArray</link></para>

<para>An <link linkend="_classUtil_1_1Array">Array</link> that acts as a reference to another <link linkend="_classUtil_1_1Array">Array</link> or C array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Rational">Rational</link></para>

<para>A <link linkend="_classUtil_1_1Rational">Rational</link> number (a ratio of integers). </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1RingBuffer">RingBuffer</link></para>

<para>Class for storing history of previous values in an array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ScalarParam">ScalarParam</link></para>

<para>Template for a <link linkend="_classUtil_1_1Parameter">Parameter</link> object associated with a scalar variable. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ScopedPtr">ScopedPtr</link></para>

<para>A very simple RAII pointer. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Serializable">Serializable</link></para>

<para>Abstract class for serializable objects. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Setable">Setable</link></para>

<para>Template for a value that can be set or declared null (i.e., unknown). </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Signal">Signal</link></para>

<para><link linkend="_classUtil_1_1Notifier">Notifier</link> (or subject) in the <link linkend="_classUtil_1_1Observer">Observer</link> design pattern. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Signal_3_01void_01_4">Signal&lt; void &gt;</link></para>

<para><link linkend="_classUtil_1_1Notifier">Notifier</link> (or subject) in the <link linkend="_classUtil_1_1Observer">Observer</link> design pattern (zero parameters). </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1SSet">SSet</link></para>

<para>Statically allocated array of pointers to an unordered set. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Str">Str</link></para>

<para>Wrapper for a std::string, for formatted ostream output. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1SymmTensorAverage">SymmTensorAverage</link></para>

<para>Calculates averages of all components of a Tensor-valued variable. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Tensor">Tensor</link></para>

<para>A <link linkend="_classUtil_1_1Tensor">Tensor</link> represents a Cartesian tensor. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1TensorAverage">TensorAverage</link></para>

<para>Calculates averages of all components of a Tensor-valued variable. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1TextFileIArchive">TextFileIArchive</link></para>

<para>Loading archive for text istream. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1TextFileOArchive">TextFileOArchive</link></para>

<para>Saving archive for character based ostream. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Timer">Timer</link></para>

<para>Wall clock timer. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1Vector">Vector</link></para>

<para>A <link linkend="_classUtil_1_1Vector">Vector</link> is a Cartesian vector. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1XdrFileIArchive">XdrFileIArchive</link></para>

<para>Loading / input archive for binary XDR file. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1XdrFileOArchive">XdrFileOArchive</link></para>

<para>Saving / output archive for binary XDR file. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1XmlAttribute">XmlAttribute</link></para>

<para>Parser for an XML attribute. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1XmlBase">XmlBase</link></para>

<para>Base class for classes that parse XML markup tags. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1XmlEndTag">XmlEndTag</link></para>

<para>Parser for an XML end tag. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1XmlStartTag">XmlStartTag</link></para>

<para>Parser for an XML start tag. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1XmlXmlTag">XmlXmlTag</link></para>

<para>Parser for an XML file declaration tag (first line in file). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef unsigned char <link linkend="_namespaceUtil_1aeb6f2071b71e3433dd3cfc1bce6c2e6d">Byte</link></para>

<para>Define a &quot;Byte&quot; type. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>float <link linkend="_namespaceUtil_1aea7ab369392718998a65d82695894a53">product</link> (float a, float b)</para>

<para>Product for float Data. </para>
</listitem>
            <listitem><para>double <link linkend="_namespaceUtil_1a1e94eb5e165e547f767adb80682956e7">product</link> (double a, double b)</para>

<para>Product for double Data. </para>
</listitem>
            <listitem><para>double <link linkend="_namespaceUtil_1af34150524b3cf16bb64c26568cb94bd5">product</link> (const <link linkend="_classUtil_1_1Vector">Vector</link> &amp;a, const <link linkend="_classUtil_1_1Vector">Vector</link> &amp;b)</para>

<para>Dot product for <link linkend="_classUtil_1_1Vector">Vector</link> Data. </para>
</listitem>
            <listitem><para>double <link linkend="_namespaceUtil_1a5cecc90d4e768ca24b60b7e940a21d78">product</link> (const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;a, const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;b)</para>

<para>Double contraction for <link linkend="_classUtil_1_1Tensor">Tensor</link> Data. </para>
</listitem>
            <listitem><para>complex&lt; float &gt; <link linkend="_namespaceUtil_1a81bceca7cbee1b9adaaafdb207d958e9">product</link> (complex&lt; float &gt; a, complex&lt; float &gt; b)</para>

<para>Inner product for complex&lt;float&gt; Data. </para>
</listitem>
            <listitem><para>complex&lt; double &gt; <link linkend="_namespaceUtil_1adfcbb9e41eceac498c999eec7a4c730e">product</link> (complex&lt; double &gt; a, complex&lt; double &gt; b)</para>

<para>Inner product for complex&lt;double&gt; Data. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceUtil_1a6b0a4a07e18f81dd20eb50016b17483e">setToZero</link> (int &amp;value)</para>

<para>Set an int variable to zero. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceUtil_1a892d1362ecc1ff6a8b9f47deeb688c1b">setToZero</link> (float &amp;value)</para>

<para>Set a float variable to zero. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceUtil_1a04d2f24e6a86acddc6a2ee4f52aa662b">setToZero</link> (double &amp;value)</para>

<para>Set a double variable to zero. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceUtil_1a51c96b050b890e51ea23de28d30fdf9d">setToZero</link> (<link linkend="_classUtil_1_1Vector">Vector</link> &amp;value)</para>

<para>Set a <link linkend="_classUtil_1_1Vector">Vector</link> variable to zero. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceUtil_1a8c48cdd44538fa853b2351b0205e0585">setToZero</link> (<link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;value)</para>

<para>Set a <link linkend="_classUtil_1_1Vector">Vector</link> variable to zero. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceUtil_1a6029b21f39b92288f2fa13f3cdd471b9">setToZero</link> (complex&lt; float &gt; &amp;value)</para>

<para>Set a complex&lt;float&gt; variable to zero. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceUtil_1a5e3022dcf521b82691df5c578735d1cd">setToZero</link> (complex&lt; double &gt; &amp;value)</para>

<para>Set a complex&lt;double&gt; variable to zero. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>int <link linkend="_namespaceUtil_1a260538732a3162d6f30774ad8d344873">memorySize</link> (T &amp;data)</para>

<para>Function template to compute memory size of one object. </para>
</listitem>
            <listitem><para>template&lt;class Archive , typename T &gt; </para><para>void <link linkend="_group__Serialize__Module_1ga3425912b370d34372bdd6939becb208f">serialize</link> (Archive &amp;ar, T &amp;data, const unsigned int version)</para>

<para>Serialize one object of type T. </para>
</listitem>
            <listitem><para>template&lt;class Archive , typename T &gt; </para><para>void <link linkend="_group__Serialize__Module_1ga965cecf6693616b058003471cbd786de">serializeEnum</link> (Archive &amp;ar, T &amp;data, const unsigned int version=0)</para>

<para>Serialize an enumeration value. </para>
</listitem>
            <listitem><para>template&lt;class Archive , typename T &gt; </para><para>void <link linkend="_group__Serialize__Module_1gaebec7331d2435226c0ca11acef0788bf">serializeCheck</link> (Archive &amp;ar, T &amp;data, const char *label=&quot;&quot;)</para>

<para>Save a value, or save and check correctness on loading. </para>
</listitem>
            <listitem><para>template&lt;typename Data &gt; </para><para>std::istream &amp; <link linkend="_namespaceUtil_1a6a3efee8c6c5e828dae7fc215af7b69c">operator&gt;&gt;</link> (std::istream &amp;in, <link linkend="_classUtil_1_1Pair">Pair</link>&lt; Data &gt; &amp;pair)</para>

<para>Input a <link linkend="_classUtil_1_1Pair">Pair</link> from an istream. </para>
</listitem>
            <listitem><para>template&lt;typename Data &gt; </para><para>std::ostream &amp; <link linkend="_namespaceUtil_1a4c46a5381b96baddfb933794f0699718">operator&lt;&lt;</link> (std::ostream &amp;out, const <link linkend="_classUtil_1_1Pair">Pair</link>&lt; Data &gt; &amp;pair)</para>

<para>Output a <link linkend="_classUtil_1_1Pair">Pair</link> to an ostream, without line breaks. </para>
</listitem>
            <listitem><para>std::istream &amp; <link linkend="_namespaceUtil_1a8ea2efa64e333a7932f43c7342fd46b8">operator&gt;&gt;</link> (std::istream &amp;in, <link linkend="_classUtil_1_1Bool">Bool</link> &amp;object)</para>

<para>Input stream extractor for an <link linkend="_classUtil_1_1Bool">Bool</link> object. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceUtil_1a8ab374c1cfd4c2c0d21a4d3e384db576">operator&lt;&lt;</link> (std::ostream &amp;out, const <link linkend="_classUtil_1_1Bool">Bool</link> &amp;object)</para>

<para>Output stream inserter for an <link linkend="_classUtil_1_1Bool">Bool</link> object. </para>
</listitem>
            <listitem><para>std::istream &amp; <link linkend="_namespaceUtil_1a2b17c94b0ca72c25f5e760b17e1421fe">operator&gt;&gt;</link> (std::istream &amp;in, <link linkend="_classUtil_1_1Dbl">Dbl</link> &amp;object)</para>

<para>Input stream extractor for an <link linkend="_classUtil_1_1Dbl">Dbl</link> object. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceUtil_1a4ecd3fb223b55f300aafa0cb36c7d285">operator&lt;&lt;</link> (std::ostream &amp;out, const <link linkend="_classUtil_1_1Dbl">Dbl</link> &amp;object)</para>

<para>Output stream inserter for an <link linkend="_classUtil_1_1Dbl">Dbl</link> object. </para>
</listitem>
            <listitem><para>std::istream &amp; <link linkend="_namespaceUtil_1af312f3b58c337a6b7473bd706137b684">operator&gt;&gt;</link> (std::istream &amp;in, <link linkend="_classUtil_1_1Int">Int</link> &amp;object)</para>

<para>Input stream extractor for an <link linkend="_classUtil_1_1Int">Int</link> object. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceUtil_1a0f1c5305523b2e8ce0334530d3139615">operator&lt;&lt;</link> (std::ostream &amp;out, const <link linkend="_classUtil_1_1Int">Int</link> &amp;object)</para>

<para>Output stream inserter for an <link linkend="_classUtil_1_1Int">Int</link> object. </para>
</listitem>
            <listitem><para>std::istream &amp; <link linkend="_namespaceUtil_1a74ba9a1d58c89508f1328696a379aab4">operator&gt;&gt;</link> (std::istream &amp;in, <link linkend="_classUtil_1_1Lng">Lng</link> &amp;object)</para>

<para>Input stream extractor for an <link linkend="_classUtil_1_1Lng">Lng</link> object. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceUtil_1aaeb7200dbbc583e2cff0a17c80ea9bf5">operator&lt;&lt;</link> (std::ostream &amp;out, const <link linkend="_classUtil_1_1Lng">Lng</link> &amp;object)</para>

<para>Output stream inserter for an <link linkend="_classUtil_1_1Lng">Lng</link> object. </para>
</listitem>
            <listitem><para>std::istream &amp; <link linkend="_namespaceUtil_1a2ebe838d94b6a84592eefc085eccb2bd">operator&gt;&gt;</link> (std::istream &amp;in, <link linkend="_classUtil_1_1Str">Str</link> &amp;object)</para>

<para>Input stream extractor for an <link linkend="_classUtil_1_1Str">Str</link> object. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceUtil_1a0e3fb169c51cb43662f4872af94e6ba4">operator&lt;&lt;</link> (std::ostream &amp;out, const <link linkend="_classUtil_1_1Str">Str</link> &amp;object)</para>

<para>Output stream inserter for an <link linkend="_classUtil_1_1Str">Str</link> object. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para>void <link linkend="_namespaceUtil_1aea4b68fdbe8e4832e252b372730cbbb3">write</link> (std::ostream &amp;out, double data)</para>

<para>Explicit specialization of write for double data. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para>void <link linkend="_namespaceUtil_1a2a3daa14a340d0979cb0a11d11e18b62">write</link> (std::ostream &amp;out, std::complex&lt; double &gt; data)</para>

<para>Explicit specialization of write for double data. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para>void <link linkend="_namespaceUtil_1a636ca407d0ebe11599d39bba56e867f7">write</link> (std::ostream &amp;out, int data)</para>

<para>Explicit specialization of write for int data. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para>void <link linkend="_namespaceUtil_1a92c1c2698744570a5f89652b38e6a47e">write</link> (std::ostream &amp;out, long data)</para>

<para>Explicit specialization of write for long data. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para>void <link linkend="_namespaceUtil_1a2916fa96ded6d81a6b333d6fde999c12">write</link> (std::ostream &amp;out, bool data)</para>

<para>Explicit specialization of write for bool data. </para>
</listitem>
            <listitem><para>template&lt;typename Type &gt; </para><para>void <link linkend="_group__Format__Module_1ga9ccb226b62d2b848cd3233c7cee9ba3f">write</link> (std::ostream &amp;out, Type data)</para>

<para>Function template for output in a standard format. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para>void <link linkend="_namespaceUtil_1a91ec83fcdd46eccf94672b9e51189cf0">write</link> (std::ostream &amp;out, std::string data)</para>

<para>Explicit specialization of write for std::string data. </para>
</listitem>
            <listitem><para>bool <link linkend="_group__Math__Module_1gaf9ba7221315579826dfe3f88eb717c04">feq</link> (double x, double y, double eps=1.0E-10)</para>

<para>Are two floating point numbers equal to within round-off error? </para>
</listitem>
            <listitem><para>int <link linkend="_group__Math__Module_1ga9754693e721344ee74376e5bc0c8676b">gcd</link> (int a, int b)</para>

<para>Compute greatest common divisor (gcd) of two integers. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>bool <link linkend="_namespaceUtil_1a03ebd877fcf2dd3fbd7a93349aac3ee3">operator==</link> (<link linkend="_classUtil_1_1Polynomial">Polynomial</link>&lt; T &gt; &amp;a, <link linkend="_classUtil_1_1Polynomial">Polynomial</link>&lt; T &gt; &amp;b)</para>

<para>Equality operator for polynomials. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>bool <link linkend="_namespaceUtil_1a949a5314e47cd38fe279f8d73d30361e">operator!=</link> (<link linkend="_classUtil_1_1Polynomial">Polynomial</link>&lt; T &gt; &amp;a, <link linkend="_classUtil_1_1Polynomial">Polynomial</link>&lt; T &gt; &amp;b)</para>

<para>Inequality operator for polynomials. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_classUtil_1_1Polynomial">Polynomial</link>&lt; T &gt; <link linkend="_namespaceUtil_1a292ac8789910860dead85af1170a6830">operator-</link> (<link linkend="_classUtil_1_1Polynomial">Polynomial</link>&lt; T &gt; const &amp;a)</para>

<para>Unary negation of polynomial. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceUtil_1a3e2bebf4f430034b760006a2b7a445ba">operator&lt;&lt;</link> (std::ostream &amp;out, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;rational)</para>

<para>Output stream inserter for a <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1a2ead618c03f27bd3a417bb67f5e539ec">operator+</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;b)</para>

<para>Compute sum of two rationals. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1a0fc3b4a18ba7c652ce92422b312a5368">operator+</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, int b)</para>

<para>Compute sum of rational and integer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1a6efd3183b6ee2b6e4d8f7140fce31137">operator+</link> (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Compute sum of integer and integer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1aea9713ba3481b1c2e855b317ee8221d6">operator-</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;b)</para>

<para>Compute difference of rationals. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1a9de3f668246af23bcf6bb8cd0a8fbd73">operator-</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, int b)</para>

<para>Compute difference of rational and integer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1affa1870c34cd39cc444e153bd305a690">operator-</link> (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Compute difference of integer and rational. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1a0892dd4fce91319b19bd88fd86a95ec0">operator*</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;b)</para>

<para>Compute product of rationals. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1a4363e2738d605e2cf96146e55dd9bfa0">operator*</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, int b)</para>

<para>Compute product of rational and integer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1a9b0d30f98c0f208adc20f5e400d1eae8">operator*</link> (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Compute product of integer and rational. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1abe11e962b703893c01f12515b9ece242">operator/</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;b)</para>

<para>Compute quotient of two rationals. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1a3fc3419249e1a471521e726d8d918f77">operator/</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, int b)</para>

<para>Compute quotient <link linkend="_classUtil_1_1Rational">Rational</link> divided by integer. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1ae7916bdeddd3a051bfdc171dc32b4f56">operator/</link> (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Compute quotient integer divided by <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Rational">Rational</link> <link linkend="_namespaceUtil_1a2c2979dbbd83ccedbcfd7a898110f460">operator-</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Unary negation of <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a579bcb386c60d5dfa3d61e7e603ddc59">operator==</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;b)</para>

<para>Equality operators. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1af7e80b390774175cf4ede7981a340dc5">operator==</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, int b)</para>

<para>Equality operator for a <link linkend="_classUtil_1_1Rational">Rational</link> and an integer. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1ad9cba9ac3086d50289f2f4043daaf78b">operator==</link> (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Equality operator for an integer and a <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1aa744246ac5d0d3ebb14a148d5f2213d0">operator!=</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;b)</para>

<para>Inequality operators. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a3b8861b61ab622a8d4597f4634b6ddcc">operator!=</link> (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a, int b)</para>

<para>Inequality operator for a <link linkend="_classUtil_1_1Rational">Rational</link> and an integer. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a958d62aa24d2de7209137ffa510681ee">operator!=</link> (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp;a)</para>

<para>Inequality operator for an integer and a <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceUtil_1ad59eef5bab97153dcd1f2e7ba905ef3a">MpiThrow</link> (<link linkend="_classUtil_1_1Exception">Exception</link> &amp;e)</para>

<para>Function to throw exception in MPI code. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceUtil_1ae378e26a0d525f0cdeb424f208724608">initStatic</link> ()</para>

<para>Guarantee initialization of all static class members in <link linkend="_namespaceUtil">Util</link> namespace. </para>
</listitem>
            <listitem><para>int <link linkend="_group__Misc__Module_1gaccdfb499eefe47a9f4831ebf6670a87c">rStrip</link> (std::string &amp;string)</para>

<para>Strip trailing whitespace from a string. </para>
</listitem>
            <listitem><para>void <link linkend="_group__Misc__Module_1ga4cd93415cf228d797c4aed0ee3b495a5">checkString</link> (std::istream &amp;in, const std::string &amp;expected)</para>

<para>Extract string from stream, and compare to expected value. </para>
</listitem>
            <listitem><para>std::string <link linkend="_group__Misc__Module_1ga69d6f862289b96b4b0c0591357c8823e">toString</link> (int n)</para>

<para>Return string representation of an integer. </para>
</listitem>
            <listitem><para>bool <link linkend="_group__Misc__Module_1gae9fc3c33d8ea0780790a683554afa949">getLine</link> (std::istream &amp;in, std::stringstream &amp;line)</para>

<para>Read the next line into a stringstream. </para>
</listitem>
            <listitem><para>bool <link linkend="_group__Misc__Module_1ga68d0c067bdff7f1daa80e2efa94269dd">getNextLine</link> (std::istream &amp;in, std::string &amp;line)</para>

<para>Read the next non-empty line into a string, strip trailing whitespace. </para>
</listitem>
            <listitem><para>bool <link linkend="_group__Misc__Module_1gab2cae028b0ffb7733bc133ca6a6bf5e2">getNextLine</link> (std::istream &amp;in, std::stringstream &amp;line)</para>

<para>Read next non-empty line into a stringstream, strip trailing whitespace. </para>
</listitem>
            <listitem><para>void <link linkend="_namespaceUtil_1abf1dabb8884f4f1d6900ad5ae3c84eb8">checkRequiredIstream</link> (std::istream &amp;in)</para>

<para>Check status of a std::istream just before reading required variable. </para>
</listitem>
            <listitem><para>template&lt;typename D , typename B , typename M &gt; </para><para>ptrdiff_t <link linkend="_group__Misc__Module_1ga67d014efd4872847fdf364d4ac0eeda6">memberOffset</link> (D &amp;object, M B::*memPtr)</para>

<para>Template for calculating offsets of data members. </para>
</listitem>
            <listitem><para>template&lt;typename D , typename B &gt; </para><para>ptrdiff_t <link linkend="_namespaceUtil_1ade61a5e8efb4a94affadad6b14f6cf38">baseOffset</link> (D &amp;object)</para>

<para>Template for calculating offsets of base class subobjects. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para>void <link linkend="_namespaceUtil_1a5d61a39bc314fa7c9f2d6c3656a4791a">send&lt; bool &gt;</link> (MPI::Comm &amp;comm, bool &amp;data, int dest, int tag)</para>

<para>Explicit specialization of send for bool data. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para>void <link linkend="_namespaceUtil_1a9ccd68b4d89ff818829b4021976ad83a">recv&lt; bool &gt;</link> (MPI::Comm &amp;comm, bool &amp;data, int source, int tag)</para>

<para>Explicit specialization of recv for bool data. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para>void <link linkend="_namespaceUtil_1ac338ed91940648cfb7485e336709bb33">bcast&lt; bool &gt;</link> (MPI::Intracomm &amp;comm, bool &amp;data, int root)</para>

<para>Explicit specialization of bcast for bool data. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para>void <link linkend="_namespaceUtil_1ac8c1730e0049d03692fa3987eace32e0">send&lt; std::string &gt;</link> (MPI::Comm &amp;comm, std::string &amp;data, int dest, int tag)</para>

<para>Explicit specialization of send for std::string data. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para>void <link linkend="_namespaceUtil_1a4f41ec3e79fb6239d373593525a39ec6">recv&lt; std::string &gt;</link> (MPI::Comm &amp;comm, std::string &amp;data, int source, int tag)</para>

<para>Explicit specialization of recv for std::string data. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para>void <link linkend="_namespaceUtil_1aae91f9a729a65246d891fe0b0b5bd41a">bcast&lt; std::string &gt;</link> (MPI::Intracomm &amp;comm, std::string &amp;data, int root)</para>

<para>Explicit specialization of bcast for std::string data. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_namespaceUtil_1a256b47167538c90b512abdb5a5cc562d">send</link> (MPI::Comm &amp;comm, T &amp;data, int dest, int tag)</para>

<para>Send a single T value. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_namespaceUtil_1ac5da0397a02bafb86b9d53c403062f42">recv</link> (MPI::Comm &amp;comm, T &amp;data, int source, int tag)</para>

<para>Receive a single T value. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_namespaceUtil_1abfd28295c1ca99087a002f5fedb5c526">bcast</link> (MPI::Intracomm &amp;comm, T &amp;data, int root)</para>

<para>Broadcast a single T value. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_namespaceUtil_1a4784bbd7a1689cdf3baa93d157f7ccdc">send</link> (MPI::Comm &amp;comm, T *array, int count, int dest, int tag)</para>

<para>Send a C-array of T values. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_namespaceUtil_1ad19e2cf503c1b63484c9ae092382df99">recv</link> (MPI::Comm &amp;comm, T *array, int count, int source, int tag)</para>

<para>Receive a C-array of T objects. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_namespaceUtil_1ad19da3b7fe8ce666e04c02fa8914fb5e">bcast</link> (MPI::Intracomm &amp;comm, T *array, int count, int root)</para>

<para>Broadcast a C-array of T objects. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_namespaceUtil_1a0deddd28b3c47d4f134c7427171f7864">send</link> (MPI::Comm &amp;comm, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; T &gt; &amp;array, int count, int dest, int tag)</para>

<para>Send a DArray&lt;T&gt; container. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_namespaceUtil_1a1bde7479caa958846c97e4cc4e12f9fc">recv</link> (MPI::Comm &amp;comm, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; T &gt; &amp;array, int count, int source, int tag)</para>

<para>Receive a DArray&lt;T&gt; container. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_namespaceUtil_1a803a35549d11f824fb6398a9ba611a66">bcast</link> (MPI::Intracomm &amp;comm, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; T &gt; &amp;array, int count, int root)</para>

<para>Broadcast a DArray&lt;T&gt; container. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_namespaceUtil_1aec66ff165d24e1c1db70d2d21a84c6b8">send</link> (MPI::Comm &amp;comm, <link linkend="_classUtil_1_1DMatrix">DMatrix</link>&lt; T &gt; &amp;matrix, int m, int n, int dest, int tag)</para>

<para>Send a DMatrix&lt;T&gt; container. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_namespaceUtil_1a03ab9d8d4adf38632647e841db76a4f8">recv</link> (MPI::Comm &amp;comm, <link linkend="_classUtil_1_1DMatrix">DMatrix</link>&lt; T &gt; &amp;matrix, int m, int n, int source, int tag)</para>

<para>Receive a DMatrix&lt;T&gt; container. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_namespaceUtil_1a582d7d41457fcd3badb29316253f9b9c">bcast</link> (MPI::Intracomm &amp;comm, <link linkend="_classUtil_1_1DMatrix">DMatrix</link>&lt; T &gt; &amp;matrix, int m, int n, int root)</para>

<para>Broadcast a DMatrix&lt;T&gt; container. </para>
</listitem>
            <listitem><para>std::istream &amp; <link linkend="_namespaceUtil_1a8301f4a2bb0afc29b7bcac4604151d0b">operator&gt;&gt;</link> (std::istream &amp;in, <link linkend="_classUtil_1_1Label">Label</link> label)</para>

<para>Extractor for <link linkend="_classUtil_1_1Label">Label</link>. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceUtil_1a6d08f531a2e938c6e63314a5812df02f">operator&lt;&lt;</link> (std::ostream &amp;out, <link linkend="_classUtil_1_1Label">Label</link> label)</para>

<para>Inserter for <link linkend="_classUtil_1_1Label">Label</link>. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>bool <link linkend="_namespaceUtil_1a96e37264ea1f5c0c72e708621934254a">isNull</link> (<link linkend="_classUtil_1_1FlexPtr">FlexPtr</link>&lt; T &gt; p)</para>

<para>Return true iff the enclosed built-in pointer is null. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>bool <link linkend="_namespaceUtil_1a0dd0b0c7a52328ddf197bf5e7c0d49e0">isNull</link> (T *ptr)</para>

<para>Return true iff a built-in pointer is null. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>bool <link linkend="_namespaceUtil_1a55c2b946593a6de749b3c863968ea84b">isNull</link> (<link linkend="_classUtil_1_1ScopedPtr">ScopedPtr</link>&lt; T &gt; p)</para>

<para>Return true iff the enclosed built-in pointer is null. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1af3b67cf187dbf43796687881bc38f3fd">operator==</link> (const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp;v1, const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp;v2)</para>

<para>Equality for IntVectors. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a1403b915ed1e3e287256a5b52955d46b">operator==</link> (const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp;v1, const int *v2)</para>

<para>Equality of <link linkend="_classUtil_1_1IntVector">IntVector</link> and C array. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a6187b72daa8f5feef8ac016a4f03e7db">operator==</link> (const int *v1, const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp;v2)</para>

<para>Equality of C array and <link linkend="_classUtil_1_1IntVector">IntVector</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a91f9d9c09a665591d9d78aee8f49a804">operator!=</link> (const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp;v1, const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp;v2)</para>

<para>Inequality of two IntVectors. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a019f73173fb01204fd3bb2c97a5ea6e9">operator!=</link> (const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp;v1, const int *v2)</para>

<para>Inequality of <link linkend="_classUtil_1_1IntVector">IntVector</link> and C array. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a393d6fafd566aebd1c05b80f6b1b8c1c">operator!=</link> (const int *v1, const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp;v2)</para>

<para>Inequality of C array and <link linkend="_classUtil_1_1IntVector">IntVector</link>. </para>
</listitem>
            <listitem><para>std::istream &amp; <link linkend="_namespaceUtil_1a244a3547e6afa1a3441e1cbad7d3801c">operator&gt;&gt;</link> (std::istream &amp;in, <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp;vector)</para>

<para>istream extractor for a <link linkend="_classUtil_1_1IntVector">IntVector</link>. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceUtil_1a45886e51836cd3a74c99bbdfb7c21d17">operator&lt;&lt;</link> (std::ostream &amp;out, const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp;vector)</para>

<para>ostream inserter for a <link linkend="_classUtil_1_1IntVector">IntVector</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a5308ef4f3a71a983ee035867cfdfb9d0">operator==</link> (const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;t1, const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;t2)</para>

<para>Equality for Tensors. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1aff7e66515cf8148cde71c38303356b33">operator==</link> (const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;t1, const double t2[][<link linkend="_group__Space__Module_1ga2772f5ec799816685d37798d8d358ef7">Dimension</link>])</para>

<para>Equality of <link linkend="_classUtil_1_1Tensor">Tensor</link> and 2D C array. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a50207012b46bacb590b3ff53e52aad39">operator==</link> (const double t1[][<link linkend="_group__Space__Module_1ga2772f5ec799816685d37798d8d358ef7">Dimension</link>], const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;t2)</para>

<para>Equality of C array and <link linkend="_classUtil_1_1Tensor">Tensor</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a406f4f64d0d001b9485b51809e7bb2e2">operator!=</link> (const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;t1, const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;t2)</para>

<para>Negation of t1 == t2 (tensors t1 and t2) </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a8220da6cf61b0f7d172e67ab5027dba8">operator!=</link> (const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;t1, const double a2[][<link linkend="_group__Space__Module_1ga2772f5ec799816685d37798d8d358ef7">Dimension</link>])</para>

<para>Negation of t1 == a2 (tensor t1, 2D array a2) </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1af526befb1d26d9245385d8c95813f8e6">operator!=</link> (const double a1[][<link linkend="_group__Space__Module_1ga2772f5ec799816685d37798d8d358ef7">Dimension</link>], const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;t2)</para>

<para>Negation of t1 == a2 (tensor t2, 2D array a1) </para>
</listitem>
            <listitem><para>std::istream &amp; <link linkend="_namespaceUtil_1a8f03c100d8796ed1adb05c2363cbca76">operator&gt;&gt;</link> (std::istream &amp;in, <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;tensor)</para>

<para>istream extractor for a <link linkend="_classUtil_1_1Tensor">Tensor</link>. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceUtil_1a502d0e8fd91db6d9f0355439e02db401">operator&lt;&lt;</link> (std::ostream &amp;out, const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp;tensor)</para>

<para>ostream inserter for a <link linkend="_classUtil_1_1Tensor">Tensor</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a7f8bc8eb7d6ebd87734fcecb6f34d7bd">operator==</link> (const <link linkend="_classUtil_1_1Vector">Vector</link> &amp;v1, const <link linkend="_classUtil_1_1Vector">Vector</link> &amp;v2)</para>

<para>Equality for Vectors. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1ad62d196575cf2524bf350daa05f3dcc6">operator==</link> (const <link linkend="_classUtil_1_1Vector">Vector</link> &amp;v1, const double *v2)</para>

<para>Equality of <link linkend="_classUtil_1_1Vector">Vector</link> and C array. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a26988c364a99e23ded2e030f458d813a">operator==</link> (const double *v1, const <link linkend="_classUtil_1_1Vector">Vector</link> &amp;v2)</para>

<para>Equality of C array and <link linkend="_classUtil_1_1Vector">Vector</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a7213643ae10d3cd422e98af441234ec2">operator!=</link> (const <link linkend="_classUtil_1_1Vector">Vector</link> &amp;v1, const <link linkend="_classUtil_1_1Vector">Vector</link> &amp;v2)</para>

<para>Inequality of two Vectors. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1a47dd55c0137962a0d93b75f97537a5d9">operator!=</link> (const <link linkend="_classUtil_1_1Vector">Vector</link> &amp;v1, const double *v2)</para>

<para>Inequality of <link linkend="_classUtil_1_1Vector">Vector</link> and C array. </para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceUtil_1aca0bc66093f89ca45236b0e2de39bd7f">operator!=</link> (const double *v1, const <link linkend="_classUtil_1_1Vector">Vector</link> &amp;v2)</para>

<para>Inequality of C array and <link linkend="_classUtil_1_1Vector">Vector</link>. </para>
</listitem>
            <listitem><para>std::istream &amp; <link linkend="_namespaceUtil_1a5d9e39cc195b13586ad69117ac91e98c">operator&gt;&gt;</link> (std::istream &amp;in, <link linkend="_classUtil_1_1Vector">Vector</link> &amp;vector)</para>

<para>istream extractor for a <link linkend="_classUtil_1_1Vector">Vector</link>. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_namespaceUtil_1a618ba88da1f7578c8d970225faf43a46">operator&lt;&lt;</link> (std::ostream &amp;out, const <link linkend="_classUtil_1_1Vector">Vector</link> &amp;vector)</para>

<para>ostream inserter for a <link linkend="_classUtil_1_1Vector">Vector</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>const int <link linkend="_group__Space__Module_1ga2772f5ec799816685d37798d8d358ef7">Dimension</link> = 3</para>

<para>Dimensionality of space. </para>
</listitem>
            <listitem><para>const int <link linkend="_group__Space__Module_1gaba1e0e490046919d488d1dc7505d8003">DimensionSq</link> = <link linkend="_group__Space__Module_1ga2772f5ec799816685d37798d8d358ef7">Dimension</link>*<link linkend="_group__Space__Module_1ga2772f5ec799816685d37798d8d358ef7">Dimension</link></para>

<para>Square of Dimensionality of space. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Utility classes for scientific computation. </para>
</section>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_namespaceUtil_1aeb6f2071b71e3433dd3cfc1bce6c2e6d"/>    <section>
    <title>Byte</title>
<indexterm><primary>Byte</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>Byte</secondary></indexterm>
<para><computeroutput>typedef unsigned char <link linkend="_namespaceUtil_1aeb6f2071b71e3433dd3cfc1bce6c2e6d">Util::Byte</link></computeroutput></para><para>

<para>Define a &quot;Byte&quot; type. </para>
</para>
<para>
Definition at line 19 of file Byte.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespaceUtil_1aea7ab369392718998a65d82695894a53"/>    <section>
    <title>product()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>product</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>product</secondary></indexterm>
<para><computeroutput>float Util::product (float a, float b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Product for float Data. </para>
</para>
<para>
Definition at line 22 of file product.h.</para>
<para>
Referenced by Util::AutoCorr&lt; Data, Product &gt;::autoCorrelation(), Util::AutoCorr&lt; Data, Product &gt;::corrTime(), Util::AutoCorrArray&lt; Data, Product &gt;::corrTime(), Util::AutoCorr&lt; Data, Product &gt;::output(), Util::AutoCorrStage&lt; Data, Product &gt;::sample(), Util::AutoCorr&lt; Data, Product &gt;::sample(), and Util::AutoCorrArray&lt; Data, Product &gt;::sample().</para>
    </section><anchor xml:id="_namespaceUtil_1a1e94eb5e165e547f767adb80682956e7"/>    <section>
    <title>product()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>product</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>product</secondary></indexterm>
<para><computeroutput>double Util::product (double a, double b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Product for double Data. </para>
</para>
<para>
Definition at line 28 of file product.h.</para>
    </section><anchor xml:id="_namespaceUtil_1af34150524b3cf16bb64c26568cb94bd5"/>    <section>
    <title>product()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>product</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>product</secondary></indexterm>
<para><computeroutput>double Util::product (const <link linkend="_classUtil_1_1Vector">Vector</link> &amp; a, const <link linkend="_classUtil_1_1Vector">Vector</link> &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Dot product for <link linkend="_classUtil_1_1Vector">Vector</link> Data. </para>
</para>
<para>
Definition at line 34 of file product.h.</para>
<para>
References Util::Vector::dot().</para>
    </section><anchor xml:id="_namespaceUtil_1a5cecc90d4e768ca24b60b7e940a21d78"/>    <section>
    <title>product()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>product</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>product</secondary></indexterm>
<para><computeroutput>double Util::product (const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; a, const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Double contraction for <link linkend="_classUtil_1_1Tensor">Tensor</link> Data. </para>
</para>
<para>
Definition at line 40 of file product.h.</para>
<para>
References Dimension.</para>
    </section><anchor xml:id="_namespaceUtil_1a81bceca7cbee1b9adaaafdb207d958e9"/>    <section>
    <title>product()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>product</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>product</secondary></indexterm>
<para><computeroutput>complex&lt;float&gt; Util::product (complex&lt; float &gt; a, complex&lt; float &gt; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inner product for complex&lt;float&gt; Data. </para>
</para>
<para>
Definition at line 55 of file product.h.</para>
    </section><anchor xml:id="_namespaceUtil_1adfcbb9e41eceac498c999eec7a4c730e"/>    <section>
    <title>product()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>product</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>product</secondary></indexterm>
<para><computeroutput>complex&lt;double&gt; Util::product (complex&lt; double &gt; a, complex&lt; double &gt; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inner product for complex&lt;double&gt; Data. </para>
</para>
<para>
Definition at line 61 of file product.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a6b0a4a07e18f81dd20eb50016b17483e"/>    <section>
    <title>setToZero()<computeroutput>[1/7]</computeroutput></title>
<indexterm><primary>setToZero</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>setToZero</secondary></indexterm>
<para><computeroutput>void Util::setToZero (int &amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set an int variable to zero. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>value to be zeroed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 25 of file setToZero.h.</para>
<para>
Referenced by Util::AutoCorr&lt; Data, Product &gt;::AutoCorr(), Util::AutoCorrArray&lt; Data, Product &gt;::AutoCorrArray(), Util::AutoCorrStage&lt; Data, Product &gt;::autoCorrelation(), Util::AutoCorrStage&lt; Data, Product &gt;::AutoCorrStage(), Util::AutoCorr&lt; Data, Product &gt;::clear(), Util::AutoCorrStage&lt; Data, Product &gt;::clear(), Util::MeanSqDispArray&lt; Data &gt;::clear(), Util::AutoCorrArray&lt; Data, Product &gt;::clear(), Util::AutoCorr&lt; Data, Product &gt;::corrTime(), Util::AutoCorrArray&lt; Data, Product &gt;::corrTime(), Util::AutoCorrStage&lt; Data, Product &gt;::corrTime(), Pscf::dot(), Util::Polynomial&lt; double &gt;::operator*=(), Util::Polynomial&lt; double &gt;::operator=(), Util::AutoCorrStage&lt; Data, Product &gt;::output(), Util::AutoCorrStage&lt; Data, Product &gt;::sample(), and Pscf::Vec&lt; D, int &gt;::setToZero().</para>
    </section><anchor xml:id="_namespaceUtil_1a892d1362ecc1ff6a8b9f47deeb688c1b"/>    <section>
    <title>setToZero()<computeroutput>[2/7]</computeroutput></title>
<indexterm><primary>setToZero</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>setToZero</secondary></indexterm>
<para><computeroutput>void Util::setToZero (float &amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set a float variable to zero. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>value to be zeroed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 33 of file setToZero.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a04d2f24e6a86acddc6a2ee4f52aa662b"/>    <section>
    <title>setToZero()<computeroutput>[3/7]</computeroutput></title>
<indexterm><primary>setToZero</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>setToZero</secondary></indexterm>
<para><computeroutput>void Util::setToZero (double &amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set a double variable to zero. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>value to be zeroed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 41 of file setToZero.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a51c96b050b890e51ea23de28d30fdf9d"/>    <section>
    <title>setToZero()<computeroutput>[4/7]</computeroutput></title>
<indexterm><primary>setToZero</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>setToZero</secondary></indexterm>
<para><computeroutput>void Util::setToZero (<link linkend="_classUtil_1_1Vector">Vector</link> &amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set a <link linkend="_classUtil_1_1Vector">Vector</link> variable to zero. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>value to be zeroed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 49 of file setToZero.h.</para>
<para>
References Util::Vector::zero().</para>
    </section><anchor xml:id="_namespaceUtil_1a8c48cdd44538fa853b2351b0205e0585"/>    <section>
    <title>setToZero()<computeroutput>[5/7]</computeroutput></title>
<indexterm><primary>setToZero</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>setToZero</secondary></indexterm>
<para><computeroutput>void Util::setToZero (<link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set a <link linkend="_classUtil_1_1Vector">Vector</link> variable to zero. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>value to be zeroed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 57 of file setToZero.h.</para>
<para>
References Util::Tensor::zero().</para>
    </section><anchor xml:id="_namespaceUtil_1a6029b21f39b92288f2fa13f3cdd471b9"/>    <section>
    <title>setToZero()<computeroutput>[6/7]</computeroutput></title>
<indexterm><primary>setToZero</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>setToZero</secondary></indexterm>
<para><computeroutput>void Util::setToZero (complex&lt; float &gt; &amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set a complex&lt;float&gt; variable to zero. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>value to be zeroed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 65 of file setToZero.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a5e3022dcf521b82691df5c578735d1cd"/>    <section>
    <title>setToZero()<computeroutput>[7/7]</computeroutput></title>
<indexterm><primary>setToZero</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>setToZero</secondary></indexterm>
<para><computeroutput>void Util::setToZero (complex&lt; double &gt; &amp; value)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set a complex&lt;double&gt; variable to zero. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>value to be zeroed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 73 of file setToZero.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a260538732a3162d6f30774ad8d344873"/>    <section>
    <title>memorySize()</title>
<indexterm><primary>memorySize</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>memorySize</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int Util::memorySize (T &amp; data)</computeroutput></para><para>

<para>Function template to compute memory size of one object. </para>
</para>
<para>
Definition at line 130 of file MemoryCounter.h.</para>
<para>
References Util::MemoryCounter::size().</para>
    </section><anchor xml:id="_namespaceUtil_1a6a3efee8c6c5e828dae7fc215af7b69c"/>    <section>
    <title>operator&gt;&gt;()<computeroutput>[1/10]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>std::istream&amp; Util::operator&gt;&gt; (std::istream &amp; in, <link linkend="_classUtil_1_1Pair">Pair</link>&lt; Data &gt; &amp; pair)</computeroutput></para><para>

<para>Input a <link linkend="_classUtil_1_1Pair">Pair</link> from an istream. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>istream from which to read </para>
</entry>
                            </row>
                            <row>
                                <entry>pair</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Pair">Pair</link> to be read </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 44 of file Pair.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a4c46a5381b96baddfb933794f0699718"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[1/11]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>std::ostream&amp; Util::operator&lt;&lt; (std::ostream &amp; out, const <link linkend="_classUtil_1_1Pair">Pair</link>&lt; Data &gt; &amp; pair)</computeroutput></para><para>

<para>Output a <link linkend="_classUtil_1_1Pair">Pair</link> to an ostream, without line breaks. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>ostream to which to write </para>
</entry>
                            </row>
                            <row>
                                <entry>pair</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Pair">Pair</link> to be written </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 57 of file Pair.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a8ea2efa64e333a7932f43c7342fd46b8"/>    <section>
    <title>operator&gt;&gt;()<computeroutput>[2/10]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<para><computeroutput>std::istream &amp; Util::operator&gt;&gt; (std::istream &amp; in, <link linkend="_classUtil_1_1Bool">Bool</link> &amp; object)</computeroutput></para><para>

<para>Input stream extractor for an <link linkend="_classUtil_1_1Bool">Bool</link> object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                            <row>
                                <entry>object</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Bool">Bool</link> object to be read from stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified input stream </para>
</formalpara>
</para>
<para>
Definition at line 47 of file Bool.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a8ab374c1cfd4c2c0d21a4d3e384db576"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[2/11]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Util::operator&lt;&lt; (std::ostream &amp; out, const <link linkend="_classUtil_1_1Bool">Bool</link> &amp; object)</computeroutput></para><para>

<para>Output stream inserter for an <link linkend="_classUtil_1_1Bool">Bool</link> object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                            <row>
                                <entry>object</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Bool">Bool</link> to be written to stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified output stream </para>
</formalpara>
</para>
<para>
Definition at line 56 of file Bool.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a2b17c94b0ca72c25f5e760b17e1421fe"/>    <section>
    <title>operator&gt;&gt;()<computeroutput>[3/10]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<para><computeroutput>std::istream &amp; Util::operator&gt;&gt; (std::istream &amp; in, <link linkend="_classUtil_1_1Dbl">Dbl</link> &amp; object)</computeroutput></para><para>

<para>Input stream extractor for an <link linkend="_classUtil_1_1Dbl">Dbl</link> object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                            <row>
                                <entry>object</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Dbl">Dbl</link> object to be read from stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified input stream </para>
</formalpara>
</para>
<para>
Definition at line 73 of file Dbl.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a4ecd3fb223b55f300aafa0cb36c7d285"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[3/11]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Util::operator&lt;&lt; (std::ostream &amp; out, const <link linkend="_classUtil_1_1Dbl">Dbl</link> &amp; object)</computeroutput></para><para>

<para>Output stream inserter for an <link linkend="_classUtil_1_1Dbl">Dbl</link> object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                            <row>
                                <entry>object</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Dbl">Dbl</link> to be written to stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified output stream </para>
</formalpara>
</para>
<para>
Definition at line 86 of file Dbl.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1af312f3b58c337a6b7473bd706137b684"/>    <section>
    <title>operator&gt;&gt;()<computeroutput>[4/10]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<para><computeroutput>std::istream &amp; Util::operator&gt;&gt; (std::istream &amp; in, <link linkend="_classUtil_1_1Int">Int</link> &amp; object)</computeroutput></para><para>

<para>Input stream extractor for an <link linkend="_classUtil_1_1Int">Int</link> object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                            <row>
                                <entry>object</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Int">Int</link> object to be read from stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified input stream </para>
</formalpara>
</para>
<para>
Definition at line 71 of file Int.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a0f1c5305523b2e8ce0334530d3139615"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[4/11]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Util::operator&lt;&lt; (std::ostream &amp; out, const <link linkend="_classUtil_1_1Int">Int</link> &amp; object)</computeroutput></para><para>

<para>Output stream inserter for an <link linkend="_classUtil_1_1Int">Int</link> object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                            <row>
                                <entry>object</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Int">Int</link> to be written to stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified output stream </para>
</formalpara>
</para>
<para>
Definition at line 84 of file Int.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a74ba9a1d58c89508f1328696a379aab4"/>    <section>
    <title>operator&gt;&gt;()<computeroutput>[5/10]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<para><computeroutput>std::istream &amp; Util::operator&gt;&gt; (std::istream &amp; in, <link linkend="_classUtil_1_1Lng">Lng</link> &amp; object)</computeroutput></para><para>

<para>Input stream extractor for an <link linkend="_classUtil_1_1Lng">Lng</link> object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                            <row>
                                <entry>object</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Lng">Lng</link> object to be read from stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified input stream </para>
</formalpara>
</para>
<para>
Definition at line 53 of file Lng.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1aaeb7200dbbc583e2cff0a17c80ea9bf5"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[5/11]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Util::operator&lt;&lt; (std::ostream &amp; out, const <link linkend="_classUtil_1_1Lng">Lng</link> &amp; object)</computeroutput></para><para>

<para>Output stream inserter for an <link linkend="_classUtil_1_1Lng">Lng</link> object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                            <row>
                                <entry>object</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Lng">Lng</link> to be written to stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified output stream </para>
</formalpara>
</para>
<para>
Definition at line 66 of file Lng.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a2ebe838d94b6a84592eefc085eccb2bd"/>    <section>
    <title>operator&gt;&gt;()<computeroutput>[6/10]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<para><computeroutput>std::istream &amp; Util::operator&gt;&gt; (std::istream &amp; in, <link linkend="_classUtil_1_1Str">Str</link> &amp; object)</computeroutput></para><para>

<para>Input stream extractor for an <link linkend="_classUtil_1_1Str">Str</link> object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                            <row>
                                <entry>object</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Str">Str</link> object to be read from stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified input stream </para>
</formalpara>
</para>
<para>
Definition at line 49 of file Str.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a0e3fb169c51cb43662f4872af94e6ba4"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[6/11]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Util::operator&lt;&lt; (std::ostream &amp; out, const <link linkend="_classUtil_1_1Str">Str</link> &amp; object)</computeroutput></para><para>

<para>Output stream inserter for an <link linkend="_classUtil_1_1Str">Str</link> object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                            <row>
                                <entry>object</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Str">Str</link> to be written to stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified output stream </para>
</formalpara>
</para>
<para>
Definition at line 58 of file Str.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1aea4b68fdbe8e4832e252b372730cbbb3"/>    <section>
    <title>write()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>write</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>write</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput>void Util::write (std::ostream &amp; out, double data)</computeroutput></para><para>

<para>Explicit specialization of write for double data. </para>
</para>
<para>
Definition at line 20 of file write.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a2a3daa14a340d0979cb0a11d11e18b62"/>    <section>
    <title>write()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>write</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>write</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput>void Util::write (std::ostream &amp; out, std::complex&lt; double &gt; data)</computeroutput></para><para>

<para>Explicit specialization of write for double data. </para>
</para>
<para>
Definition at line 24 of file write.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a636ca407d0ebe11599d39bba56e867f7"/>    <section>
    <title>write()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>write</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>write</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput>void Util::write (std::ostream &amp; out, int data)</computeroutput></para><para>

<para>Explicit specialization of write for int data. </para>
</para>
<para>
Definition at line 28 of file write.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a92c1c2698744570a5f89652b38e6a47e"/>    <section>
    <title>write()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>write</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>write</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput>void Util::write (std::ostream &amp; out, long data)</computeroutput></para><para>

<para>Explicit specialization of write for long data. </para>
</para>
<para>
Definition at line 32 of file write.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a2916fa96ded6d81a6b333d6fde999c12"/>    <section>
    <title>write()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>write</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>write</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput>void Util::write (std::ostream &amp; out, bool data)</computeroutput></para><para>

<para>Explicit specialization of write for bool data. </para>
</para>
<para>
Definition at line 36 of file write.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a91ec83fcdd46eccf94672b9e51189cf0"/>    <section>
    <title>write()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>write</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>write</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput>void Util::write (std::ostream &amp; out, std::string data)</computeroutput></para><para>

<para>Explicit specialization of write for std::string data. </para>
</para>
    </section><anchor xml:id="_namespaceUtil_1a03ebd877fcf2dd3fbd7a93349aac3ee3"/>    <section>
    <title>operator==()<computeroutput>[1/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool Util::operator== (<link linkend="_classUtil_1_1Polynomial">Polynomial</link>&lt; T &gt; &amp; a, <link linkend="_classUtil_1_1Polynomial">Polynomial</link>&lt; T &gt; &amp; b)</computeroutput></para><para>

<para>Equality operator for polynomials. </para>
</para>

<para>Two polynomials are equal iff they have the same degree and the the same values for all coefficients.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st polynomial </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2nd polynomial </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if a != b </para>
</formalpara>
</para>
<para>
Definition at line 676 of file Polynomial.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a949a5314e47cd38fe279f8d73d30361e"/>    <section>
    <title>operator!=()<computeroutput>[1/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool Util::operator!= (<link linkend="_classUtil_1_1Polynomial">Polynomial</link>&lt; T &gt; &amp; a, <link linkend="_classUtil_1_1Polynomial">Polynomial</link>&lt; T &gt; &amp; b)</computeroutput></para><para>

<para>Inequality operator for polynomials. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st polynomial </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2nd polynomial </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if a != b </para>
</formalpara>
</para>
<para>
Definition at line 695 of file Polynomial.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a292ac8789910860dead85af1170a6830"/>    <section>
    <title>operator-()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Polynomial">Polynomial</link>&lt;T&gt; Util::operator- (<link linkend="_classUtil_1_1Polynomial">Polynomial</link>&lt; T &gt; const &amp; a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Unary negation of polynomial. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>input polynomial </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>negated polynomial -a </para>
</formalpara>
</para>
<para>
Definition at line 706 of file Polynomial.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a3e2bebf4f430034b760006a2b7a445ba"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[7/11]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Util::operator&lt;&lt; (std::ostream &amp; out, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; rational)</computeroutput></para><para>

<para>Output stream inserter for a <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</para>

<para>Output elements of a rational to stream, without line breaks. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                            <row>
                                <entry>rational</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> to be written to stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified output stream </para>
</formalpara>
</para>
<para>
Definition at line 16 of file Rational.cpp.</para>
<para>
References UTIL_CHECK.</para>
    </section><anchor xml:id="_namespaceUtil_1a2ead618c03f27bd3a417bb67f5e539ec"/>    <section>
    <title>operator+()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator+ (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute sum of two rationals. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st argument </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2st argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>sum a + b </para>
</formalpara>
</para>
<para>
Definition at line 490 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a0fc3b4a18ba7c652ce92422b312a5368"/>    <section>
    <title>operator+()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator+ (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, int b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute sum of rational and integer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>sum a + b </para>
</formalpara>
</para>
<para>
Definition at line 505 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a6efd3183b6ee2b6e4d8f7140fce31137"/>    <section>
    <title>operator+()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator+</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator+</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator+ (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute sum of integer and integer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument </para>
</entry>
                            </row>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>sum a + b </para>
</formalpara>
</para>
<para>
Definition at line 519 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1aea9713ba3481b1c2e855b317ee8221d6"/>    <section>
    <title>operator-()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator- (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute difference of rationals. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st argument </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2st argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>difference a - b </para>
</formalpara>
</para>
<para>
Definition at line 530 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a9de3f668246af23bcf6bb8cd0a8fbd73"/>    <section>
    <title>operator-()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator- (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, int b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute difference of rational and integer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>difference a - b </para>
</formalpara>
</para>
<para>
Definition at line 545 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1affa1870c34cd39cc444e153bd305a690"/>    <section>
    <title>operator-()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator- (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute difference of integer and rational. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument </para>
</entry>
                            </row>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>difference b - a </para>
</formalpara>
</para>
<para>
Definition at line 559 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a0892dd4fce91319b19bd88fd86a95ec0"/>    <section>
    <title>operator*()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator* (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute product of rationals. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st <link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2st <link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>product a*b </para>
</formalpara>
</para>
<para>
Definition at line 573 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a4363e2738d605e2cf96146e55dd9bfa0"/>    <section>
    <title>operator*()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator* (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, int b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute product of rational and integer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>product a*b </para>
</formalpara>
</para>
<para>
Definition at line 588 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a9b0d30f98c0f208adc20f5e400d1eae8"/>    <section>
    <title>operator*()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator*</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator*</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator* (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute product of integer and rational. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument </para>
</entry>
                            </row>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>product a*b </para>
</formalpara>
</para>
<para>
Definition at line 599 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1abe11e962b703893c01f12515b9ece242"/>    <section>
    <title>operator/()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator/</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator/ (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute quotient of two rationals. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st <link linkend="_classUtil_1_1Rational">Rational</link> argument (numerator) </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2st <link linkend="_classUtil_1_1Rational">Rational</link> argument (denominator) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>ratio a/b </para>
</formalpara>
</para>
<para>
Definition at line 610 of file Rational.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1a3fc3419249e1a471521e726d8d918f77"/>    <section>
    <title>operator/()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator/</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator/ (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, int b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute quotient <link linkend="_classUtil_1_1Rational">Rational</link> divided by integer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument (numerator) </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument (denominator) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>ratio a/b </para>
</formalpara>
</para>
<para>
Definition at line 628 of file Rational.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1ae7916bdeddd3a051bfdc171dc32b4f56"/>    <section>
    <title>operator/()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>operator/</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator/</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator/ (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute quotient integer divided by <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer argument (numerator) </para>
</entry>
                            </row>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> argument (denominator) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>ratio b/a </para>
</formalpara>
</para>
<para>
Definition at line 644 of file Rational.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1a2c2979dbbd83ccedbcfd7a898110f460"/>    <section>
    <title>operator-()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator-</secondary></indexterm>
<para><computeroutput><link linkend="_classUtil_1_1Rational">Rational</link> Util::operator- (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Unary negation of <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> number </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>negation -a </para>
</formalpara>
</para>
<para>
Definition at line 661 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a579bcb386c60d5dfa3d61e7e603ddc59"/>    <section>
    <title>operator==()<computeroutput>[2/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Util::operator== (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Equality operators. </para>
</para>

<para>Equality operator for two <link linkend="_classUtil_1_1Rational">Rational</link> numbers.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st <link linkend="_classUtil_1_1Rational">Rational</link> </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2nd <link linkend="_classUtil_1_1Rational">Rational</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if equal, false otherwise </para>
</formalpara>
</para>
<para>
Definition at line 674 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1af7e80b390774175cf4ede7981a340dc5"/>    <section>
    <title>operator==()<computeroutput>[3/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Util::operator== (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, int b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Equality operator for a <link linkend="_classUtil_1_1Rational">Rational</link> and an integer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> number </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer number </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if equal, false otherwise </para>
</formalpara>
</para>
<para>
Definition at line 684 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1ad9cba9ac3086d50289f2f4043daaf78b"/>    <section>
    <title>operator==()<computeroutput>[4/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Util::operator== (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Equality operator for an integer and a <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer number </para>
</entry>
                            </row>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> number </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if equal, false otherwise </para>
</formalpara>
</para>
<para>
Definition at line 694 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1aa744246ac5d0d3ebb14a148d5f2213d0"/>    <section>
    <title>operator!=()<computeroutput>[2/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Util::operator!= (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inequality operators. </para>
</para>

<para>Inequality operator for two <link linkend="_classUtil_1_1Rational">Rational</link> numbers.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para>1st <link linkend="_classUtil_1_1Rational">Rational</link> </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>2nd <link linkend="_classUtil_1_1Rational">Rational</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if unequal, false if equal </para>
</formalpara>
</para>
<para>
Definition at line 706 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a3b8861b61ab622a8d4597f4634b6ddcc"/>    <section>
    <title>operator!=()<computeroutput>[3/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Util::operator!= (<link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a, int b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inequality operator for a <link linkend="_classUtil_1_1Rational">Rational</link> and an integer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> number </para>
</entry>
                            </row>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer number </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if unequal, false if equal </para>
</formalpara>
</para>
<para>
Definition at line 716 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a958d62aa24d2de7209137ffa510681ee"/>    <section>
    <title>operator!=()<computeroutput>[4/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Util::operator!= (int b, <link linkend="_classUtil_1_1Rational">Rational</link> const &amp; a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Inequality operator for an integer and a <link linkend="_classUtil_1_1Rational">Rational</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>b</entry>
                                <entry>
<para>integer number </para>
</entry>
                            </row>
                            <row>
                                <entry>a</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Rational">Rational</link> number </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>true if unequal, false if equal </para>
</formalpara>
</para>
<para>
Definition at line 726 of file Rational.h.</para>
    </section><anchor xml:id="_namespaceUtil_1ad59eef5bab97153dcd1f2e7ba905ef3a"/>    <section>
    <title>MpiThrow()</title>
<indexterm><primary>MpiThrow</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>MpiThrow</secondary></indexterm>
<para><computeroutput>void Util::MpiThrow (<link linkend="_classUtil_1_1Exception">Exception</link> &amp; e)</computeroutput></para><para>

<para>Function to throw exception in MPI code. </para>
</para>

<para>If MPI is not initialized, this function writes the message and calls MPI Abort. If MPI is not initialized, it simply throws the <link linkend="_classUtil_1_1Exception">Exception</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>e</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Exception">Exception</link> to be thrown. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 90 of file Exception.cpp.</para>
<para>
References Util::Log::close(), Util::Log::file(), and Util::Exception::message().</para>
    </section><anchor xml:id="_namespaceUtil_1ae378e26a0d525f0cdeb424f208724608"/>    <section>
    <title>initStatic()</title>
<indexterm><primary>initStatic</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>initStatic</secondary></indexterm>
<para><computeroutput>void Util::initStatic ( )</computeroutput></para><para>

<para>Guarantee initialization of all static class members in <link linkend="_namespaceUtil">Util</link> namespace. </para>
</para>
<para>
Definition at line 26 of file initStatic.cpp.</para>
<para>
References Util::Format::initStatic(), Util::Constants::initStatic(), Util::Log::initStatic(), Util::Memory::initStatic(), Util::ParamComponent::initStatic(), Util::Tensor::initStatic(), Util::Vector::initStatic(), and Util::IntVector::initStatic().</para>
    </section><anchor xml:id="_namespaceUtil_1abf1dabb8884f4f1d6900ad5ae3c84eb8"/>    <section>
    <title>checkRequiredIstream()</title>
<indexterm><primary>checkRequiredIstream</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>checkRequiredIstream</secondary></indexterm>
<para><computeroutput>void Util::checkRequiredIstream (std::istream &amp; in)</computeroutput></para><para>

<para>Check status of a std::istream just before reading required variable. </para>
</para>

<para>Throw <link linkend="_classUtil_1_1Exception">Exception</link> with appropriate error message if not good.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream from which to read. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 124 of file ioUtil.cpp.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1ade61a5e8efb4a94affadad6b14f6cf38"/>    <section>
    <title>baseOffset()</title>
<indexterm><primary>baseOffset</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>baseOffset</secondary></indexterm>
<computeroutput>template&lt;typename D , typename B &gt; </computeroutput><para><computeroutput>ptrdiff_t Util::baseOffset (D &amp; object)</computeroutput></para><para>

<para>Template for calculating offsets of base class subobjects. </para>
</para>

<para>Types: D - derived class B - base class </para>
<para>
Definition at line 40 of file Offset.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a5d61a39bc314fa7c9f2d6c3656a4791a"/>    <section>
    <title>send&lt; bool &gt;()</title>
<indexterm><primary>send&lt; bool &gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>send&lt; bool &gt;</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput>void <link linkend="_namespaceUtil_1a256b47167538c90b512abdb5a5cc562d">Util::send</link>&lt; bool &gt; (MPI::Comm &amp; comm, bool &amp; data, int dest, int tag)</computeroutput></para><para>

<para>Explicit specialization of send for bool data. </para>
</para>
<para>
Definition at line 19 of file MpiSendRecv.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a9ccd68b4d89ff818829b4021976ad83a"/>    <section>
    <title>recv&lt; bool &gt;()</title>
<indexterm><primary>recv&lt; bool &gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>recv&lt; bool &gt;</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput>void <link linkend="_namespaceUtil_1ac5da0397a02bafb86b9d53c403062f42">Util::recv</link>&lt; bool &gt; (MPI::Comm &amp; comm, bool &amp; data, int source, int tag)</computeroutput></para><para>

<para>Explicit specialization of recv for bool data. </para>
</para>
<para>
Definition at line 26 of file MpiSendRecv.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1ac338ed91940648cfb7485e336709bb33"/>    <section>
    <title>bcast&lt; bool &gt;()</title>
<indexterm><primary>bcast&lt; bool &gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>bcast&lt; bool &gt;</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput>void <link linkend="_namespaceUtil_1abfd28295c1ca99087a002f5fedb5c526">Util::bcast</link>&lt; bool &gt; (MPI::Intracomm &amp; comm, bool &amp; data, int root)</computeroutput></para><para>

<para>Explicit specialization of bcast for bool data. </para>
</para>
<para>
Definition at line 34 of file MpiSendRecv.cpp.</para>
<para>
Referenced by Util::Parameter::load(), Util::ParamComposite::loadOptional(), Util::Begin::readParam(), and Util::Parameter::readParam().</para>
    </section><anchor xml:id="_namespaceUtil_1ac8c1730e0049d03692fa3987eace32e0"/>    <section>
    <title>send&lt; std::string &gt;()</title>
<indexterm><primary>send&lt; std::string &gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>send&lt; std::string &gt;</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput>void <link linkend="_namespaceUtil_1a256b47167538c90b512abdb5a5cc562d">Util::send</link>&lt; std::string &gt; (MPI::Comm &amp; comm, std::string &amp; data, int dest, int tag)</computeroutput></para><para>

<para>Explicit specialization of send for std::string data. </para>
</para>
<para>
Definition at line 48 of file MpiSendRecv.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a4f41ec3e79fb6239d373593525a39ec6"/>    <section>
    <title>recv&lt; std::string &gt;()</title>
<indexterm><primary>recv&lt; std::string &gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>recv&lt; std::string &gt;</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput>void <link linkend="_namespaceUtil_1ac5da0397a02bafb86b9d53c403062f42">Util::recv</link>&lt; std::string &gt; (MPI::Comm &amp; comm, std::string &amp; data, int source, int tag)</computeroutput></para><para>

<para>Explicit specialization of recv for std::string data. </para>
</para>
<para>
Definition at line 64 of file MpiSendRecv.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1aae91f9a729a65246d891fe0b0b5bd41a"/>    <section>
    <title>bcast&lt; std::string &gt;()</title>
<indexterm><primary>bcast&lt; std::string &gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>bcast&lt; std::string &gt;</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput>void <link linkend="_namespaceUtil_1abfd28295c1ca99087a002f5fedb5c526">Util::bcast</link>&lt; std::string &gt; (MPI::Intracomm &amp; comm, std::string &amp; data, int root)</computeroutput></para><para>

<para>Explicit specialization of bcast for std::string data. </para>
</para>
<para>
Definition at line 80 of file MpiSendRecv.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a256b47167538c90b512abdb5a5cc562d"/>    <section>
    <title>send()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>send</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>send</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::send (MPI::Comm &amp; comm, T &amp; data, int dest, int tag)</computeroutput></para><para>

<para>Send a single T value. </para>
</para>

<para>Throws an <link linkend="_classUtil_1_1Exception">Exception</link> if no associated MPI data type is available, i.e., if <link linkend="_classUtil_1_1MpiTraitsNoType_1a7b2f19996763edf3568bfa713b2270cf">MpiTraits&lt;T&gt;::hasType</link> is false.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>value </para>
</entry>
                            </row>
                            <row>
                                <entry>dest</entry>
                                <entry>
<para>MPI rank of receiving processor in comm </para>
</entry>
                            </row>
                            <row>
                                <entry>tag</entry>
                                <entry>
<para>user-defined integer identifier for message </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 97 of file MpiSendRecv.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1ac5da0397a02bafb86b9d53c403062f42"/>    <section>
    <title>recv()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>recv</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>recv</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::recv (MPI::Comm &amp; comm, T &amp; data, int source, int tag)</computeroutput></para><para>

<para>Receive a single T value. </para>
</para>

<para>Throws an <link linkend="_classUtil_1_1Exception">Exception</link> if no associated MPI data type is available, i.e., if <link linkend="_classUtil_1_1MpiTraitsNoType_1a7b2f19996763edf3568bfa713b2270cf">MpiTraits&lt;T&gt;::hasType</link> is false.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>value </para>
</entry>
                            </row>
                            <row>
                                <entry>source</entry>
                                <entry>
<para>MPI rank of sending processor in comm </para>
</entry>
                            </row>
                            <row>
                                <entry>tag</entry>
                                <entry>
<para>user-defined integer identifier for message </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 116 of file MpiSendRecv.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1abfd28295c1ca99087a002f5fedb5c526"/>    <section>
    <title>bcast()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>bcast</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>bcast</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::bcast (MPI::Intracomm &amp; comm, T &amp; data, int root)</computeroutput></para><para>

<para>Broadcast a single T value. </para>
</para>

<para>Throws an <link linkend="_classUtil_1_1Exception">Exception</link> if no associated MPI data type is available, i.e., if <link linkend="_classUtil_1_1MpiTraitsNoType_1a7b2f19996763edf3568bfa713b2270cf">MpiTraits&lt;T&gt;::hasType</link> is false.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>value </para>
</entry>
                            </row>
                            <row>
                                <entry>root</entry>
                                <entry>
<para>MPI rank of root (sending) processor in comm </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 134 of file MpiSendRecv.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1a4784bbd7a1689cdf3baa93d157f7ccdc"/>    <section>
    <title>send()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>send</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>send</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::send (MPI::Comm &amp; comm, T * array, int count, int dest, int tag)</computeroutput></para><para>

<para>Send a C-array of T values. </para>
</para>

<para>Throws an exception if their exists neither an associated MPI data type nor an explicit specialization of the scalar send&lt;T&gt;.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>array</entry>
                                <entry>
<para>address of first element in array </para>
</entry>
                            </row>
                            <row>
                                <entry>count</entry>
                                <entry>
<para>number of elements in array </para>
</entry>
                            </row>
                            <row>
                                <entry>dest</entry>
                                <entry>
<para>MPI rank of destination (receiving) processor in comm </para>
</entry>
                            </row>
                            <row>
                                <entry>tag</entry>
                                <entry>
<para>user-defined integer identifier for this message </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 156 of file MpiSendRecv.h.</para>
    </section><anchor xml:id="_namespaceUtil_1ad19e2cf503c1b63484c9ae092382df99"/>    <section>
    <title>recv()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>recv</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>recv</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::recv (MPI::Comm &amp; comm, T * array, int count, int source, int tag)</computeroutput></para><para>

<para>Receive a C-array of T objects. </para>
</para>

<para>Throws an exception if their exists neither an associated MPI data type nor an explicit specialization of the scalar recv&lt;T&gt;.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>array</entry>
                                <entry>
<para>address of first element in array </para>
</entry>
                            </row>
                            <row>
                                <entry>count</entry>
                                <entry>
<para>number of elements in array </para>
</entry>
                            </row>
                            <row>
                                <entry>source</entry>
                                <entry>
<para>MPI rank of source (sending) processor in comm </para>
</entry>
                            </row>
                            <row>
                                <entry>tag</entry>
                                <entry>
<para>user-defined integer identifier for this message </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 182 of file MpiSendRecv.h.</para>
    </section><anchor xml:id="_namespaceUtil_1ad19da3b7fe8ce666e04c02fa8914fb5e"/>    <section>
    <title>bcast()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>bcast</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>bcast</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::bcast (MPI::Intracomm &amp; comm, T * array, int count, int root)</computeroutput></para><para>

<para>Broadcast a C-array of T objects. </para>
</para>

<para>Throws an exception if their exists neither an associated MPI data type nor an explicit specialization of the scalar bcast&lt;T&gt;.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>array</entry>
                                <entry>
<para>address of first element in array </para>
</entry>
                            </row>
                            <row>
                                <entry>count</entry>
                                <entry>
<para>number of elements in array </para>
</entry>
                            </row>
                            <row>
                                <entry>root</entry>
                                <entry>
<para>MPI rank of root (sending) processor in comm </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 207 of file MpiSendRecv.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a0deddd28b3c47d4f134c7427171f7864"/>    <section>
    <title>send()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>send</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>send</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::send (MPI::Comm &amp; comm, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; T &gt; &amp; array, int count, int dest, int tag)</computeroutput></para><para>

<para>Send a DArray&lt;T&gt; container. </para>
</para>

<para>Throws an exception if their exists neither an associated MPI data type nor an explicit specialization of the scalar send&lt;T&gt; method.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>array</entry>
                                <entry>
<para><link linkend="_classUtil_1_1DArray">DArray</link> object </para>
</entry>
                            </row>
                            <row>
                                <entry>count</entry>
                                <entry>
<para>logical number of elements in array </para>
</entry>
                            </row>
                            <row>
                                <entry>dest</entry>
                                <entry>
<para>MPI rank of destination (receiving) processor in comm </para>
</entry>
                            </row>
                            <row>
                                <entry>tag</entry>
                                <entry>
<para>user-defined integer identifier for this message </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 235 of file MpiSendRecv.h.</para>
<para>
References Util::Array&lt; Data &gt;::capacity(), Util::DArray&lt; Data &gt;::isAllocated(), and UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1a1bde7479caa958846c97e4cc4e12f9fc"/>    <section>
    <title>recv()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>recv</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>recv</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::recv (MPI::Comm &amp; comm, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; T &gt; &amp; array, int count, int source, int tag)</computeroutput></para><para>

<para>Receive a DArray&lt;T&gt; container. </para>
</para>

<para>Throws an exception if their exists neither an associated MPI data type nor an explicit specialization of the scalar recv&lt;T&gt; method.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>array</entry>
                                <entry>
<para><link linkend="_classUtil_1_1DArray">DArray</link> object </para>
</entry>
                            </row>
                            <row>
                                <entry>count</entry>
                                <entry>
<para>logical number of elements in array </para>
</entry>
                            </row>
                            <row>
                                <entry>source</entry>
                                <entry>
<para>MPI rank of source (sending) processor in comm </para>
</entry>
                            </row>
                            <row>
                                <entry>tag</entry>
                                <entry>
<para>user-defined integer identifier for this message </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 269 of file MpiSendRecv.h.</para>
<para>
References Util::Array&lt; Data &gt;::capacity(), Util::DArray&lt; Data &gt;::isAllocated(), and UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1a803a35549d11f824fb6398a9ba611a66"/>    <section>
    <title>bcast()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>bcast</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>bcast</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::bcast (MPI::Intracomm &amp; comm, <link linkend="_classUtil_1_1DArray">DArray</link>&lt; T &gt; &amp; array, int count, int root)</computeroutput></para><para>

<para>Broadcast a DArray&lt;T&gt; container. </para>
</para>

<para>Throws an exception if their exists neither an associated MPI data type nor an explicit specialization of the scalar bcast&lt;T&gt;.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>array</entry>
                                <entry>
<para>address of first element in array </para>
</entry>
                            </row>
                            <row>
                                <entry>count</entry>
                                <entry>
<para>number of elements in array </para>
</entry>
                            </row>
                            <row>
                                <entry>root</entry>
                                <entry>
<para>MPI rank of root (sending) processor in comm </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 302 of file MpiSendRecv.h.</para>
<para>
References Util::Array&lt; Data &gt;::capacity(), Util::DArray&lt; Data &gt;::isAllocated(), and UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1aec66ff165d24e1c1db70d2d21a84c6b8"/>    <section>
    <title>send()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>send</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>send</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::send (MPI::Comm &amp; comm, <link linkend="_classUtil_1_1DMatrix">DMatrix</link>&lt; T &gt; &amp; matrix, int m, int n, int dest, int tag)</computeroutput></para><para>

<para>Send a DMatrix&lt;T&gt; container. </para>
</para>

<para>Throws an exception if their exists neither an associated MPI data type nor an explicit specialization of the scalar send&lt;T&gt;.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>matrix</entry>
                                <entry>
<para><link linkend="_classUtil_1_1DMatrix">DMatrix</link> object to send </para>
</entry>
                            </row>
                            <row>
                                <entry>m</entry>
                                <entry>
<para>logical number of rows in matrix </para>
</entry>
                            </row>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>logical number of columns in matrix </para>
</entry>
                            </row>
                            <row>
                                <entry>dest</entry>
                                <entry>
<para>MPI rank of destination (receiving) processor in comm </para>
</entry>
                            </row>
                            <row>
                                <entry>tag</entry>
                                <entry>
<para>user-defined integer identifier for this message </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 339 of file MpiSendRecv.h.</para>
<para>
References Util::Matrix&lt; Data &gt;::capacity1(), Util::Matrix&lt; Data &gt;::capacity2(), Util::DMatrix&lt; Data &gt;::isAllocated(), and UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1a03ab9d8d4adf38632647e841db76a4f8"/>    <section>
    <title>recv()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>recv</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>recv</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::recv (MPI::Comm &amp; comm, <link linkend="_classUtil_1_1DMatrix">DMatrix</link>&lt; T &gt; &amp; matrix, int m, int n, int source, int tag)</computeroutput></para><para>

<para>Receive a DMatrix&lt;T&gt; container. </para>
</para>

<para>Throws an exception if their exists neither an associated MPI data type nor an explicit specialization of the scalar recv&lt;T&gt;.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>matrix</entry>
                                <entry>
<para><link linkend="_classUtil_1_1DMatrix">DMatrix</link> object to receive </para>
</entry>
                            </row>
                            <row>
                                <entry>m</entry>
                                <entry>
<para>logical number of rows in matrix </para>
</entry>
                            </row>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>logical number of columns in matrix </para>
</entry>
                            </row>
                            <row>
                                <entry>source</entry>
                                <entry>
<para>MPI rank of source (sending) processor in comm </para>
</entry>
                            </row>
                            <row>
                                <entry>tag</entry>
                                <entry>
<para>user-defined integer identifier for this message </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 383 of file MpiSendRecv.h.</para>
<para>
References Util::Matrix&lt; Data &gt;::capacity1(), Util::Matrix&lt; Data &gt;::capacity2(), Util::DMatrix&lt; Data &gt;::isAllocated(), and UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1a582d7d41457fcd3badb29316253f9b9c"/>    <section>
    <title>bcast()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>bcast</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>bcast</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::bcast (MPI::Intracomm &amp; comm, <link linkend="_classUtil_1_1DMatrix">DMatrix</link>&lt; T &gt; &amp; matrix, int m, int n, int root)</computeroutput></para><para>

<para>Broadcast a DMatrix&lt;T&gt; container. </para>
</para>

<para>Throws an exception if their exists neither an associated MPI data type nor an explicit specialization of the scalar bcast&lt;T&gt;.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>comm</entry>
                                <entry>
<para>MPI communicator </para>
</entry>
                            </row>
                            <row>
                                <entry>matrix</entry>
                                <entry>
<para><link linkend="_classUtil_1_1DMatrix">DMatrix</link> object </para>
</entry>
                            </row>
                            <row>
                                <entry>m</entry>
                                <entry>
<para>logical number of rows in matrix </para>
</entry>
                            </row>
                            <row>
                                <entry>n</entry>
                                <entry>
<para>logical number of columns in matrix </para>
</entry>
                            </row>
                            <row>
                                <entry>root</entry>
                                <entry>
<para>MPI rank of root (sending) processor in comm </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 427 of file MpiSendRecv.h.</para>
<para>
References Util::Matrix&lt; Data &gt;::capacity1(), Util::Matrix&lt; Data &gt;::capacity2(), Util::DMatrix&lt; Data &gt;::isAllocated(), and UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1a8301f4a2bb0afc29b7bcac4604151d0b"/>    <section>
    <title>operator&gt;&gt;()<computeroutput>[7/10]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<para><computeroutput>std::istream &amp; Util::operator&gt;&gt; (std::istream &amp; in, <link linkend="_classUtil_1_1Label">Label</link> label)</computeroutput></para><para>

<para>Extractor for <link linkend="_classUtil_1_1Label">Label</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                            <row>
                                <entry>label</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Label">Label</link> to be read from file </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 104 of file Label.cpp.</para>
<para>
References Util::Log::file(), Util::Label::isRequired(), UTIL_CHECK, and UTIL_THROW.</para>
    </section><anchor xml:id="_namespaceUtil_1a6d08f531a2e938c6e63314a5812df02f"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[8/11]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Util::operator&lt;&lt; (std::ostream &amp; out, <link linkend="_classUtil_1_1Label">Label</link> label)</computeroutput></para><para>

<para>Inserter for <link linkend="_classUtil_1_1Label">Label</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                            <row>
                                <entry>label</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Label">Label</link> to be written to file </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 158 of file Label.cpp.</para>
<para>
References Util::Label::LabelWidth.</para>
    </section><anchor xml:id="_namespaceUtil_1a96e37264ea1f5c0c72e708621934254a"/>    <section>
    <title>isNull()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>isNull</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>isNull</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool Util::isNull (<link linkend="_classUtil_1_1FlexPtr">FlexPtr</link>&lt; T &gt; p)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return true iff the enclosed built-in pointer is null. </para>
</para>
<para>
Definition at line 143 of file FlexPtr.h.</para>
<para>
References Util::FlexPtr&lt; T &gt;::get().</para>
    </section><anchor xml:id="_namespaceUtil_1a0dd0b0c7a52328ddf197bf5e7c0d49e0"/>    <section>
    <title>isNull()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>isNull</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>isNull</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool Util::isNull (T * ptr)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return true iff a built-in pointer is null. </para>
</para>
<para>
Definition at line 18 of file isNull.h.</para>
    </section><anchor xml:id="_namespaceUtil_1a55c2b946593a6de749b3c863968ea84b"/>    <section>
    <title>isNull()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>isNull</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>isNull</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool Util::isNull (<link linkend="_classUtil_1_1ScopedPtr">ScopedPtr</link>&lt; T &gt; p)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return true iff the enclosed built-in pointer is null. </para>
</para>
<para>
Definition at line 90 of file ScopedPtr.h.</para>
<para>
References Util::ScopedPtr&lt; T &gt;::get().</para>
    </section><anchor xml:id="_namespaceUtil_1af3b67cf187dbf43796687881bc38f3fd"/>    <section>
    <title>operator==()<computeroutput>[5/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Util::operator== (const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp; v1, const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp; v2)</computeroutput></para><para>

<para>Equality for IntVectors. </para>
</para>
<para>
Definition at line 24 of file IntVector.cpp.</para>
<para>
References Dimension.</para>
    </section><anchor xml:id="_namespaceUtil_1a1403b915ed1e3e287256a5b52955d46b"/>    <section>
    <title>operator==()<computeroutput>[6/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Util::operator== (const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp; v1, const int * v2)</computeroutput></para><para>

<para>Equality of <link linkend="_classUtil_1_1IntVector">IntVector</link> and C array. </para>
</para>
<para>
Definition at line 35 of file IntVector.cpp.</para>
<para>
References Dimension.</para>
    </section><anchor xml:id="_namespaceUtil_1a6187b72daa8f5feef8ac016a4f03e7db"/>    <section>
    <title>operator==()<computeroutput>[7/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Util::operator== (const int * v1, const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp; v2)</computeroutput></para><para>

<para>Equality of C array and <link linkend="_classUtil_1_1IntVector">IntVector</link>. </para>
</para>
<para>
Definition at line 45 of file IntVector.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a91f9d9c09a665591d9d78aee8f49a804"/>    <section>
    <title>operator!=()<computeroutput>[5/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Util::operator!= (const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp; v1, const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp; v2)</computeroutput></para><para>

<para>Inequality of two IntVectors. </para>
</para>
<para>
Definition at line 50 of file IntVector.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a019f73173fb01204fd3bb2c97a5ea6e9"/>    <section>
    <title>operator!=()<computeroutput>[6/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Util::operator!= (const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp; v1, const int * v2)</computeroutput></para><para>

<para>Inequality of <link linkend="_classUtil_1_1IntVector">IntVector</link> and C array. </para>
</para>
<para>
Definition at line 54 of file IntVector.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a393d6fafd566aebd1c05b80f6b1b8c1c"/>    <section>
    <title>operator!=()<computeroutput>[7/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Util::operator!= (const int * v1, const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp; v2)</computeroutput></para><para>

<para>Inequality of C array and <link linkend="_classUtil_1_1IntVector">IntVector</link>. </para>
</para>
<para>
Definition at line 58 of file IntVector.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a244a3547e6afa1a3441e1cbad7d3801c"/>    <section>
    <title>operator&gt;&gt;()<computeroutput>[8/10]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<para><computeroutput>std::istream &amp; Util::operator&gt;&gt; (std::istream &amp; in, <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp; vector)</computeroutput></para><para>

<para>istream extractor for a <link linkend="_classUtil_1_1IntVector">IntVector</link>. </para>
</para>

<para>Input elements of a vector from stream, without line breaks.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                            <row>
                                <entry>vector</entry>
                                <entry>
<para><link linkend="_classUtil_1_1IntVector">IntVector</link> to be read from stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified input stream </para>
</formalpara>
</para>
<para>
Definition at line 64 of file IntVector.cpp.</para>
<para>
References Dimension.</para>
    </section><anchor xml:id="_namespaceUtil_1a45886e51836cd3a74c99bbdfb7c21d17"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[9/11]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Util::operator&lt;&lt; (std::ostream &amp; out, const <link linkend="_classUtil_1_1IntVector">IntVector</link> &amp; vector)</computeroutput></para><para>

<para>ostream inserter for a <link linkend="_classUtil_1_1IntVector">IntVector</link>. </para>
</para>

<para>Output elements of a vector to stream, without line breaks. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                            <row>
                                <entry>vector</entry>
                                <entry>
<para><link linkend="_classUtil_1_1IntVector">IntVector</link> to be written to stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified output stream </para>
</formalpara>
</para>
<para>
Definition at line 75 of file IntVector.cpp.</para>
<para>
References Dimension.</para>
    </section><anchor xml:id="_namespaceUtil_1a5308ef4f3a71a983ee035867cfdfb9d0"/>    <section>
    <title>operator==()<computeroutput>[8/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Util::operator== (const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; t1, const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; t2)</computeroutput></para><para>

<para>Equality for Tensors. </para>
</para>
<para>
Definition at line 43 of file Tensor.cpp.</para>
<para>
References DimensionSq.</para>
    </section><anchor xml:id="_namespaceUtil_1aff7e66515cf8148cde71c38303356b33"/>    <section>
    <title>operator==()<computeroutput>[9/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Util::operator== (const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; t1, const double a2[][Dimension])</computeroutput></para><para>

<para>Equality of <link linkend="_classUtil_1_1Tensor">Tensor</link> and 2D C array. </para>
</para>
<para>
Definition at line 56 of file Tensor.cpp.</para>
<para>
References Dimension.</para>
    </section><anchor xml:id="_namespaceUtil_1a50207012b46bacb590b3ff53e52aad39"/>    <section>
    <title>operator==()<computeroutput>[10/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Util::operator== (const double a1[][Dimension], const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; t2)</computeroutput></para><para>

<para>Equality of C array and <link linkend="_classUtil_1_1Tensor">Tensor</link>. </para>
</para>
<para>
Definition at line 71 of file Tensor.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a406f4f64d0d001b9485b51809e7bb2e2"/>    <section>
    <title>operator!=()<computeroutput>[8/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Util::operator!= (const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; t1, const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; t2)</computeroutput></para><para>

<para>Negation of t1 == t2 (tensors t1 and t2) </para>
</para>

<para>Inequality of two Tensors. </para>
<para>
Definition at line 79 of file Tensor.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a8220da6cf61b0f7d172e67ab5027dba8"/>    <section>
    <title>operator!=()<computeroutput>[9/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Util::operator!= (const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; t1, const double a2[][Dimension])</computeroutput></para><para>

<para>Negation of t1 == a2 (tensor t1, 2D array a2) </para>
</para>

<para>Inequality of <link linkend="_classUtil_1_1Tensor">Tensor</link> and C array. </para>
<para>
Definition at line 83 of file Tensor.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1af526befb1d26d9245385d8c95813f8e6"/>    <section>
    <title>operator!=()<computeroutput>[10/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Util::operator!= (const double a1[][Dimension], const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; t2)</computeroutput></para><para>

<para>Negation of t1 == a2 (tensor t2, 2D array a1) </para>
</para>

<para>Inequality of C array and <link linkend="_classUtil_1_1Tensor">Tensor</link>. </para>
<para>
Definition at line 87 of file Tensor.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a8f03c100d8796ed1adb05c2363cbca76"/>    <section>
    <title>operator&gt;&gt;()<computeroutput>[9/10]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<para><computeroutput>std::istream &amp; Util::operator&gt;&gt; (std::istream &amp; in, <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; tensor)</computeroutput></para><para>

<para>istream extractor for a <link linkend="_classUtil_1_1Tensor">Tensor</link>. </para>
</para>

<para>Input elements of a tensor from stream, without line breaks.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                            <row>
                                <entry>tensor</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Tensor">Tensor</link> to be read from stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified input stream </para>
</formalpara>
</para>
<para>
Definition at line 93 of file Tensor.cpp.</para>
<para>
References DimensionSq.</para>
    </section><anchor xml:id="_namespaceUtil_1a502d0e8fd91db6d9f0355439e02db401"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[10/11]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Util::operator&lt;&lt; (std::ostream &amp; out, const <link linkend="_classUtil_1_1Tensor">Tensor</link> &amp; tensor)</computeroutput></para><para>

<para>ostream inserter for a <link linkend="_classUtil_1_1Tensor">Tensor</link>. </para>
</para>

<para>Output elements of a tensor to stream, without line breaks. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                            <row>
                                <entry>tensor</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Tensor">Tensor</link> to be written to stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified output stream </para>
</formalpara>
</para>
<para>
Definition at line 104 of file Tensor.cpp.</para>
<para>
References DimensionSq.</para>
    </section><anchor xml:id="_namespaceUtil_1a7f8bc8eb7d6ebd87734fcecb6f34d7bd"/>    <section>
    <title>operator==()<computeroutput>[11/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Util::operator== (const <link linkend="_classUtil_1_1Vector">Vector</link> &amp; v1, const <link linkend="_classUtil_1_1Vector">Vector</link> &amp; v2)</computeroutput></para><para>

<para>Equality for Vectors. </para>
</para>
<para>
Definition at line 26 of file Vector.cpp.</para>
<para>
References Dimension.</para>
    </section><anchor xml:id="_namespaceUtil_1ad62d196575cf2524bf350daa05f3dcc6"/>    <section>
    <title>operator==()<computeroutput>[12/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Util::operator== (const <link linkend="_classUtil_1_1Vector">Vector</link> &amp; v1, const double * v2)</computeroutput></para><para>

<para>Equality of <link linkend="_classUtil_1_1Vector">Vector</link> and C array. </para>
</para>
<para>
Definition at line 36 of file Vector.cpp.</para>
<para>
References Dimension.</para>
    </section><anchor xml:id="_namespaceUtil_1a26988c364a99e23ded2e030f458d813a"/>    <section>
    <title>operator==()<computeroutput>[13/13]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool Util::operator== (const double * v1, const <link linkend="_classUtil_1_1Vector">Vector</link> &amp; v2)</computeroutput></para><para>

<para>Equality of C array and <link linkend="_classUtil_1_1Vector">Vector</link>. </para>
</para>
<para>
Definition at line 48 of file Vector.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a7213643ae10d3cd422e98af441234ec2"/>    <section>
    <title>operator!=()<computeroutput>[11/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Util::operator!= (const <link linkend="_classUtil_1_1Vector">Vector</link> &amp; v1, const <link linkend="_classUtil_1_1Vector">Vector</link> &amp; v2)</computeroutput></para><para>

<para>Inequality of two Vectors. </para>
</para>
<para>
Definition at line 53 of file Vector.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a47dd55c0137962a0d93b75f97537a5d9"/>    <section>
    <title>operator!=()<computeroutput>[12/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Util::operator!= (const <link linkend="_classUtil_1_1Vector">Vector</link> &amp; v1, const double * v2)</computeroutput></para><para>

<para>Inequality of <link linkend="_classUtil_1_1Vector">Vector</link> and C array. </para>
</para>
<para>
Definition at line 56 of file Vector.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1aca0bc66093f89ca45236b0e2de39bd7f"/>    <section>
    <title>operator!=()<computeroutput>[13/13]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool Util::operator!= (const double * v1, const <link linkend="_classUtil_1_1Vector">Vector</link> &amp; v2)</computeroutput></para><para>

<para>Inequality of C array and <link linkend="_classUtil_1_1Vector">Vector</link>. </para>
</para>
<para>
Definition at line 59 of file Vector.cpp.</para>
    </section><anchor xml:id="_namespaceUtil_1a5d9e39cc195b13586ad69117ac91e98c"/>    <section>
    <title>operator&gt;&gt;()<computeroutput>[10/10]</computeroutput></title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<para><computeroutput>std::istream &amp; Util::operator&gt;&gt; (std::istream &amp; in, <link linkend="_classUtil_1_1Vector">Vector</link> &amp; vector)</computeroutput></para><para>

<para>istream extractor for a <link linkend="_classUtil_1_1Vector">Vector</link>. </para>
</para>

<para>Input elements of a vector from stream, without line breaks.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                            <row>
                                <entry>vector</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Vector">Vector</link> to be read from stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified input stream </para>
</formalpara>
</para>
<para>
Definition at line 65 of file Vector.cpp.</para>
<para>
References Dimension.</para>
    </section><anchor xml:id="_namespaceUtil_1a618ba88da1f7578c8d970225faf43a46"/>    <section>
    <title>operator&lt;&lt;()<computeroutput>[11/11]</computeroutput></title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util</secondary></indexterm>
<indexterm><primary>Util</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream &amp; Util::operator&lt;&lt; (std::ostream &amp; out, const <link linkend="_classUtil_1_1Vector">Vector</link> &amp; vector)</computeroutput></para><para>

<para>ostream inserter for a <link linkend="_classUtil_1_1Vector">Vector</link>. </para>
</para>

<para>Output elements of a vector to stream, without line breaks. 
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                            <row>
                                <entry>vector</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Vector">Vector</link> to be written to stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>modified output stream </para>
</formalpara>
</para>
<para>
Definition at line 76 of file Vector.cpp.</para>
<para>
References Dimension.</para>
</section>
</section>
</section>
