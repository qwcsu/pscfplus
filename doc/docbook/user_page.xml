<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_user_page">

<para><link linkend="_install_page">Installation</link> (Prev) &#160; &#160; &#160; &#160; 
<literallayout>&#160;&#xa;</literallayout>
</para>

<para><formalpara><title>Contents:</title></formalpara>
</para>

<para><itemizedlist>
<listitem>

<para><link linkend="_user_usage_page">Invoking an Executable</link>  </para>
</listitem>
<listitem>

<para><link linkend="_user_param_page">Parameter Files</link>  </para>
</listitem>
<listitem>

<para><link linkend="_user_command_page">Command Files</link>  </para>
</listitem>
</itemizedlist>
</para>

<para>
<literallayout>&#160;&#xa;</literallayout>
 <link linkend="_install_page">Installation</link> (Prev) &#160; &#160; &#160; &#160; <link linkend="_index">Main Page</link> (Up) &#160; &#160; &#160; &#160; </para>
    <section xml:id="_user_usage_page"><title>Invoking an Executable</title>    </section>
<para><link linkend="_user_page">User Guide</link> (Prev) &#160; &#160; &#160; &#160; <link linkend="_user_param_page">Parameter Files</link> (Next) 
<literallayout>&#160;&#xa;</literallayout>
</para>
<section xml:id="_user_usage_page_1user_usage_inputs_single_phase">
<title>Calculation of a single (ordered) phase</title>

<para>Here is an example of command-line usage of PSCF+ program for calculation of a single ordered phase:</para>

<para><literallayout><computeroutput>pg&#32;[-e]&#32;-d&#32;D
</computeroutput></literallayout></para>

<para>In the above, <computeroutput>pg</computeroutput> is the name of executable, <computeroutput>-e</computeroutput> activates echoing of the parameter file to standard output (which is optional), dimensionality <computeroutput>D</computeroutput> of the system is passed to the program as argument of the <computeroutput>-d</computeroutput> command-line option (such implementation is due to Prof. David Morse).</para>

<para>Single-phase SCF calculation requires two input files: <itemizedlist>
<listitem>

<para>a parameter file: <computeroutput>param</computeroutput>  </para>
</listitem>
<listitem>

<para>a command file: <computeroutput>command</computeroutput>  </para>
</listitem>
</itemizedlist>
under the working directory, and their names have to be <computeroutput>param</computeroutput> and <computeroutput>command</computeroutput>, respectively.</para>

<para>When the program is executed, the parameter file is read first, which is used to initialize the state of the program and allocate memory. The command file is read and interpreted after the parameter file. The command file is in JSON format and contains a list of commands that are interpreted and executed in sequence, which controls the program flow after initialization. The contents and formats of these two types of file are explained in detail elsewhere (see <link linkend="_user_param_page">Parameter Files</link>, <link linkend="_user_command_page">Command Files</link>).</para>
</section>
<section xml:id="_user_usage_page_1user_usage_inputs_boundary">
<title>Calculation of the boundary between two phases</title>

<para>Here is an example of command-line usage of PSCF+ to calculate the boundry between two phases (where they have the same Helmholtz free-energy density) using the Ridders&apos; method.</para>

<para><literallayout><computeroutput>pg&#32;[-e]&#32;-d&#32;D1,D2&#32;
</computeroutput></literallayout></para>

<para>In the above, dimensionalities of the two phases, <computeroutput>D1</computeroutput> and <computeroutput>D2</computeroutput>, are passed to the program as arguments of the <computeroutput>-d</computeroutput> command-line option; use 0 for dimensionality of the disordered phase.</para>

<para>Two-phase SCF calculation requires three input files: <itemizedlist>
<listitem>

<para>two parameter files: <computeroutput>param1</computeroutput> and <computeroutput>param2</computeroutput>  </para>
</listitem>
<listitem>

<para>a command file: <computeroutput>command</computeroutput>  </para>
</listitem>
</itemizedlist>
under the working directory, and their names have to be <computeroutput>param1</computeroutput>, <computeroutput>param2</computeroutput> (for the two phases having dimensionalities <computeroutput>D1</computeroutput> and <computeroutput>D2</computeroutput>, respectively) and <computeroutput>command</computeroutput>.</para>

<para>
<literallayout>&#160;&#xa;</literallayout>
 <link linkend="_user_page">User Guide</link> (Up) &#160; &#160; &#160; &#160; <link linkend="_user_param_page">Parameter Files</link> (Next) </para>
</section>
    <section xml:id="_user_param_page"><title>Parameter Files</title>    </section>
<para><link linkend="_user_usage_page">Invoking an Executable</link> (Prev) &#160; &#160; &#160; &#160; <link linkend="_user_command_page">Command Files</link> (Next) 
<literallayout>&#160;&#xa;</literallayout>
</para>

<para>The structure of parameter file is adapted from the C++/CUDA version of PSCF, and contain one <computeroutput>System</computeroutput> block as shown below.</para>

<para><literallayout><computeroutput>System{
&#32;&#32;Mixture{
&#32;&#32;&#32;&#32;nMonomer&#32;&#32;&#32;...
&#32;&#32;&#32;&#32;monomers&#32;&#32;&#32;...&#32;&#32;...&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;...&#32;&#32;...&#32;
&#32;&#32;&#32;&#32;nPolymer&#32;&#32;&#32;...
&#32;&#32;&#32;&#32;Polymer{
&#32;&#32;&#32;&#32;&#32;&#32;nBlock&#32;&#32;...
&#32;&#32;&#32;&#32;&#32;&#32;nVertex&#32;...
&#32;&#32;&#32;&#32;&#32;&#32;blocks&#32;&#32;...&#32;&#32;...&#32;...&#32;...&#32;&#32;...&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;...&#32;&#32;...&#32;...&#32;...&#32;&#32;...
&#32;&#32;&#32;&#32;&#32;&#32;phi&#32;&#32;&#32;&#32;&#32;...
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;DPolymer{
&#32;&#32;&#32;&#32;&#32;&#32;nBlock&#32;&#32;...
&#32;&#32;&#32;&#32;&#32;&#32;nVertex&#32;...
&#32;&#32;&#32;&#32;&#32;&#32;bonds&#32;&#32;&#32;...&#32;&#32;...&#32;...&#32;...&#32;&#32;...&#32;&#32;...&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;...&#32;&#32;...&#32;...&#32;...&#32;&#32;...&#32;&#32;...
&#32;&#32;&#32;&#32;&#32;&#32;phi&#32;&#32;&#32;&#32;&#32;...
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;[ns&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;...]
&#32;&#32;}
&#32;&#32;Interaction{
&#32;&#32;&#32;&#32;&#32;chi&#32;...&#32;...&#32;...
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;...&#32;...&#32;...
&#32;&#32;&#32;&#32;&#32;[kappa&#32;&#32;&#32;&#32;...]
&#32;&#32;&#32;&#32;&#32;sigma&#32;&#32;&#32;&#32;&#32;...
&#32;&#32;}
&#32;&#32;unitCell&#32;...&#32;...&#32;...
&#32;&#32;mesh&#32;....
&#32;&#32;groupName&#32;...
&#32;&#32;AmIterator{
&#32;&#32;&#32;&#32;&#32;maxItr&#32;&#32;...
&#32;&#32;&#32;&#32;&#32;epsilon&#32;...
&#32;&#32;&#32;&#32;&#32;maxHist&#32;...
&#32;&#32;&#32;&#32;&#32;isMinimized&#32;...
&#32;&#32;}
}
</computeroutput></literallayout></para>

<para>Each sub-block and required parameter (represented by ... ) is explained as follows:</para>

<para><itemizedlist>
<listitem>
<para><emphasis role="bold">Mixture</emphasis>: Description of molecular components (each is considered as a block copolymer in general with each block being a linear homopolymer) and composition in the system (which is considered as a mixture in general).<itemizedlist>
<listitem>
<para><emphasis role="bold">nMonomer</emphasis>: Number of monomer (segment) types in the system; this includes solvent molecules.</para>
</listitem><listitem>
<para><emphasis role="bold">monomers</emphasis>: Description of each segment type in a seperate line (thus a total of <computeroutput>nMonomer</computeroutput> lines). The first parameter in each line is a unique integer index starting from 0 for the segment type, and the second parameter specifies its statistical segment length.</para>
</listitem><listitem>
<para><emphasis role="bold">nPolymer</emphasis>: Number of molecular components in the system.</para>
</listitem><listitem>
<para><emphasis role="bold">Polymer</emphasis> (only used for continuous-Gaussian-chain models): Description of each molecular component in a seperate sub-block (thus a total of <computeroutput>nPolymer</computeroutput> sub-blocks), which includes its chain architecture (specified by <computeroutput>nBlock</computeroutput>, <computeroutput>nVertex</computeroutput>, and <computeroutput>blocks</computeroutput> as explained below) and its overall volume fraction <computeroutput>phi</computeroutput> in the system.<itemizedlist>
<listitem>
<para><emphasis role="bold">nBlock</emphasis>: Number of blocks of this molecular component.</para>
</listitem><listitem>
<para><emphasis role="bold">nVertex</emphasis>: Number of vertices of this molecular component. A vertex is either a joint (where at least two blocks meet) or a free end.</para>
</listitem><listitem>
<para><emphasis role="bold">blocks</emphasis>: Description of each block in a seperate line (thus a total of <computeroutput>nBlock</computeroutput> lines). The first parameter in each line is a unique integer index starting from 0 for the block, the second parameter specifies its segment type, the next two parameters are the indices of the two vertices it connects, and the last parameter specifies its length.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><emphasis role="bold">DPolymer</emphasis> (only used for discrete-chain models): Description of each molecular component in a seperate sub-block (thus a total of <computeroutput>nPolymer</computeroutput> sub-blocks), which includes its chain architecture (specified by <computeroutput>nBond</computeroutput>, <computeroutput>nVertex</computeroutput>, and <computeroutput>bonds</computeroutput> as explained below; see <link xlink:href="https://github.com/qwcsu/PSCFplus/blob/master/doc/notes/Models.pdf">Models.pdf</link> for details.) and its overall volume fraction <computeroutput>phi</computeroutput> in the system.<itemizedlist>
<listitem>
<para><emphasis role="bold">nBond</emphasis>: Number of v-bonds (including both block bonds and joint bonds) of this molecular component.</para>
</listitem><listitem>
<para><emphasis role="bold">nVertex</emphasis>: Number of vertices of this molecular component. A vertex here is either a joint (which is connected by at least two v-bonds) or a free end (which is connected by one v-bond).</para>
</listitem><listitem>
<para><emphasis role="bold">bonds</emphasis>: Description of each v-bond in a seperate line (thus a total of <computeroutput>nBond</computeroutput> lines). The first parameter in each line is a unique integer index starting from 0 for the bond, the second and the third parameters are the indices of the two vertices it connects, the next two parameters specify the types of these vertices (segments), and the last parameter is its number of segments (0 for a joint bond).</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><emphasis role="bold">ns</emphasis>: Total number of discretization steps along the chain contour of length 1. This line is used only for continuous-Gaussian-chain models, and is omitted for discrete-chain models.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><emphasis role="bold">Interaction</emphasis>: Description of non-bonded interactions in the system.<itemizedlist>
<listitem>
<para><emphasis role="bold">chi</emphasis>: Value of the (generalized) Flory-Huggins &#967; parameter for each pair of different segment types in a seperate line. The first two parameters in each line are the segment-type indices, and the third one is the corresponding value of &#967;. By default, the value between segments of the same type is 0, and thus not needed.</para>
</listitem><listitem>
<para><emphasis role="bold">kappa</emphasis>: Compressibility parameter &#954;, used only for compressible systems and omitted for incompressible systems.</para>
</listitem><listitem>
<para><emphasis role="bold">sigma</emphasis>: Interaction range of the non-bounded potential, which is 0 for Dirac <emphasis>&#948;</emphasis>-function interaction.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem>
<para><emphasis role="bold">unitCell</emphasis>: The first parameter in this line is the lattice system of the unit cell and the rest is a list of real numbers needed to describe the unit cell; see <link xlink:href="https://dmorse.github.io/pscfpp-man/user_unitcell_page.html">PSCF documentation</link> for details.</para>
</listitem><listitem>
<para><emphasis role="bold">mesh</emphasis>: Description of the mesh size used for spatial discretization, given by D integer numbers with D being the dimensionality of the system.</para>
</listitem><listitem>
<para><emphasis role="bold">groupName</emphasis>: Name of the crystallographic space group.</para>
</listitem><listitem>
<para><emphasis role="bold">AmIterator</emphasis>: Parameters required by Anderson mixing for iteratively solving the SCF equations; see <link xlink:href="https://epje.epj.org/articles/epje/abs/2009/12/10189_2009_Article_9411/10189_2009_Article_9411.html"><emphasis>Matsen</emphasis>, <emphasis role="bold">Eur. Phys. J. E 53</emphasis>, 361 (2009)</link> for details.<itemizedlist>
<listitem>
<para><emphasis role="bold">maxItr</emphasis>: Maximum number of iterations.</para>
</listitem><listitem>
<para><emphasis role="bold">epsilon</emphasis>: Criterion of convergence for SCF equations.</para>
</listitem><listitem>
<para><emphasis role="bold">maxHist</emphasis>: A positive integer for the maximum size of the history matrix used in Anderson mixing.</para>
</listitem><listitem>
<para><emphasis role="bold">isMinimized</emphasis>: 1 for finding the bulk period of the ordered phase, and 0 otherwise.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>

<para>Below are two examples of the parameter file:</para>

<para><itemizedlist>
<listitem>
<para><emphasis><emphasis role="bold">Example for SCF calculations of the BCC phase formed by the &quot;Standard&quot; model of compositionally asymmetric A-B diblock copolymer</emphasis></emphasis></para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>System{
&#32;&#32;Mixture{
&#32;&#32;&#32;&#32;nMonomer&#32;&#32;2&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;monomers&#32;&#32;0&#32;&#32;&#32;A&#32;&#32;&#32;1.0&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;&#32;&#32;B&#32;&#32;&#32;1.0&#32;
&#32;&#32;&#32;&#32;nPolymer&#32;&#32;1&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;Polymer{
&#32;&#32;&#32;&#32;&#32;&#32;nBlock&#32;&#32;2&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;nVertex&#32;3
&#32;&#32;&#32;&#32;&#32;&#32;blocks&#32;&#32;0&#32;&#32;0&#32;&#32;0&#32;&#32;1&#32;&#32;2.50000000E-01&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;&#32;1&#32;&#32;1&#32;&#32;2&#32;&#32;7.50000000E-01
&#32;&#32;&#32;&#32;&#32;&#32;phi&#32;&#32;&#32;&#32;&#32;1.0
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;ns&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;128
&#32;&#32;}
&#32;&#32;Interaction{
&#32;&#32;&#32;&#32;chi&#32;&#32;&#32;1&#32;&#32;&#32;0&#32;&#32;&#32;20.0
&#32;&#32;&#32;&#32;sigma&#32;0.0
&#32;&#32;}
&#32;&#32;unitCell&#32;cubic&#32;&#32;&#32;&#32;&#32;&#32;4.6662857614e+00
&#32;&#32;mesh&#32;&#32;&#32;&#32;&#32;&#32;64&#32;&#32;&#32;64&#32;&#32;64
&#32;&#32;groupName&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;I_m_-3_m
&#32;&#32;AmIterator{
&#32;&#32;&#32;&#32;maxItr&#32;5000
&#32;&#32;&#32;&#32;epsilon&#32;1e-9
&#32;&#32;&#32;&#32;maxHist&#32;20
&#32;&#32;&#32;&#32;isMinimized&#32;1
&#32;&#32;}
}
</computeroutput></literallayout></para>

<para><itemizedlist>
<listitem>
<para><emphasis><emphasis role="bold">Example for SCF calculations of the &#963; phase formed by the DPDC model of conformationally asymmetric A-B diblock copolymer</emphasis></emphasis></para>
</listitem></itemizedlist>
</para>

<para><literallayout><computeroutput>System{
&#32;&#32;Mixture{
&#32;&#32;&#32;&#32;nMonomer&#32;&#32;2
&#32;&#32;&#32;&#32;monomers&#32;&#32;0&#32;&#32;&#32;A&#32;&#32;&#32;3.0
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;&#32;&#32;B&#32;&#32;&#32;1.0&#32;
&#32;&#32;&#32;&#32;nPolymer&#32;&#32;1
&#32;&#32;&#32;&#32;DPolymer{
&#32;&#32;&#32;&#32;&#32;&#32;nBond&#32;&#32;&#32;3&#32;
&#32;&#32;&#32;&#32;&#32;&#32;nVertex&#32;4
&#32;&#32;&#32;&#32;&#32;&#32;bonds&#32;&#32;&#32;0&#32;&#32;0&#32;&#32;1&#32;&#32;0&#32;&#32;0&#32;&#32;&#32;3
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;1&#32;&#32;2&#32;&#32;3&#32;&#32;1&#32;&#32;1&#32;&#32;&#32;7
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;2&#32;&#32;1&#32;&#32;2&#32;&#32;0&#32;&#32;1&#32;&#32;&#32;0
&#32;&#32;&#32;&#32;&#32;&#32;phi&#32;&#32;&#32;&#32;&#32;1.0
&#32;&#32;&#32;&#32;}
&#32;&#32;}
&#32;&#32;Interaction{
&#32;&#32;&#32;&#32;chi&#32;&#32;&#32;1&#32;&#32;&#32;0&#32;&#32;&#32;2.0
&#32;&#32;&#32;&#32;kappa&#32;0.06366197723676
&#32;&#32;&#32;&#32;sigma&#32;0.89442719099992
&#32;&#32;}
&#32;&#32;unitCell&#32;tetragonal&#32;&#32;&#32;&#32;&#32;&#32;2.8767371691e+01&#32;&#32;&#32;&#32;&#32;&#32;1.5168759856e+01
&#32;&#32;mesh&#32;&#32;&#32;&#32;128&#32;&#32;128&#32;&#32;64
&#32;&#32;groupName&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;P_42%m_n_m
&#32;&#32;AmIterator{
&#32;&#32;&#32;&#32;maxItr&#32;5000
&#32;&#32;&#32;&#32;epsilon&#32;1e-8
&#32;&#32;&#32;&#32;maxHist&#32;20
&#32;&#32;&#32;&#32;isMinimized&#32;1
&#32;&#32;}
}
</computeroutput></literallayout></para>

<para><link linkend="_user_usage_page">Invoking an Executable</link> (Prev) &#160; &#160; &#160; &#160; <link linkend="_user_page">User Guide</link> (Up) &#160; &#160; &#160; &#160; <link linkend="_user_command_page">Command Files</link> (Next) </para>
    <section xml:id="_user_command_page"><title>Command Files</title>    </section>
<para><link linkend="_user_param_page">Parameter Files</link> (Prev) &#160; &#160; &#160; &#160; 
<literallayout>&#160;&#xa;</literallayout>
</para>

<para>The command file contains a sequence of commands that are read and executed in serial. The commands are organized into a JSON file. Below is an example of a command file for single-phase calculation: <literallayout><computeroutput>[
&#32;&#32;&#32;&#32;{&#32;&quot;CaseId&quot;:&#32;&quot;1&quot;&#32;},
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;FieldIO&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;IO&quot;&#32;:&#32;&quot;read&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Type&quot;:&#32;&quot;omega&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;basis&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Directory&quot;:&#32;&quot;in/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;SinglePhaseSCF&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;OutputDirectory&quot;:&#32;&quot;out/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;FieldIO&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;IO&quot;&#32;:&#32;&quot;write&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Type&quot;:&#32;&quot;omega&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;basis&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Directory&quot;:&#32;&quot;out/omega/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;FieldIO&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;IO&quot;&#32;:&#32;&quot;write&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Type&quot;:&#32;&quot;phi&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;real&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Directory&quot;:&#32;&quot;out/phi/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;}
]
</computeroutput></literallayout></para>

<para>All commands are put in a pair of square brackets, and they are divided into different blocks. (<link xlink:href="https://github.com/qwcsu/PSCFplus/blob/master/doc/notes/REPS.pdf">Here</link> gives an introduction to JSON)</para>

<para>The following explain the usage of each command block.</para>

<para><itemizedlist>
<listitem>
<para>The first block must be the <computeroutput>&quot;CaseId&quot;</computeroutput> block. <literallayout><computeroutput>{&#32;&quot;CaseId&quot;:&#32;&quot;your_case_id&quot;&#32;}
</computeroutput></literallayout> This command specifies the case ID of the calculation, <computeroutput>your_case_id</computeroutput>, which is part of the names of output files. The case ID can be anything, even an empty string.</para>
</listitem><listitem>
<para>To read or write a field (<emphasis>e.g.</emphasis>, volume-fraction or conjugate field) file in a specified format, use <computeroutput>&quot;FieldIO&quot;</computeroutput> block. <literallayout><computeroutput>{
&#32;&#32;&#32;&#32;&quot;FieldIO&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;IO&quot;&#32;:&#32;&quot;read&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Type&quot;:&#32;&quot;omega&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;basis&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Directory&quot;:&#32;&quot;in/&quot;
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout> <computeroutput>&quot;IO&quot;</computeroutput> is either <computeroutput>&quot;read&quot;</computeroutput> or <computeroutput>&quot;write&quot;</computeroutput> for reading from or writing to a file, respectively. <computeroutput>&quot;Type&quot;</computeroutput> specifies the field, which can be either <computeroutput>&quot;omega&quot;</computeroutput> for conjugate field or <computeroutput>&quot;phi&quot;</computeroutput> for volume-fraction field. <computeroutput>&quot;Format&quot;</computeroutput> specifies the format of the field, which can be either <computeroutput>&quot;basis&quot;</computeroutput> for the basis format, <computeroutput>&quot;real&quot;</computeroutput> for the real-space-grid format, or <computeroutput>&quot;reciprocal&quot;</computeroutput> for the reciprocal-space-grid format; see this <link xlink:href="https://dmorse.github.io/pscfpp-man/user_field_page.html">PSCF documentation</link> for the explaination of these formats. <computeroutput>&quot;Directory&quot;</computeroutput> specifies the directory of the file. Finally, the file name is specified by the case ID, field type and format as <computeroutput>your_case_id_type.format</computeroutput>; for example, to read a conjugate field in the basis format as input of your SCF calculation with the case ID 1234, the file name must be <computeroutput>1234_omega.basis</computeroutput>.</para>
</listitem><listitem>
<para>To perform SCF calculation of a single phase with given initial guess (the conjugate field of which should be read before), use the <computeroutput>&quot;SinglePhaseSCF&quot;</computeroutput> block. <literallayout><computeroutput>{
&#32;&#32;&#32;&#32;&quot;SinglePhaseSCF&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;OutputDirectory&quot;:&#32;&quot;out/&quot;
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout> <computeroutput>&quot;OutputDirectory&quot;</computeroutput> specifies the directory of the output file for the system free energy and its components. This output file name is <computeroutput>your_case_id_out.json</computeroutput>. For example, with the case ID 1234, the name of the output file is <computeroutput>1234_out.json</computeroutput>. 
<literallayout>&#160;&#xa;</literallayout>
</para>
</listitem></itemizedlist>
</para>

<para>To perform automated calculation along a path (ACAP; see <link xlink:href="https://github.com/qwcsu/PSCFplus/blob/master/doc/notes/ACAP.pdf">ACAP.pdf</link> for details.), use the block <computeroutput>&quot;ACAP&quot;</computeroutput>. <literallayout><computeroutput>[
&#32;&#32;&#32;&#32;{&#32;&quot;CaseId&quot;:&#32;&quot;1&quot;&#32;},
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;FieldIO&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;IO&quot;&#32;:&#32;&quot;read&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Type&quot;:&#32;&quot;omega&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;basis&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Directory&quot;:&#32;&quot;in/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;ACAP&quot;:{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Variable&quot;:&#32;[&quot;chi&quot;,&#32;0,&#32;1],&#32;&#32;&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;InitialValue&quot;:&#32;16,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;FinalValue&quot;:&#32;15.5,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;InitialStep&quot;:&#32;0.1,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;SmallestStep&quot;:&#32;0.001,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;LargestStep&quot;:&#32;0.5,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;StepScale&quot;:&#32;1.1,&#32;&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;OutputDirectory&quot;:&#32;&quot;out/&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;IntermediateOuput&quot;:
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;[
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;OutputPoints&quot;:&#32;[15.4,&#32;15.6,&#32;15.8]
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Field&quot;&#32;:&#32;&quot;omega&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;basis&quot;,&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;OutputDirectory&quot;:&#32;&quot;out/omega/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Field&quot;&#32;:&#32;&quot;phi&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;real&quot;,&#32;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;OutputDirectory&quot;:&#32;&quot;out/phi/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;]
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;FieldIO&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;IO&quot;&#32;:&#32;&quot;write&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Type&quot;:&#32;&quot;omega&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;basis&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Directory&quot;:&#32;&quot;out/omega/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;FieldIO&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;IO&quot;&#32;:&#32;&quot;write&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Type&quot;:&#32;&quot;phi&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;real&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Directory&quot;:&#32;&quot;out/phi/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;}
]
</computeroutput></literallayout> <computeroutput>&quot;Variable&quot;</computeroutput> specifies the paramter whose value is varied along the path; this is so far either <computeroutput>&quot;chi&quot;</computeroutput>, the Flory-Huggins parameter bewteen two segments of different types, or <computeroutput>&quot;b&quot;</computeroutput>, the statistical segment length of a segment type. If the varing parameter is <computeroutput>&quot;chi&quot;</computeroutput>, user needs to specify the two segment types as shown in the above example. If the varing parameter is <computeroutput>&quot;b&quot;</computeroutput>, user needs to specify the corresponding segment type (<emphasis>e.g.</emphasis>, <computeroutput>[&quot;b&quot;, 0]</computeroutput>). <computeroutput>&quot;InitialValue&quot;</computeroutput> and <computeroutput>&quot;FinalValue&quot;</computeroutput> give the starting and ending parameter values of the path, respectively. <computeroutput>&quot;InitialStep&quot;</computeroutput>, <computeroutput>&quot;SmallestStep&quot;</computeroutput>, and <computeroutput>&quot;LargestStep&quot;</computeroutput> specifies the initial, smallest and largest absolute values of the stepsize, respectively, used for varing the parameter along the path. <computeroutput>&quot;StepScale&quot;</computeroutput> specifies the scaling factor used to vary the stepsize. <computeroutput>&quot;OutputDirectory&quot;</computeroutput> specifies the directory of the output file for the system free energy and its components along the path. <computeroutput>&quot;IntermediateOuput&quot;</computeroutput> is needed when user wants to output field files during ACAP. The first block in <computeroutput>&quot;IntermediateOuput&quot;</computeroutput> specifies the parameter values at which the fields are output along the path (the order of these values does not matter, which means <computeroutput>[1.1, 1.2, 1.3]</computeroutput> and <computeroutput>[1.2, 1.3, 1.1]</computeroutput> result in the same intermediate output files). Each of the following blocks specifies the type of the field, its format, and the directory of the output files via <computeroutput>&quot;Field&quot;</computeroutput>, <computeroutput>&quot;Format&quot;</computeroutput>, and <computeroutput>&quot;IntermediateDirectory&quot;</computeroutput>, respectively.</para>

<para>To find a boundary point between two specified phases, where they have the same Helmholtz free-energy density, use the <computeroutput>&quot;PhaseBoundaryPoints&quot;</computeroutput> block as in the following example: <literallayout><computeroutput>[
&#32;&#32;&#32;&#32;{&#32;&#32;&#32;&quot;CaseId&quot;:&#32;&quot;1&quot;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;FieldIO&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;PhaseId&quot;:&#32;1,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;IO&quot;&#32;:&#32;&quot;read&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Type&quot;:&#32;&quot;omega&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;basis&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Directory&quot;:&#32;&quot;in/1/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;FieldIO&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;PhaseId&quot;:&#32;2,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;IO&quot;&#32;:&#32;&quot;read&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Type&quot;:&#32;&quot;omega&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;basis&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Directory&quot;:&#32;&quot;in/2/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;PhaseBoundaryPoints&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;epsilon&quot;:&#32;1e-5,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;b&quot;:&#32;[1,&#32;1.0],
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;InitialGuess(chi)&quot;:&#32;[0,&#32;1,&#32;19.1,&#32;19.3]
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;FieldIO&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;PhaseId&quot;:&#32;1,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;IO&quot;&#32;:&#32;&quot;write&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Type&quot;:&#32;&quot;omega&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;basis&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Directory&quot;:&#32;&quot;out/1/omega/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;},
&#32;&#32;&#32;&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;FieldIO&quot;:&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;PhaseId&quot;:&#32;2,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;IO&quot;&#32;:&#32;&quot;write&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Type&quot;:&#32;&quot;phi&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Format&quot;:&#32;&quot;real&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&quot;Directory&quot;:&#32;&quot;out/2/phi/&quot;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
&#32;&#32;&#32;&#32;}
]
</computeroutput></literallayout> Here, the initial guess of each phase is read first by the two <computeroutput>&quot;FieldIO&quot;</computeroutput> blocks; different from the above single-phase calculation, <computeroutput>&quot;PhaseId&quot;</computeroutput> is needed in each <computeroutput>&quot;FieldIO&quot;</computeroutput> block, which takes the value of <computeroutput>1</computeroutput> or <computeroutput>2</computeroutput> in accordance to the command-line arguments of <computeroutput>-d</computeroutput>, <computeroutput>D1</computeroutput> and <computeroutput>D2</computeroutput>, respectively (see <link linkend="_user_usage_page">Invoking an Executable</link>). In the <computeroutput>&quot;PhaseBoundaryPoints&quot;</computeroutput> block, <computeroutput>&quot;epsilon&quot;</computeroutput> specifies the criterion of convergence, which is the absolute difference in the Helmholtz free-energy density between the two phases; the next line specifies that the calculation is performed at the constant value for the statistical segment length (<emphasis>i.e.</emphasis>, <computeroutput>&quot;b&quot;</computeroutput>) of segment type 1, which is 1.0; in this case, the calculation solves for the &#967; value between segment types <computeroutput>0</computeroutput> and <computeroutput>1</computeroutput>, which falls in the interval of [19.1, 19.3] as shown in third line. Note that this interval is required by the Ridders&apos; method used for the phase-boundary calculation.</para>

<para>
<literallayout>&#160;&#xa;</literallayout>
 <link linkend="_user_param_page">Parameter Files</link> (Prev) &#160; &#160; &#160; &#160; <link linkend="_user_page">User Guide</link> (Up) &#160; &#160; &#160; &#160; </para>
</section>
