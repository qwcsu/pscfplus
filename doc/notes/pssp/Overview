Top level classes for pseudospectral code:

template <int D, class FFT> 
class System
{
   Mixture
   UnitCell<D>
   Mesh<D>
   FFT
   SpaceGroup<D>
   Basis<D>
   DArray<WField> WFields 
   DArray<CField> CFields
}

------------------------------------------------------------------
Supporting utility classes and functions in PSCF:

class RealVec<int D> -> templated variant of Util::Vector class
class IntVec<int D> -> templated variant of Util::IntVector class

------------------------------------------------------------------
template <int D>
class UnitCell - description of crystallographic unit cell

   Has: 

     Unit cell parameters
     Bravais and reciprocal lattice bases

  Provides:

    Computation of q^2 for InvVec<D> wavevector. 
------------------------------------------------------------------
template <int D>
class Mesh - Description of spatial mesh

    Has: 

      Number of grid points in each direction.

    Provides:

      Shifting of IntVector<D> positions into primary cell.

      Conversion between IntVector<D> positions and 
      integer array indices.

      Shift first Brillouin zone (minimum norm image), given 
      a UnitCell argument.

------------------------------------------------------------------
template <int D>
class FFT - Wrapper for FFT library.

    Has:
 
       Pointer to Mesh

       Typedefs for RField and KField types.

    Provides:

       function to convert RField to KField
       function to convert KField to RField

------------------------------------------------------------------
template <int D, int T>
class RField -> representation of real space field as an array

    Question: Use a simple 1D array with external conversions, 
    or have class provide access by IntVector as well as by 
    vector?

    Proposal: Has a pointer to Mesh, to allow possibility of
    internal conversions.
------------------------------------------------------------------
template <int D, int T>
class KField -> representation of Fourier space field

    Comment: This field will need to provide some acess to
    Fourier components as complex numbers. Do we base this
    on a DArray<std::complex> ?

    How we hide internal representation, to allow use of
    special representation of transform of a real field?

    Question: If we hide the internal representation, how do 
    we represent multipication in Fourier space?

    Proposal:

    1) Allow access to elements as references to complex
    numbers, of type std::complex<T>, using a 1D index that
    may or may not be the same as that used by the Mesh class.

    2) Provide functions convert back and forth between 
    integer index used in this class and IntVector<D> in
    the standard Fourier mesh, with components in the
    range (0, ... , N-1). 

    Has a pointer to Mesh
------------------------------------------------------------------
Fourier space functions:

    Computation of q^2 for wavevector. Member of UnitCell?

    Shift IntVector reciprocal vector to 1st Brillouin Zone.
    Requires UnitCell and Mesh. Global Function?
------------------------------------------------------------------
template <int D>
class Basis:

    Description: Definition of basis functions

    Has: Internal definition of basis, using KField indexing.

    Provide functions to:

       Convert list of coefficients to kField 
       Convert kField to a list of coefficients

    Design using public interface of KField, to allow the 
    same Basis class template to be used with different FFT 
    libraries. 
