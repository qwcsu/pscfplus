<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUnitTestRunner">
<title>UnitTestRunner&lt; UnitTestClass &gt; Class Template Reference</title>
<indexterm><primary>UnitTestRunner&lt; UnitTestClass &gt;</primary></indexterm>
<para>

<para>Template for a <link linkend="_classTestRunner">TestRunner</link> that runs test methods of an associated <link linkend="_classUnitTest">UnitTest</link>. </para>
 
</para>
<para>
<computeroutput>#include &lt;UnitTestRunner.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for UnitTestRunner&lt; UnitTestClass &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUnitTestRunner.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef void(UnitTestClass::* <link linkend="_classUnitTestRunner_1a2ec37f07674baab0dde581647a3e1583">MethodPtr</link>) ()</para>

<para>Pointer to a test method of the associated <link linkend="_classUnitTest">UnitTest</link> class. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUnitTestRunner_1a592efa77517f90ffa926140cbd8ee073">UnitTestRunner</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUnitTestRunner_1ae40b1173760bfdc3dbb729f8dcd5201d">~UnitTestRunner</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUnitTestRunner_1a5acaa6d285f30c481a5b9230538645c5">addTestMethod</link> (<link linkend="_classUnitTestRunner_1a2ec37f07674baab0dde581647a3e1583">MethodPtr</link> methodPtr)</para>

<para>Register a test method of the associated unit test class. </para>
</listitem>
            <listitem><para>int <link linkend="_classUnitTestRunner_1adca0697bb1921c350b6276e78963a0dd">nTestMethod</link> ()</para>

<para>Return the number of registered test methods. </para>
</listitem>
            <listitem><para>void <link linkend="_classUnitTestRunner_1aee1a1d2293994c367a2f53b226980119">method</link> (unsigned int i)</para>

<para>Run test method number i. </para>
</listitem>
            <listitem><para>virtual int <link linkend="_classUnitTestRunner_1a7ff91831fb3150b633fad2a73e6c4522">run</link> ()</para>

<para>Run all registered test methods in the order added. </para>
</listitem>
            <listitem><para>int <link linkend="_classUnitTestRunner_1ad16612e6afc78a84bb970e6c9dcc7a6a">nFailure</link> () const</para>

<para>Return number of failed tests run. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUnitTestRunner_1a2aae8b21506425cb9565fa1972b0252a">isIoProcessor</link> () const</para>

<para>Is this the IO processor of an MPI communicator? </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class UnitTestClass&gt;
class UnitTestRunner&lt; UnitTestClass &gt;</title></simplesect>


<para>Template for a <link linkend="_classTestRunner">TestRunner</link> that runs test methods of an associated <link linkend="_classUnitTest">UnitTest</link>. </para>



<para>A instance of UnitTestRunner&lt;MyTest&gt; holds an array of pointers to all of the test methods of a class MyTest that is a subclass of <link linkend="_classUnitTest">UnitTest</link>. Each such test method must return void and take zero parameters. The <link linkend="_classUnitTestRunner_1a5acaa6d285f30c481a5b9230538645c5">addTestMethod()</link> method is used to register a test method with the <link linkend="_classUnitTestRunner">UnitTestRunner</link> instantiation, by adding a pointer to a test method to this array. The <link linkend="_classUnitTestRunner_1a7ff91831fb3150b633fad2a73e6c4522">run()</link> method runs all of the registered test methods in sequence.</para>

<para>To run a set of unit tests one must:</para>

<para><itemizedlist>
<listitem>
<para>Define a subclass of <link linkend="_classUnitTest">UnitTest</link>,</para>
</listitem><listitem>
<para>Define an associated subclass of <link linkend="_classUnitTestRunner">UnitTestRunner</link>,</para>
</listitem><listitem>
<para>Construct a <link linkend="_classUnitTestRunner">UnitTestRunner</link> object and call <link linkend="_classUnitTestRunner_1a7ff91831fb3150b633fad2a73e6c4522">run()</link>.</para>
</listitem></itemizedlist>
</para>

<para>The boilerplate code required to define a <link linkend="_classUnitTestRunner">UnitTestRunner</link> class may be simplified by using set preprocessor macros that are defined at the end of this file.</para>

<para>Here is an example of the code to to define a subclass of UnitTestRunner&lt;MyTest&gt;, associated with a subclass MyTest of <link linkend="_classUnitTest">UnitTest</link>, and then run all of its test methods, written without using any preprocessor macros: <literallayout><computeroutput>//&#32;Define&#32;a&#32;UnitTest&#32;class
class&#32;MyTest&#32;:&#32;public&#32;UnitTest&#32;{
public:

&#32;&#32;&#32;test1()
&#32;&#32;&#32;{&#32;....&#32;}

&#32;&#32;&#32;test2
&#32;&#32;&#32;{&#32;...&#32;&#32;}

};

//&#32;Define&#32;a&#32;UnitTestRunner&#32;associated&#32;with&#32;MyTest
class&#32;MyTest_Runner&#32;:&#32;public&#32;UnitTestRunner&lt;MyTest&gt;&#32;{
public:

&#32;&#32;&#32;MyTest_Runner(){
&#32;&#32;&#32;&#32;&#32;&#32;addTestMethod(&amp;MyTest::test1);
&#32;&#32;&#32;&#32;&#32;&#32;addTestMethod(&amp;MyTest::test2);
&#32;&#32;&#32;}

}

//&#32;Run&#32;the&#32;tests.
MyTest_Runner&#32;runner;
runner.run();
</computeroutput></literallayout> Note that, by convention:</para>

<para><itemizedlist>
<listitem>
<para>We defined a subclass of UnitTestRunner&lt;MyTest&gt;, called MyTest_Runner.</para>
</listitem><listitem>
<para>All test methods of MyTest are registered in the MyTest_Runner constructor.</para>
</listitem></itemizedlist>
</para>

<para>Calling the <link linkend="_classUnitTestRunner_1a7ff91831fb3150b633fad2a73e6c4522">run()</link> method of MyTest_Runner will then run all of the tests.</para>

<para>The following series of preprocessor macros may be used to generate the definition of the MyTest_Runner class in the above example, and to create an instance of this class: <literallayout><computeroutput>TEST_BEGIN(MyTest)
TEST_ADD(MyTest,&#32;test1)
TEST_ADD(MyTest,&#32;test2)
TEST_END(MyTest)

TEST_RUNNER(MyTest)&#32;runner;
runner.run();
</computeroutput></literallayout> The macro TEST_BEGIN(TestClass) generates the beginning of the class definition for subclass MyTest_Runner of UnitTestRunner&lt;TestClass&gt;. The TEST_ADD(TestClass, Method) adds a specified method of the associated class TestClass to the constructor of the new <link linkend="_classUnitTestRunner">UnitTestRunner</link> class. The TEST_END macro closes both the constructor definition and the class definition. After expansion, the resulting code is completely equivalent to that given in the previous example, after the definition of MyTest.</para>

<para>The name of the <link linkend="_classUnitTestRunner">UnitTestRunner</link> class created by these preprocessor macros is created by appending the standard suffix &quot;_Runner&quot; to the name of the unit test class. Thus, in the above example, the <link linkend="_classTestRunner">TestRunner</link> subclass is named MyTest_Runner. This <link linkend="_classTestRunner">TestRunner</link> subclass name may be referred directly, using this name, or by using the preprocessor macro TEST_RUNNER(TestClass), which expands to the name of the test runner class, e.g., to TestClass_Runner. In the above example, this macro is used as a class name to instantiate an instance of the of required test runner. </para>
<para>
Definition at line 110 of file UnitTestRunner.h.</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classUnitTestRunner_1a2ec37f07674baab0dde581647a3e1583"/>    <section>
    <title>MethodPtr</title>
<indexterm><primary>MethodPtr</primary><secondary>UnitTestRunner&lt; UnitTestClass &gt;</secondary></indexterm>
<indexterm><primary>UnitTestRunner&lt; UnitTestClass &gt;</primary><secondary>MethodPtr</secondary></indexterm>
<computeroutput>template&lt;class UnitTestClass &gt; </computeroutput><para><computeroutput>typedef void(UnitTestClass::* <link linkend="_classUnitTestRunner">UnitTestRunner</link>&lt; UnitTestClass &gt;::MethodPtr) ()</computeroutput></para><para>

<para>Pointer to a test method of the associated <link linkend="_classUnitTest">UnitTest</link> class. </para>
</para>
<para>
Definition at line 121 of file UnitTestRunner.h.</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUnitTestRunner_1a592efa77517f90ffa926140cbd8ee073"/>    <section>
    <title>UnitTestRunner()</title>
<indexterm><primary>UnitTestRunner</primary><secondary>UnitTestRunner&lt; UnitTestClass &gt;</secondary></indexterm>
<indexterm><primary>UnitTestRunner&lt; UnitTestClass &gt;</primary><secondary>UnitTestRunner</secondary></indexterm>
<computeroutput>template&lt;class UnitTestClass &gt; </computeroutput><para><computeroutput><link linkend="_classUnitTestRunner">UnitTestRunner</link>&lt; UnitTestClass &gt;::<link linkend="_classUnitTestRunner">UnitTestRunner</link></computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 172 of file UnitTestRunner.h.</para>
<para>
References TestRunner::isIoProcessor().</para>
    </section><anchor xml:id="_classUnitTestRunner_1ae40b1173760bfdc3dbb729f8dcd5201d"/>    <section>
    <title>~UnitTestRunner()</title>
<indexterm><primary>~UnitTestRunner</primary><secondary>UnitTestRunner&lt; UnitTestClass &gt;</secondary></indexterm>
<indexterm><primary>UnitTestRunner&lt; UnitTestClass &gt;</primary><secondary>~UnitTestRunner</secondary></indexterm>
<computeroutput>template&lt;class UnitTestClass &gt; </computeroutput><para><computeroutput><link linkend="_classUnitTestRunner">UnitTestRunner</link>&lt; UnitTestClass &gt;::~<link linkend="_classUnitTestRunner">UnitTestRunner</link></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 189 of file UnitTestRunner.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUnitTestRunner_1a5acaa6d285f30c481a5b9230538645c5"/>    <section>
    <title>addTestMethod()</title>
<indexterm><primary>addTestMethod</primary><secondary>UnitTestRunner&lt; UnitTestClass &gt;</secondary></indexterm>
<indexterm><primary>UnitTestRunner&lt; UnitTestClass &gt;</primary><secondary>addTestMethod</secondary></indexterm>
<computeroutput>template&lt;class UnitTestClass &gt; </computeroutput><para><computeroutput>void <link linkend="_classUnitTestRunner">UnitTestRunner</link>&lt; UnitTestClass &gt;::addTestMethod (<link linkend="_classUnitTestRunner_1a2ec37f07674baab0dde581647a3e1583">MethodPtr</link> methodPtr)</computeroutput></para><para>

<para>Register a test method of the associated unit test class. </para>
</para>
<para>
Definition at line 196 of file UnitTestRunner.h.</para>
    </section><anchor xml:id="_classUnitTestRunner_1adca0697bb1921c350b6276e78963a0dd"/>    <section>
    <title>nTestMethod()</title>
<indexterm><primary>nTestMethod</primary><secondary>UnitTestRunner&lt; UnitTestClass &gt;</secondary></indexterm>
<indexterm><primary>UnitTestRunner&lt; UnitTestClass &gt;</primary><secondary>nTestMethod</secondary></indexterm>
<computeroutput>template&lt;class UnitTestClass &gt; </computeroutput><para><computeroutput>int <link linkend="_classUnitTestRunner">UnitTestRunner</link>&lt; UnitTestClass &gt;::nTestMethod</computeroutput></para><para>

<para>Return the number of registered test methods. </para>
</para>
<para>
Definition at line 203 of file UnitTestRunner.h.</para>
    </section><anchor xml:id="_classUnitTestRunner_1aee1a1d2293994c367a2f53b226980119"/>    <section>
    <title>method()</title>
<indexterm><primary>method</primary><secondary>UnitTestRunner&lt; UnitTestClass &gt;</secondary></indexterm>
<indexterm><primary>UnitTestRunner&lt; UnitTestClass &gt;</primary><secondary>method</secondary></indexterm>
<computeroutput>template&lt;class UnitTestClass &gt; </computeroutput><para><computeroutput>void <link linkend="_classUnitTestRunner">UnitTestRunner</link>&lt; UnitTestClass &gt;::method (unsigned int i)</computeroutput></para><para>

<para>Run test method number i. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>index of test method </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 212 of file UnitTestRunner.h.</para>
<para>
References TestException::message().</para>
    </section><anchor xml:id="_classUnitTestRunner_1a7ff91831fb3150b633fad2a73e6c4522"/>    <section>
    <title>run()</title>
<indexterm><primary>run</primary><secondary>UnitTestRunner&lt; UnitTestClass &gt;</secondary></indexterm>
<indexterm><primary>UnitTestRunner&lt; UnitTestClass &gt;</primary><secondary>run</secondary></indexterm>
<computeroutput>template&lt;class UnitTestClass &gt; </computeroutput><para><computeroutput>int <link linkend="_classUnitTestRunner">UnitTestRunner</link>&lt; UnitTestClass &gt;::run<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Run all registered test methods in the order added. </para>
</para>
<para>
Implements <link linkend="_classTestRunner_1a3216b1149a6e1f207253c1659a617e77">TestRunner</link>.</para>
<para>
Definition at line 306 of file UnitTestRunner.h.</para>
    </section><anchor xml:id="_classUnitTestRunner_1ad16612e6afc78a84bb970e6c9dcc7a6a"/>    <section>
    <title>nFailure()</title>
<indexterm><primary>nFailure</primary><secondary>UnitTestRunner&lt; UnitTestClass &gt;</secondary></indexterm>
<indexterm><primary>UnitTestRunner&lt; UnitTestClass &gt;</primary><secondary>nFailure</secondary></indexterm>
<computeroutput>template&lt;class UnitTestClass &gt; </computeroutput><para><computeroutput>int TestRunner::nFailure<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return number of failed tests run. </para>
</para>
<para>
Definition at line 223 of file TestRunner.h.</para>
    </section><anchor xml:id="_classUnitTestRunner_1a2aae8b21506425cb9565fa1972b0252a"/>    <section>
    <title>isIoProcessor()</title>
<indexterm><primary>isIoProcessor</primary><secondary>UnitTestRunner&lt; UnitTestClass &gt;</secondary></indexterm>
<indexterm><primary>UnitTestRunner&lt; UnitTestClass &gt;</primary><secondary>isIoProcessor</secondary></indexterm>
<computeroutput>template&lt;class UnitTestClass &gt; </computeroutput><para><computeroutput>bool TestRunner::isIoProcessor<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this the IO processor of an MPI communicator? </para>
</para>
<para>
Definition at line 236 of file TestRunner.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
UnitTestRunner.h</section>
</section>
