<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1DSArray">
<title>Util::DSArray&lt; Data &gt; Class Template Reference</title>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary></indexterm>
<para>

<para>Dynamically allocated array with variable logical size. </para>
 
</para>
<para>
<computeroutput>#include &lt;DSArray.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1DSArray_1ad64cd3de2cab760298f47b02053d996d">DSArray</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1DSArray_1abe1f06b9a3a067685f22b820d19649d6">DSArray</link> (const <link linkend="_classUtil_1_1DSArray">DSArray</link>&lt; Data &gt; &amp;other)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1DSArray">DSArray</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1DSArray_1a181e369c3a69ee9321097bb91dbe0696">operator=</link> (const <link linkend="_classUtil_1_1DSArray">DSArray</link>&lt; Data &gt; &amp;other)</para>

<para>Assignment, element by element. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1DSArray_1a190de23863bbf1fbf3376f184aa1acc0">~DSArray</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1DSArray_1ad9e1548874eb6705e42b88d457da9d6b">allocate</link> (int <link linkend="_classUtil_1_1DSArray_1a9980acef0bd3349954a29eb53a9236ef">capacity</link>)</para>

<para>Allocates the underlying C array. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1DSArray_1a4ac821902ea29016412aaf7d545e3fd7">append</link> (const Data &amp;data)</para>

<para>Append data to the end of the array. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1DSArray_1a64d41954aff28febedc96b210e0d959a">resize</link> (int <link linkend="_classUtil_1_1DSArray_1a7f33a3afebd64bce4d10de81563c8c1f">size</link>)</para>

<para>Modify logical size without modifying data. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1DSArray_1a604a0b36a322430157c415ca16b5355c">clear</link> ()</para>

<para>Set logical size to zero. </para>
</listitem>
            <listitem><para>template&lt;class Archive &gt; </para><para>void <link linkend="_classUtil_1_1DSArray_1a1af3f836d880814d23ebe3d098b6bb5f">serialize</link> (Archive &amp;ar, const unsigned int version)</para>

<para>Serialize a <link linkend="_classUtil_1_1DSArray">DSArray</link> to/from an Archive. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1DSArray_1a20d31a303e4f8747d30955fc232ffce4">begin</link> (<link linkend="_classUtil_1_1ArrayIterator">ArrayIterator</link>&lt; Data &gt; &amp;iterator)</para>

<para>Set an <link linkend="_classUtil_1_1ArrayIterator">ArrayIterator</link> to the beginning of this <link linkend="_classUtil_1_1Array">Array</link>. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1DSArray_1a680727f69ddf30eeaf4f441e5976b1c5">begin</link> (<link linkend="_classUtil_1_1ConstArrayIterator">ConstArrayIterator</link>&lt; Data &gt; &amp;iterator) const</para>

<para>Set a <link linkend="_classUtil_1_1ConstArrayIterator">ConstArrayIterator</link> to the beginning of this <link linkend="_classUtil_1_1Array">Array</link>. </para>
</listitem>
            <listitem><para>Data &amp; <link linkend="_classUtil_1_1DSArray_1a64d57aff171ea7fd76f1e1466481360c">operator[]</link> (int i)</para>

<para>Mimic C array subscripting. </para>
</listitem>
            <listitem><para>const Data &amp; <link linkend="_classUtil_1_1DSArray_1a4d9cb5262ef0469e84c931b4900447e2">operator[]</link> (int i) const</para>

<para>Mimic C array subscripting. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1DSArray_1a9980acef0bd3349954a29eb53a9236ef">capacity</link> () const</para>

<para>Return physical capacity of array. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1DSArray_1a7f33a3afebd64bce4d10de81563c8c1f">size</link> () const</para>

<para>Return logical size of this array (i.e., number of elements). </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1DSArray_1a1e589485650c8f6eb3dac75fd7778105">isAllocated</link> () const</para>

<para>Return true if the <link linkend="_classUtil_1_1DSArray">DSArray</link> has been allocated, false otherwise. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>Data * <link linkend="_classUtil_1_1DSArray_1a59fab10a4eea7d2e3565bf8d8c112894">data_</link></para>

<para>C array of Data elements. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1DSArray_1acecc67e62224b979dac5532f6e1e6505">size_</link></para>

<para>Logical size of array (number of elements used). </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1DSArray_1ae965fbda8c2b0eaa0e71ce6fc0a9bd36">capacity_</link></para>

<para>Capacity (physical size) of underlying C array. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data&gt;
class Util::DSArray&lt; Data &gt;</title></simplesect>


<para>Dynamically allocated array with variable logical size. </para>



<para>A <link linkend="_classUtil_1_1DSArray">DSArray</link> &lt; Data &gt; is a wrapper for a dynamically allocated C array, with continuous elements and a logical size that may be less than or equal to its physical capacity. The logical size is the number of contiguous elements that have been added using the <link linkend="_classUtil_1_1DSArray_1a4ac821902ea29016412aaf7d545e3fd7">append()</link> method. </para>
<para>
Definition at line 30 of file DSArray.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1DSArray_1ad64cd3de2cab760298f47b02053d996d"/>    <section>
    <title>DSArray()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>DSArray</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>DSArray</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::<link linkend="_classUtil_1_1DSArray">DSArray</link></computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 170 of file DSArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1abe1f06b9a3a067685f22b820d19649d6"/>    <section>
    <title>DSArray()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>DSArray</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>DSArray</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::<link linkend="_classUtil_1_1DSArray">DSArray</link> (const <link linkend="_classUtil_1_1DSArray">DSArray</link>&lt; Data &gt; &amp; other)</computeroutput></para><para>

<para>Copy constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the <link linkend="_classUtil_1_1DSArray">DSArray</link> to be copied. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 180 of file DSArray.h.</para>
<para>
References Util::DSArray&lt; Data &gt;::capacity_, Util::DSArray&lt; Data &gt;::data_, Util::DSArray&lt; Data &gt;::isAllocated(), Util::DSArray&lt; Data &gt;::size_, and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1a190de23863bbf1fbf3376f184aa1acc0"/>    <section>
    <title>~DSArray()</title>
<indexterm><primary>~DSArray</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>~DSArray</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::~<link linkend="_classUtil_1_1DSArray">DSArray</link><computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 233 of file DSArray.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1DSArray_1a181e369c3a69ee9321097bb91dbe0696"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1DSArray">DSArray</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::operator= (const <link linkend="_classUtil_1_1DSArray">DSArray</link>&lt; Data &gt; &amp; other)</computeroutput></para><para>

<para>Assignment, element by element. </para>
</para>

<para>Capacity of LHS must be either zero or equal that of RHS <link linkend="_classUtil_1_1DSArray">DSArray</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the RHS <link linkend="_classUtil_1_1DSArray">DSArray</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 204 of file DSArray.h.</para>
<para>
References Util::DSArray&lt; Data &gt;::capacity_, Util::DSArray&lt; Data &gt;::isAllocated(), Util::DSArray&lt; Data &gt;::size_, and UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1ad9e1548874eb6705e42b88d457da9d6b"/>    <section>
    <title>allocate()</title>
<indexterm><primary>allocate</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>allocate</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::allocate (int capacity)</computeroutput></para><para>

<para>Allocates the underlying C array. </para>
</para>

<para>Throw an exception if the <link linkend="_classUtil_1_1DSArray">DSArray</link> has already been allocated - A <link linkend="_classUtil_1_1DSArray">DSArray</link> can only be allocated once.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>capacity</entry>
                                <entry>
<para>number of elements to allocate </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 247 of file DSArray.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1a4ac821902ea29016412aaf7d545e3fd7"/>    <section>
    <title>append()</title>
<indexterm><primary>append</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>append</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::append (const Data &amp; data)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Append data to the end of the array. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>data</entry>
                                <entry>
<para>Data to add to end of array. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 345 of file DSArray.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1a64d41954aff28febedc96b210e0d959a"/>    <section>
    <title>resize()</title>
<indexterm><primary>resize</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>resize</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::resize (int size)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Modify logical size without modifying data. </para>
</para>

<para>The size parameter must be non-negative and may not exceed the physical allocated capacity.</para>

<para>This function simply changes the logical size without modifying any elements of the underlying physical array. When the size increases, added elements are uninitialized.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>size</entry>
                                <entry>
<para>new logical size, 0 &lt;= size &lt; capacity.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                The size parameter must be non-negative and may not exceed the capacity.</para>

<para>This function simply changes the logical size of without modifying any elements of the underlying physical array. If the size increases, added elements are uninitialized.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>size</entry>
                                <entry>
<para>new logical size, 0 &lt;= size &lt; capacity. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 367 of file DSArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1a604a0b36a322430157c415ca16b5355c"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::clear<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set logical size to zero. </para>
</para>
<para>
Definition at line 374 of file DSArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1a1af3f836d880814d23ebe3d098b6bb5f"/>    <section>
    <title>serialize()</title>
<indexterm><primary>serialize</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>serialize</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><computeroutput>template&lt;class Archive &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::serialize (Archive &amp; ar, const unsigned int version)</computeroutput></para><para>

<para>Serialize a <link linkend="_classUtil_1_1DSArray">DSArray</link> to/from an Archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>archive </para>
</entry>
                            </row>
                            <row>
                                <entry>version</entry>
                                <entry>
<para>archive version id </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 265 of file DSArray.h.</para>
<para>
References UTIL_THROW.</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1a20d31a303e4f8747d30955fc232ffce4"/>    <section>
    <title>begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::begin (<link linkend="_classUtil_1_1ArrayIterator">ArrayIterator</link>&lt; Data &gt; &amp; iterator)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set an <link linkend="_classUtil_1_1ArrayIterator">ArrayIterator</link> to the beginning of this <link linkend="_classUtil_1_1Array">Array</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>iterator</entry>
                                <entry>
<para><link linkend="_classUtil_1_1ArrayIterator">ArrayIterator</link>, initialized on output. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 302 of file DSArray.h.</para>
<para>
References Util::ArrayIterator&lt; Data &gt;::setCurrent(), and Util::ArrayIterator&lt; Data &gt;::setEnd().</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1a680727f69ddf30eeaf4f441e5976b1c5"/>    <section>
    <title>begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::begin (<link linkend="_classUtil_1_1ConstArrayIterator">ConstArrayIterator</link>&lt; Data &gt; &amp; iterator) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set a <link linkend="_classUtil_1_1ConstArrayIterator">ConstArrayIterator</link> to the beginning of this <link linkend="_classUtil_1_1Array">Array</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>iterator</entry>
                                <entry>
<para><link linkend="_classUtil_1_1ConstArrayIterator">ConstArrayIterator</link>, initialized on output. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 313 of file DSArray.h.</para>
<para>
References Util::ConstArrayIterator&lt; Data &gt;::setCurrent(), and Util::ConstArrayIterator&lt; Data &gt;::setEnd().</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1a64d57aff171ea7fd76f1e1466481360c"/>    <section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>Data &amp; <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::operator[] (int i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Mimic C array subscripting. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>array index </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to element i </para>
</formalpara>
</para>
<para>
Definition at line 323 of file DSArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1a4d9cb5262ef0469e84c931b4900447e2"/>    <section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>const Data &amp; <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::operator[] (int i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Mimic C array subscripting. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>array index </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const reference to element i </para>
</formalpara>
</para>
<para>
Definition at line 334 of file DSArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1a9980acef0bd3349954a29eb53a9236ef"/>    <section>
    <title>capacity()</title>
<indexterm><primary>capacity</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>capacity</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::capacity<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return physical capacity of array. </para>
</para>
<para>
Definition at line 381 of file DSArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1a7f33a3afebd64bce4d10de81563c8c1f"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::size<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return logical size of this array (i.e., number of elements). </para>
</para>
<para>
Definition at line 388 of file DSArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1a1e589485650c8f6eb3dac75fd7778105"/>    <section>
    <title>isAllocated()</title>
<indexterm><primary>isAllocated</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>isAllocated</secondary></indexterm>
<computeroutput>template&lt;class Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::isAllocated<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return true if the <link linkend="_classUtil_1_1DSArray">DSArray</link> has been allocated, false otherwise. </para>
</para>
<para>
Definition at line 395 of file DSArray.h.</para>
<para>
Referenced by Util::DSArray&lt; Data &gt;::DSArray(), and Util::DSArray&lt; Data &gt;::operator=().</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classUtil_1_1DSArray_1a59fab10a4eea7d2e3565bf8d8c112894"/>    <section>
    <title>data_</title>
<indexterm><primary>data_</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>data_</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>Data* <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::data_<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>C array of Data elements. </para>
</para>
<para>
Definition at line 154 of file DSArray.h.</para>
<para>
Referenced by Util::DSArray&lt; Data &gt;::DSArray().</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1acecc67e62224b979dac5532f6e1e6505"/>    <section>
    <title>size_</title>
<indexterm><primary>size_</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>size_</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::size_<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Logical size of array (number of elements used). </para>
</para>
<para>
Definition at line 157 of file DSArray.h.</para>
<para>
Referenced by Util::DSArray&lt; Data &gt;::DSArray(), and Util::DSArray&lt; Data &gt;::operator=().</para>
    </section><anchor xml:id="_classUtil_1_1DSArray_1ae965fbda8c2b0eaa0e71ce6fc0a9bd36"/>    <section>
    <title>capacity_</title>
<indexterm><primary>capacity_</primary><secondary>Util::DSArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::DSArray&lt; Data &gt;</primary><secondary>capacity_</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1DSArray">Util::DSArray</link>&lt; Data &gt;::capacity_<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Capacity (physical size) of underlying C array. </para>
</para>
<para>
Definition at line 160 of file DSArray.h.</para>
<para>
Referenced by Util::DSArray&lt; Data &gt;::DSArray(), and Util::DSArray&lt; Data &gt;::operator=().</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
DSArray.h</section>
</section>
