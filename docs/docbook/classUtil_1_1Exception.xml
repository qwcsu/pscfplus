<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1Exception">
<title>Util::Exception Class Reference</title>
<indexterm><primary>Util::Exception</primary></indexterm>
<para>

<para>A user-defined exception. </para>
 
</para>
<para>
<computeroutput>#include &lt;Exception.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Exception_1a60a6e6753bf304d2533af8569446c347">Exception</link> (const char *function, const char *<link linkend="_classUtil_1_1Exception_1a4d443a56802cc9dabff7c3fa2443fd1c">message</link>, const char *file, int line, int echo=1)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Exception_1a39835ff67a19bd2c94ca88e76b5f36ac">Exception</link> (const char *<link linkend="_classUtil_1_1Exception_1a4d443a56802cc9dabff7c3fa2443fd1c">message</link>, const char *file, int line, int echo=1)</para>

<para>Constructor without function name parameter. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1Exception_1adfe27071f026e0377dba9cda866ee96b">~Exception</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Exception_1a5c23a11b300603bf2b0796118848eac5">write</link> (std::ostream &amp;out)</para>

<para>Write error message to output stream. </para>
</listitem>
            <listitem><para>std::string &amp; <link linkend="_classUtil_1_1Exception_1a4d443a56802cc9dabff7c3fa2443fd1c">message</link> ()</para>

<para>Return the error message. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>std::string <link linkend="_classUtil_1_1Exception_1ad8c7eecfafafc64d68fc161c8a7a3691">message_</link></para>

<para>Error message string. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A user-defined exception. </para>



<para>Exceptions are usually thrown using the <link linkend="_global_8h_1ad2512f8bd062d41d66799cf900151487">UTIL_THROW()</link> macro. </para>
<para>
Definition at line 24 of file Exception.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1Exception_1a60a6e6753bf304d2533af8569446c347"/>    <section>
    <title>Exception()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Exception</primary><secondary>Util::Exception</secondary></indexterm>
<indexterm><primary>Util::Exception</primary><secondary>Exception</secondary></indexterm>
<para><computeroutput>Util::Exception::Exception (const char * function, const char * message, const char * file, int line, int echo = <computeroutput>1</computeroutput>
)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>Constructs error message that includes file and line number. Values of the file and line parameters should be given by the built-in macros <emphasis role="bold">FILE</emphasis> and <emphasis role="bold">LINE</emphasis>, respectively, in the calling function. A typical call of the constructor is thus of the form: <literallayout><computeroutput>throw&#32;Exception(&quot;MyClass::myFunction&quot;,&#32;&quot;A&#32;terrible&#32;thing&#32;happened!&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__FILE__,&#32;__LINE__&#32;);
</computeroutput></literallayout></para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>function</entry>
                                <entry>
<para>name of the function from which the <link linkend="_classUtil_1_1Exception">Exception</link> was thrown </para>
</entry>
                            </row>
                            <row>
                                <entry>message</entry>
                                <entry>
<para>message describing the nature of the error </para>
</entry>
                            </row>
                            <row>
                                <entry>file</entry>
                                <entry>
<para>name of the file from which the <link linkend="_classUtil_1_1Exception">Exception</link> was thrown </para>
</entry>
                            </row>
                            <row>
                                <entry>line</entry>
                                <entry>
<para>line number in file </para>
</entry>
                            </row>
                            <row>
                                <entry>echo</entry>
                                <entry>
<para>if echo, then echo to <link linkend="_classUtil_1_1Log_1a7b86f7c53e482f8f4a1a8b756c162817">Log::file()</link> when constructed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 22 of file Exception.cpp.</para>
<para>
References Util::Log::file(), message(), message_, and write().</para>
    </section><anchor xml:id="_classUtil_1_1Exception_1a39835ff67a19bd2c94ca88e76b5f36ac"/>    <section>
    <title>Exception()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Exception</primary><secondary>Util::Exception</secondary></indexterm>
<indexterm><primary>Util::Exception</primary><secondary>Exception</secondary></indexterm>
<para><computeroutput>Util::Exception::Exception (const char * message, const char * file, int line, int echo = <computeroutput>1</computeroutput>
)</computeroutput></para><para>

<para>Constructor without function name parameter. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>message</entry>
                                <entry>
<para>message describing the nature of the error </para>
</entry>
                            </row>
                            <row>
                                <entry>file</entry>
                                <entry>
<para>name of the file from which the <link linkend="_classUtil_1_1Exception">Exception</link> was thrown </para>
</entry>
                            </row>
                            <row>
                                <entry>line</entry>
                                <entry>
<para>line number in file </para>
</entry>
                            </row>
                            <row>
                                <entry>echo</entry>
                                <entry>
<para>if echo, then echo to std out when constructed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 48 of file Exception.cpp.</para>
<para>
References Util::Log::file(), message(), message_, and write().</para>
    </section><anchor xml:id="_classUtil_1_1Exception_1adfe27071f026e0377dba9cda866ee96b"/>    <section>
    <title>~Exception()</title>
<indexterm><primary>~Exception</primary><secondary>Util::Exception</secondary></indexterm>
<indexterm><primary>Util::Exception</primary><secondary>~Exception</secondary></indexterm>
<para><computeroutput>Util::Exception::~Exception ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 71 of file Exception.cpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1Exception_1a5c23a11b300603bf2b0796118848eac5"/>    <section>
    <title>write()</title>
<indexterm><primary>write</primary><secondary>Util::Exception</secondary></indexterm>
<indexterm><primary>Util::Exception</primary><secondary>write</secondary></indexterm>
<para><computeroutput>void Util::Exception::write (std::ostream &amp; out)</computeroutput></para><para>

<para>Write error message to output stream. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 77 of file Exception.cpp.</para>
<para>
References message_.</para>
<para>
Referenced by Exception().</para>
    </section><anchor xml:id="_classUtil_1_1Exception_1a4d443a56802cc9dabff7c3fa2443fd1c"/>    <section>
    <title>message()</title>
<indexterm><primary>message</primary><secondary>Util::Exception</secondary></indexterm>
<indexterm><primary>Util::Exception</primary><secondary>message</secondary></indexterm>
<para><computeroutput>std::string &amp; Util::Exception::message ( )</computeroutput></para><para>

<para>Return the error message. </para>
</para>
<para>
Definition at line 83 of file Exception.cpp.</para>
<para>
References message_.</para>
<para>
Referenced by Exception(), and Util::MpiThrow().</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classUtil_1_1Exception_1ad8c7eecfafafc64d68fc161c8a7a3691"/>    <section>
    <title>message_</title>
<indexterm><primary>message_</primary><secondary>Util::Exception</secondary></indexterm>
<indexterm><primary>Util::Exception</primary><secondary>message_</secondary></indexterm>
<para><computeroutput>std::string Util::Exception::message_<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Error message string. </para>
</para>
<para>
Definition at line 80 of file Exception.h.</para>
<para>
Referenced by Exception(), message(), and write().</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
Exception.hException.cpp</section>
</section>
