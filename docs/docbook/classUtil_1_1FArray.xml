<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1FArray">
<title>Util::FArray&lt; Data, Capacity &gt; Class Template Reference</title>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary></indexterm>
<para>

<para>A fixed size (static) contiguous array template. </para>
 
</para>
<para>
<computeroutput>#include &lt;FArray.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1FArray_1ac06ca7838b2f0c837ee02f152192d073">FArray</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1FArray_1a1b1d06bbb55851da5e84e9e2ff8ca958">FArray</link> (const <link linkend="_classUtil_1_1FArray">FArray</link>&lt; Data, Capacity &gt; &amp;other)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1FArray">FArray</link>&lt; Data, Capacity &gt; &amp; <link linkend="_classUtil_1_1FArray_1aa577b8dd046ca7c23793740a00291922">operator=</link> (const <link linkend="_classUtil_1_1FArray">FArray</link>&lt; Data, Capacity &gt; &amp;other)</para>

<para>Assignment, element by element. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1FArray_1aaadc8ac720085dbb25e97cdc0f97dae5">size</link> () const</para>

<para>Return number of elements in this <link linkend="_classUtil_1_1FArray">FArray</link>. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1FArray_1a7a9fd7382038c603d7ee60cac8b667a8">capacity</link> () const</para>

<para>Return number of elements in this <link linkend="_classUtil_1_1FArray">FArray</link>. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1FArray_1ae8e6d0df7a53d38644d52086cdb65125">begin</link> (<link linkend="_classUtil_1_1ArrayIterator">ArrayIterator</link>&lt; Data &gt; &amp;iterator)</para>

<para>Set an <link linkend="_classUtil_1_1ArrayIterator">ArrayIterator</link> to the beginning of this <link linkend="_classUtil_1_1Array">Array</link>. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1FArray_1a2b20dc10958d0be3c93da4abc5258a01">begin</link> (<link linkend="_classUtil_1_1ConstArrayIterator">ConstArrayIterator</link>&lt; Data &gt; &amp;iterator) const</para>

<para>Set a <link linkend="_classUtil_1_1ConstArrayIterator">ConstArrayIterator</link> to the beginning of this <link linkend="_classUtil_1_1Array">Array</link>. </para>
</listitem>
            <listitem><para>Data &amp; <link linkend="_classUtil_1_1FArray_1a9463deaba1551f9a4b9cc87925bd2dc8">operator[]</link> (int i)</para>

<para>Mimic C array subscripting. </para>
</listitem>
            <listitem><para>const Data &amp; <link linkend="_classUtil_1_1FArray_1a05f1dc7cd6c5c623e42469294b8eeb83">operator[]</link> (int i) const</para>

<para>Mimic C array subscripting. </para>
</listitem>
            <listitem><para>Data * <link linkend="_classUtil_1_1FArray_1a38b3a0a53719b66bb3d793fee7530229">cArray</link> ()</para>

<para>Return pointer to underlying C array. </para>
</listitem>
            <listitem><para>const Data * <link linkend="_classUtil_1_1FArray_1a1c6edc99a6c317e4a28cd9c95ab3cb3f">cArray</link> () const</para>

<para>Return pointer to const to underlying C array. </para>
</listitem>
            <listitem><para>template&lt;class Archive &gt; </para><para>void <link linkend="_classUtil_1_1FArray_1a91cb6495c91344abeb9bf2c03a604f65">serialize</link> (Archive &amp;ar, const unsigned int version)</para>

<para>Serialize a <link linkend="_classUtil_1_1FArray">FArray</link> to/from an Archive. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1FArray_1a3f7e30d67eeae5358ae4a7f4c94322e8">packedSize</link> ()</para>

<para>Return packed size in a MemoryArchive, in bytes. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static void <link linkend="_classUtil_1_1FArray_1ae529424c6c27799916edd7c441cb3280">commitMpiType</link> ()</para>

<para>Commit associated MPI DataType. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data, int Capacity&gt;
class Util::FArray&lt; Data, Capacity &gt;</title></simplesect>


<para>A fixed size (static) contiguous array template. </para>



<para>An <link linkend="_classUtil_1_1FArray">FArray</link> is a simple wraper for a fixed size C <link linkend="_classUtil_1_1Array">Array</link>, with a capacity that is fixed at compile time. As in a C <link linkend="_classUtil_1_1Array">Array</link>, or a <link linkend="_classUtil_1_1DArray">DArray</link> container, all of the elements are accessible. Unlike an <link linkend="_classUtil_1_1FSArray">FSArray</link>, an <link linkend="_classUtil_1_1FArray">FArray</link> does not have logical size that is distinct from its physical capacity.</para>

<para>When bounds checking is on (i.e., when NDEBUG is not defined), the operator [] checks that the index is non-negative and less than the Capacity.</para>

<para>Advice: Use an <link linkend="_classUtil_1_1FArray">FArray</link> if you know exactly how many elements will be needed at compile time. Use an <link linkend="_classUtil_1_1FSArray">FSArray</link> when you need a small statically allocated array for which the maximum capacity needed is known at compile time, but the logical size may be less than the capacity. Use a <link linkend="_classUtil_1_1DArray">DArray</link> if you need a large, dynamically allocated array that must be allocated after instantiation. </para>
<para>
Definition at line 46 of file FArray.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1FArray_1ac06ca7838b2f0c837ee02f152192d073"/>    <section>
    <title>FArray()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>FArray</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>FArray</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::<link linkend="_classUtil_1_1FArray">FArray</link></computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 156 of file FArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FArray_1a1b1d06bbb55851da5e84e9e2ff8ca958"/>    <section>
    <title>FArray()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>FArray</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>FArray</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::<link linkend="_classUtil_1_1FArray">FArray</link> (const <link linkend="_classUtil_1_1FArray">FArray</link>&lt; Data, Capacity &gt; &amp; other)</computeroutput></para><para>

<para>Copy constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the <link linkend="_classUtil_1_1FArray">FArray</link> to be copied. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 165 of file FArray.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1FArray_1aa577b8dd046ca7c23793740a00291922"/>    <section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1FArray">FArray</link>&lt; Data, Capacity &gt; &amp; <link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::operator= (const <link linkend="_classUtil_1_1FArray">FArray</link>&lt; Data, Capacity &gt; &amp; other)</computeroutput></para><para>

<para>Assignment, element by element. </para>
</para>

<para>Capacity of LHS <link linkend="_classUtil_1_1FArray">FArray</link> must be &gt;= size of RHS <link linkend="_classUtil_1_1FArray">FArray</link>.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para>the RHS <link linkend="_classUtil_1_1FArray">FArray</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 181 of file FArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FArray_1aaadc8ac720085dbb25e97cdc0f97dae5"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::size<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return number of elements in this <link linkend="_classUtil_1_1FArray">FArray</link>. </para>
</para>
<para>
Definition at line 200 of file FArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FArray_1a7a9fd7382038c603d7ee60cac8b667a8"/>    <section>
    <title>capacity()</title>
<indexterm><primary>capacity</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>capacity</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::capacity<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return number of elements in this <link linkend="_classUtil_1_1FArray">FArray</link>. </para>
</para>
<para>
Definition at line 207 of file FArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FArray_1ae8e6d0df7a53d38644d52086cdb65125"/>    <section>
    <title>begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::begin (<link linkend="_classUtil_1_1ArrayIterator">ArrayIterator</link>&lt; Data &gt; &amp; iterator)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set an <link linkend="_classUtil_1_1ArrayIterator">ArrayIterator</link> to the beginning of this <link linkend="_classUtil_1_1Array">Array</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>iterator</entry>
                                <entry>
<para><link linkend="_classUtil_1_1ArrayIterator">ArrayIterator</link>, initialized on output. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 214 of file FArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FArray_1a2b20dc10958d0be3c93da4abc5258a01"/>    <section>
    <title>begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::begin (<link linkend="_classUtil_1_1ConstArrayIterator">ConstArrayIterator</link>&lt; Data &gt; &amp; iterator) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Set a <link linkend="_classUtil_1_1ConstArrayIterator">ConstArrayIterator</link> to the beginning of this <link linkend="_classUtil_1_1Array">Array</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>iterator</entry>
                                <entry>
<para><link linkend="_classUtil_1_1ConstArrayIterator">ConstArrayIterator</link>, initialized on output. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 225 of file FArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FArray_1a9463deaba1551f9a4b9cc87925bd2dc8"/>    <section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>Data &amp; <link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::operator[] (int i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Mimic C array subscripting. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>array index </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to element i </para>
</formalpara>
</para>
<para>
Definition at line 235 of file FArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FArray_1a05f1dc7cd6c5c623e42469294b8eeb83"/>    <section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>const Data &amp; <link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::operator[] (int i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Mimic C array subscripting. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>array index </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const reference to element i </para>
</formalpara>
</para>
<para>
Definition at line 246 of file FArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FArray_1a38b3a0a53719b66bb3d793fee7530229"/>    <section>
    <title>cArray()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>cArray</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>cArray</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>const Data * <link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::cArray<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return pointer to underlying C array. </para>
</para>
<para>
Definition at line 257 of file FArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FArray_1a1c6edc99a6c317e4a28cd9c95ab3cb3f"/>    <section>
    <title>cArray()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>cArray</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>cArray</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>const Data* <link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::cArray ( ) const</computeroutput></para><para>

<para>Return pointer to const to underlying C array. </para>
</para>
    </section><anchor xml:id="_classUtil_1_1FArray_1a91cb6495c91344abeb9bf2c03a604f65"/>    <section>
    <title>serialize()</title>
<indexterm><primary>serialize</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>serialize</secondary></indexterm>
<computeroutput>template&lt;class Data , int Capacity&gt; </computeroutput><computeroutput>template&lt;class Archive &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::serialize (Archive &amp; ar, const unsigned int version)</computeroutput></para><para>

<para>Serialize a <link linkend="_classUtil_1_1FArray">FArray</link> to/from an Archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>archive </para>
</entry>
                            </row>
                            <row>
                                <entry>version</entry>
                                <entry>
<para>archive version id </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 272 of file FArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FArray_1a3f7e30d67eeae5358ae4a7f4c94322e8"/>    <section>
    <title>packedSize()</title>
<indexterm><primary>packedSize</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>packedSize</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::packedSize</computeroutput></para><para>

<para>Return packed size in a MemoryArchive, in bytes. </para>
</para>

<para>Packed size of <link linkend="_classUtil_1_1FArray">FArray</link> in a MemoryArchive, in bytes. </para>
<para>
Definition at line 284 of file FArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1FArray_1ae529424c6c27799916edd7c441cb3280"/>    <section>
    <title>commitMpiType()</title>
<indexterm><primary>commitMpiType</primary><secondary>Util::FArray&lt; Data, Capacity &gt;</secondary></indexterm>
<indexterm><primary>Util::FArray&lt; Data, Capacity &gt;</primary><secondary>commitMpiType</secondary></indexterm>
<computeroutput>template&lt;typename Data , int Capacity&gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1FArray">Util::FArray</link>&lt; Data, Capacity &gt;::commitMpiType<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Commit associated MPI DataType. </para>
</para>
<para>
Definition at line 292 of file FArray.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
FArray.h</section>
</section>
