<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1Label">
<title>Util::Label Class Reference</title>
<indexterm><primary>Util::Label</primary></indexterm>
<para>

<para>A label string in a file format. </para>
 
</para>
<para>
<computeroutput>#include &lt;Label.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Util::Label:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUtil_1_1Label.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1Label_1a1a826953c8e3ab859be7114be446e333">Label</link> (bool <link linkend="_classUtil_1_1Label_1ac791718338466c3dbccd29b6ffd2ad7d">isRequired</link>=true)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Label_1a613e5df9d777d385f33b33749af65a20">Label</link> (std::string <link linkend="_classUtil_1_1Label_1a1ccab72fb358f2ff2ba6346015a8667c">string</link>, bool <link linkend="_classUtil_1_1Label_1ac791718338466c3dbccd29b6ffd2ad7d">isRequired</link>=true)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Label_1ab57db5a1963483c814393e139689110a">Label</link> (const char *<link linkend="_classUtil_1_1Label_1a1ccab72fb358f2ff2ba6346015a8667c">string</link>, bool <link linkend="_classUtil_1_1Label_1ac791718338466c3dbccd29b6ffd2ad7d">isRequired</link>=true)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Label_1a4e67da7f9094195a1dff7c75e7edb5e5">Label</link> (const <link linkend="_classUtil_1_1Label">Label</link> &amp;other)</para>

<para>Copy constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1Label_1a8782aabe2a82db72eb5cffa35c6bd5bf">~Label</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1Label_1aa23db34d69f525c47a9f78bfccea822c">setString</link> (std::string <link linkend="_classUtil_1_1Label_1a1ccab72fb358f2ff2ba6346015a8667c">string</link>)</para>

<para>Set the label string. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Label_1a95aa094dff8d40d59be6bda42ed913f5">match</link> (std::istream &amp;in)</para>

<para>Read and attempt to match next word in an input stream. </para>
</listitem>
            <listitem><para>std::string <link linkend="_classUtil_1_1Label_1a1ccab72fb358f2ff2ba6346015a8667c">string</link> () const</para>

<para>Return label string. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1Label_1ac791718338466c3dbccd29b6ffd2ad7d">isRequired</link> () const</para>

<para>Is this the label for a required component? </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static void <link linkend="_classUtil_1_1Label_1a76b850aaf2279e0be0379b604d82009f">clear</link> ()</para>

<para>Reset buffer and flags to initial state. </para>
</listitem>
            <listitem><para>static bool <link linkend="_classUtil_1_1Label_1af44215d8ff6966dc0d8ed7ae7d034cba">isClear</link> ()</para>

<para>Is the input buffer clear? </para>
</listitem>
            <listitem><para>static bool <link linkend="_classUtil_1_1Label_1a5bfbef02f5d1b14a8591db86c24abb7f">isMatched</link> ()</para>

<para>Did the most recent attempt to match a <link linkend="_classUtil_1_1Label">Label</link> succeed? </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static const int <link linkend="_classUtil_1_1Label_1a565ae6c808ea000faaf211615f3e5759">LabelWidth</link> = 20</para>

<para>Width of label field in file output format. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>std::istream &amp; <link linkend="_classUtil_1_1Label_1a98e27a9dc2fb685ef916c36c2ba74ef4">operator&gt;&gt;</link> (std::istream &amp;in, <link linkend="_classUtil_1_1Label">Label</link> label)</para>

<para>Extractor for <link linkend="_classUtil_1_1Label">Label</link>. </para>
</listitem>
            <listitem><para>std::ostream &amp; <link linkend="_classUtil_1_1Label_1aefee827789370d51cb65d3889dee89d9">operator&lt;&lt;</link> (std::ostream &amp;out, <link linkend="_classUtil_1_1Label">Label</link> label)</para>

<para>Inserter for <link linkend="_classUtil_1_1Label">Label</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>A label string in a file format. </para>



<para>The operator &gt;&gt; for a label checks if the expected label was found. The operator &lt;&lt; outputs the expected label.</para>

<para>The constructor takes a parameter isRequired that determines whether the label must be matched (isRequired == true), or if it is optional (isRequired == false). If the input value read by the &gt;&gt; operator does not match the expected value and isRequired is true, the &gt;&gt; operator will print an error message to the <link linkend="_classUtil_1_1Log_1a7b86f7c53e482f8f4a1a8b756c162817">Log::file()</link> and then throw an <link linkend="_classUtil_1_1Exception">Exception</link>. If the input value does not match and isRequired is false, the &gt;&gt; operator stores the input value in a string buffer, and will compare it to subsequent values until a match is found. </para>
<para>
Definition at line 36 of file Label.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1Label_1a1a826953c8e3ab859be7114be446e333"/>    <section>
    <title>Label()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>Label</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>Label</secondary></indexterm>
<para><computeroutput>Util::Label::Label (bool isRequired = <computeroutput>true</computeroutput>
)<computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>isRequired</entry>
                                <entry>
<para>Is this label a required entry? (true by default) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 45 of file Label.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Label_1a613e5df9d777d385f33b33749af65a20"/>    <section>
    <title>Label()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>Label</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>Label</secondary></indexterm>
<para><computeroutput>Util::Label::Label (std::string string, bool isRequired = <computeroutput>true</computeroutput>
)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>string</entry>
                                <entry>
<para>label string that precedes value in file format </para>
</entry>
                            </row>
                            <row>
                                <entry>isRequired</entry>
                                <entry>
<para>Is this label a required entry? (true by default) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 53 of file Label.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Label_1ab57db5a1963483c814393e139689110a"/>    <section>
    <title>Label()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>Label</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>Label</secondary></indexterm>
<para><computeroutput>Util::Label::Label (const char * string, bool isRequired = <computeroutput>true</computeroutput>
)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>string</entry>
                                <entry>
<para>label string that precedes value in file format </para>
</entry>
                            </row>
                            <row>
                                <entry>isRequired</entry>
                                <entry>
<para>Is this label a required entry? (true by default) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 61 of file Label.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Label_1a4e67da7f9094195a1dff7c75e7edb5e5"/>    <section>
    <title>Label()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>Label</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>Label</secondary></indexterm>
<para><computeroutput>Util::Label::Label (const <link linkend="_classUtil_1_1Label">Label</link> &amp; other)</computeroutput></para><para>

<para>Copy constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>other</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Label">Label</link> object being copied. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 69 of file Label.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Label_1a8782aabe2a82db72eb5cffa35c6bd5bf"/>    <section>
    <title>~Label()</title>
<indexterm><primary>~Label</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>~Label</secondary></indexterm>
<para><computeroutput>Util::Label::~Label ( )<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 77 of file Label.cpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1Label_1a76b850aaf2279e0be0379b604d82009f"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>clear</secondary></indexterm>
<para><computeroutput>void Util::Label::clear ( )<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Reset buffer and flags to initial state. </para>
</para>

<para>Clears buffer, sets isClear = true and isMatched = false. </para>
<para>
Definition at line 27 of file Label.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Label_1af44215d8ff6966dc0d8ed7ae7d034cba"/>    <section>
    <title>isClear()</title>
<indexterm><primary>isClear</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>isClear</secondary></indexterm>
<para><computeroutput>bool Util::Label::isClear ( )<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Is the input buffer clear? </para>
</para>
<para>
Definition at line 37 of file Label.cpp.</para>
<para>
Referenced by Util::Begin::readParam().</para>
    </section><anchor xml:id="_classUtil_1_1Label_1a5bfbef02f5d1b14a8591db86c24abb7f"/>    <section>
    <title>isMatched()</title>
<indexterm><primary>isMatched</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>isMatched</secondary></indexterm>
<para><computeroutput>bool Util::Label::isMatched ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Did the most recent attempt to match a <link linkend="_classUtil_1_1Label">Label</link> succeed? </para>
</para>

<para>Returns true after a succesful match by operator &gt;&gt; or the <link linkend="_classUtil_1_1Label_1a95aa094dff8d40d59be6bda42ed913f5">match()</link> function. Returns false before any attempt to match any <link linkend="_classUtil_1_1Label">Label</link>, after a failed attempt with an an optional label. </para>
<para>
Definition at line 203 of file Label.h.</para>
<para>
Referenced by Util::Parameter::readParam().</para>
    </section><anchor xml:id="_classUtil_1_1Label_1aa23db34d69f525c47a9f78bfccea822c"/>    <section>
    <title>setString()</title>
<indexterm><primary>setString</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>setString</secondary></indexterm>
<para><computeroutput>void Util::Label::setString (std::string string)</computeroutput></para><para>

<para>Set the label string. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>string</entry>
                                <entry>
<para>label string that precedes value in file format </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 83 of file Label.cpp.</para>
<para>
References string().</para>
<para>
Referenced by Util::Begin::Begin().</para>
    </section><anchor xml:id="_classUtil_1_1Label_1a95aa094dff8d40d59be6bda42ed913f5"/>    <section>
    <title>match()</title>
<indexterm><primary>match</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>match</secondary></indexterm>
<para><computeroutput>bool Util::Label::match (std::istream &amp; in)</computeroutput></para><para>

<para>Read and attempt to match next word in an input stream. </para>
</para>

<para>This is a convenience function that invokes operator &gt;&gt; to read a word and then returns the value of <link linkend="_classUtil_1_1Label_1a5bfbef02f5d1b14a8591db86c24abb7f">Label::isMatched()</link>. For an optional <link linkend="_classUtil_1_1Label">Label</link>, this returns true upon a successful match and false otherwise. For a required label, returns true upon a successful match or throws an <link linkend="_classUtil_1_1Exception">Exception</link>. </para>
<para>
Definition at line 95 of file Label.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Label_1a1ccab72fb358f2ff2ba6346015a8667c"/>    <section>
    <title>string()</title>
<indexterm><primary>string</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>string</secondary></indexterm>
<para><computeroutput>std::string Util::Label::string ( ) const</computeroutput></para><para>

<para>Return label string. </para>
</para>
<para>
Definition at line 89 of file Label.cpp.</para>
<para>
Referenced by Util::Parameter::label(), setString(), and Util::Begin::writeParam().</para>
    </section><anchor xml:id="_classUtil_1_1Label_1ac791718338466c3dbccd29b6ffd2ad7d"/>    <section>
    <title>isRequired()</title>
<indexterm><primary>isRequired</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>isRequired</secondary></indexterm>
<para><computeroutput>bool Util::Label::isRequired ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Is this the label for a required component? </para>
</para>
<para>
Definition at line 197 of file Label.h.</para>
<para>
Referenced by Util::Begin::isRequired(), Util::Parameter::isRequired(), and Util::operator&gt;&gt;().</para>
</section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_classUtil_1_1Label_1a98e27a9dc2fb685ef916c36c2ba74ef4"/>    <section>
    <title>operator&gt;&gt;</title>
<indexterm><primary>operator&gt;&gt;</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>operator&gt;&gt;</secondary></indexterm>
<para><computeroutput>std::istream&amp; operator&gt;&gt; (std::istream &amp; in, <link linkend="_classUtil_1_1Label">Label</link> label)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Extractor for <link linkend="_classUtil_1_1Label">Label</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream </para>
</entry>
                            </row>
                            <row>
                                <entry>label</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Label">Label</link> to be read from file </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 104 of file Label.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Label_1aefee827789370d51cb65d3889dee89d9"/>    <section>
    <title>operator&lt;&lt;</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<para><computeroutput>std::ostream&amp; operator&lt;&lt; (std::ostream &amp; out, <link linkend="_classUtil_1_1Label">Label</link> label)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>Inserter for <link linkend="_classUtil_1_1Label">Label</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                            <row>
                                <entry>label</entry>
                                <entry>
<para><link linkend="_classUtil_1_1Label">Label</link> to be written to file </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 158 of file Label.cpp.</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classUtil_1_1Label_1a565ae6c808ea000faaf211615f3e5759"/>    <section>
    <title>LabelWidth</title>
<indexterm><primary>LabelWidth</primary><secondary>Util::Label</secondary></indexterm>
<indexterm><primary>Util::Label</primary><secondary>LabelWidth</secondary></indexterm>
<para><computeroutput>const int Util::Label::LabelWidth = 20<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Width of label field in file output format. </para>
</para>
<para>
Definition at line 44 of file Label.h.</para>
<para>
Referenced by Util::operator&lt;&lt;().</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
Label.hLabel.cpp</section>
</section>
