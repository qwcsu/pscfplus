<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1ListArray">
<title>Util::ListArray&lt; Data &gt; Class Template Reference</title>
<indexterm><primary>Util::ListArray&lt; Data &gt;</primary></indexterm>
<para>

<para>An array of objects that are accessible by one or more linked <link linkend="_classUtil_1_1List">List</link> objects. </para>
 
</para>
<para>
<computeroutput>#include &lt;ListArray.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1ListArray_1a20d38a4076d6a04c3347fb53eb2d0006">ListArray</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>virtual <link linkend="_classUtil_1_1ListArray_1a9948be428d296da982a1bd2d4562b598">~ListArray</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1ListArray_1a93c26acd9ebe997d7f4444d30117e9dc">allocate</link> (int <link linkend="_classUtil_1_1ListArray_1abf810ede4cacbff3aeb9d8ad5c438afd">capacity</link>, int <link linkend="_classUtil_1_1ListArray_1ae776e332dfa9cb2f2dcffd3dbee95f0a">nList</link>)</para>

<para>Allocate arrays of <link linkend="_classUtil_1_1Node">Node</link> and <link linkend="_classUtil_1_1List">List</link> objects. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1ListArray_1ae776e332dfa9cb2f2dcffd3dbee95f0a">nList</link> () const</para>

<para>Get the number of associated linked lists. </para>
</listitem>
            <listitem><para>int <link linkend="_classUtil_1_1ListArray_1abf810ede4cacbff3aeb9d8ad5c438afd">capacity</link> () const</para>

<para>Return allocated size of underlying array of nodes. </para>
</listitem>
            <listitem><para>Data &amp; <link linkend="_classUtil_1_1ListArray_1aca3130f7a272ecd0927eac958517ddcd">operator[]</link> (int i)</para>

<para>Return data for node element i. </para>
</listitem>
            <listitem><para>const Data &amp; <link linkend="_classUtil_1_1ListArray_1a37e294eb1db44a8865adaaf762479341">operator[]</link> (int i) const</para>

<para>Return const refereence to Data in <link linkend="_classUtil_1_1Node">Node</link> element number i. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1List">List</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1ListArray_1a48ca662d8520cdb00dae13fc1f616e62">list</link> (int i)</para>

<para>Return a reference to a specific <link linkend="_classUtil_1_1List">List</link>. </para>
</listitem>
            <listitem><para>const <link linkend="_classUtil_1_1List">List</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1ListArray_1aedb6834b5c07d78b57bde641dca45520">list</link> (int i) const</para>

<para>Return a const reference to a specific <link linkend="_classUtil_1_1List">List</link>. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1ListArray_1a2f63c3fe99c544c18d5c8158b8f4424d">node</link> (int i)</para>

<para>Return reference to node number i. </para>
</listitem>
            <listitem><para>bool <link linkend="_classUtil_1_1ListArray_1acab13c984810b53e1dea452897dc33b6">isValid</link> () const</para>

<para>Return true if the ListAray is valid, or throw an exception. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename Data&gt;
class Util::ListArray&lt; Data &gt;</title></simplesect>


<para>An array of objects that are accessible by one or more linked <link linkend="_classUtil_1_1List">List</link> objects. </para>



<para>A <link linkend="_classUtil_1_1ListArray">ListArray</link> is an allocatable array of data objects that also provides access to some or all of its via one or more associated <link linkend="_classUtil_1_1List">List</link> objects. Each element of the array may be part of at most one <link linkend="_classUtil_1_1List">List</link>. </para>
<para>
Definition at line 30 of file ListArray.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1ListArray_1a20d38a4076d6a04c3347fb53eb2d0006"/>    <section>
    <title>ListArray()</title>
<indexterm><primary>ListArray</primary><secondary>Util::ListArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListArray&lt; Data &gt;</primary><secondary>ListArray</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1ListArray">Util::ListArray</link>&lt; Data &gt;::<link linkend="_classUtil_1_1ListArray">ListArray</link></computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 148 of file ListArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListArray_1a9948be428d296da982a1bd2d4562b598"/>    <section>
    <title>~ListArray()</title>
<indexterm><primary>~ListArray</primary><secondary>Util::ListArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListArray&lt; Data &gt;</primary><secondary>~ListArray</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1ListArray">Util::ListArray</link>&lt; Data &gt;::~<link linkend="_classUtil_1_1ListArray">ListArray</link><computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>

<para>Delete dynamically allocated arrays of <link linkend="_classUtil_1_1Node">Node</link> and <link linkend="_classUtil_1_1List">List</link> objects. </para>
<para>
Definition at line 161 of file ListArray.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1ListArray_1a93c26acd9ebe997d7f4444d30117e9dc"/>    <section>
    <title>allocate()</title>
<indexterm><primary>allocate</primary><secondary>Util::ListArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListArray&lt; Data &gt;</primary><secondary>allocate</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ListArray">Util::ListArray</link>&lt; Data &gt;::allocate (int capacity, int nList)</computeroutput></para><para>

<para>Allocate arrays of <link linkend="_classUtil_1_1Node">Node</link> and <link linkend="_classUtil_1_1List">List</link> objects. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>capacity</entry>
                                <entry>
<para>size of array Node&lt;Data&gt; objects </para>
</entry>
                            </row>
                            <row>
                                <entry>nList</entry>
                                <entry>
<para>size of array of List&lt;Data&gt; linked list objects </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 178 of file ListArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListArray_1ae776e332dfa9cb2f2dcffd3dbee95f0a"/>    <section>
    <title>nList()</title>
<indexterm><primary>nList</primary><secondary>Util::ListArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListArray&lt; Data &gt;</primary><secondary>nList</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1ListArray">Util::ListArray</link>&lt; Data &gt;::nList<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the number of associated linked lists. </para>
</para>

<para><formalpara><title>Returns</title>

<para>size of array of associated List&lt;Data&gt; objects. </para>
</formalpara>
</para>
<para>
Definition at line 201 of file ListArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListArray_1abf810ede4cacbff3aeb9d8ad5c438afd"/>    <section>
    <title>capacity()</title>
<indexterm><primary>capacity</primary><secondary>Util::ListArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListArray&lt; Data &gt;</primary><secondary>capacity</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>int <link linkend="_classUtil_1_1ListArray">Util::ListArray</link>&lt; Data &gt;::capacity ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return allocated size of underlying array of nodes. </para>
</para>

<para><formalpara><title>Returns</title>

<para>Number of elements allocated in array. </para>
</formalpara>
</para>
<para>
Definition at line 67 of file ListArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListArray_1aca3130f7a272ecd0927eac958517ddcd"/>    <section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Util::ListArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListArray&lt; Data &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>Data&amp; <link linkend="_classUtil_1_1ListArray">Util::ListArray</link>&lt; Data &gt;::operator[] (int i)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return data for node element i. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>array index </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to element i </para>
</formalpara>
</para>
<para>
Definition at line 76 of file ListArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListArray_1a37e294eb1db44a8865adaaf762479341"/>    <section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>Util::ListArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListArray&lt; Data &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>const Data&amp; <link linkend="_classUtil_1_1ListArray">Util::ListArray</link>&lt; Data &gt;::operator[] (int i) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return const refereence to Data in <link linkend="_classUtil_1_1Node">Node</link> element number i. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>array index </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>const reference to element i </para>
</formalpara>
</para>
<para>
Definition at line 90 of file ListArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListArray_1a48ca662d8520cdb00dae13fc1f616e62"/>    <section>
    <title>list()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>list</primary><secondary>Util::ListArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListArray&lt; Data &gt;</primary><secondary>list</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1List">List</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1ListArray">Util::ListArray</link>&lt; Data &gt;::list (int i)</computeroutput></para><para>

<para>Return a reference to a specific <link linkend="_classUtil_1_1List">List</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>array index </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to <link linkend="_classUtil_1_1List">List</link> number i </para>
</formalpara>
</para>
<para>
Definition at line 211 of file ListArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListArray_1aedb6834b5c07d78b57bde641dca45520"/>    <section>
    <title>list()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>list</primary><secondary>Util::ListArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListArray&lt; Data &gt;</primary><secondary>list</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>const <link linkend="_classUtil_1_1List">List</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1ListArray">Util::ListArray</link>&lt; Data &gt;::list (int i) const</computeroutput></para><para>

<para>Return a const reference to a specific <link linkend="_classUtil_1_1List">List</link>. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>array index </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to <link linkend="_classUtil_1_1List">List</link> number i </para>
</formalpara>
</para>
<para>
Definition at line 227 of file ListArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListArray_1a2f63c3fe99c544c18d5c8158b8f4424d"/>    <section>
    <title>node()</title>
<indexterm><primary>node</primary><secondary>Util::ListArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListArray&lt; Data &gt;</primary><secondary>node</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1Node">Node</link>&lt; Data &gt; &amp; <link linkend="_classUtil_1_1ListArray">Util::ListArray</link>&lt; Data &gt;::node (int i)</computeroutput></para><para>

<para>Return reference to node number i. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>i</entry>
                                <entry>
<para>array index </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>reference to Data object element number i </para>
</formalpara>
</para>
<para>
Definition at line 243 of file ListArray.h.</para>
    </section><anchor xml:id="_classUtil_1_1ListArray_1acab13c984810b53e1dea452897dc33b6"/>    <section>
    <title>isValid()</title>
<indexterm><primary>isValid</primary><secondary>Util::ListArray&lt; Data &gt;</secondary></indexterm>
<indexterm><primary>Util::ListArray&lt; Data &gt;</primary><secondary>isValid</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>bool <link linkend="_classUtil_1_1ListArray">Util::ListArray</link>&lt; Data &gt;::isValid</computeroutput></para><para>

<para>Return true if the ListAray is valid, or throw an exception. </para>
</para>
<para>
Definition at line 256 of file ListArray.h.</para>
<para>
References UTIL_THROW.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
ListArray.h</section>
</section>
