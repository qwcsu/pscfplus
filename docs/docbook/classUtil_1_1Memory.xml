<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1Memory">
<title>Util::Memory Class Reference</title>
<indexterm><primary>Util::Memory</primary></indexterm>
<para>

<para>Provides method to allocate array. </para>
 
</para>
<para>
<computeroutput>#include &lt;Memory.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename Data &gt; </para><para>static void <link linkend="_classUtil_1_1Memory_1af6003f193ae6c7a0fc049d7e443e0348">allocate</link> (Data *&amp;ptr, size_t size)</para>

<para>Allocate a C++ array. </para>
</listitem>
            <listitem><para>template&lt;typename Data &gt; </para><para>static void <link linkend="_classUtil_1_1Memory_1a3ded7c631c8cbdb6968f03f8084485a2">deallocate</link> (Data *&amp;ptr, size_t size)</para>

<para>Deallocate a C++ array. </para>
</listitem>
            <listitem><para>template&lt;typename Data &gt; </para><para>static void <link linkend="_classUtil_1_1Memory_1ab2c695bb5d97abccbfff59e4fde16530">reallocate</link> (Data *&amp;ptr, size_t oldSize, size_t newSize)</para>

<para>Reallocate a C++ array. </para>
</listitem>
            <listitem><para>static int <link linkend="_classUtil_1_1Memory_1a8aa7aec77dc5cf6fe9da9c41ddc1293f">nAllocate</link> ()</para>

<para>Return number of times <link linkend="_classUtil_1_1Memory_1af6003f193ae6c7a0fc049d7e443e0348">allocate()</link> was called. </para>
</listitem>
            <listitem><para>static int <link linkend="_classUtil_1_1Memory_1afbb82ff54c3b15e33e4c1ac7d7501dc9">nDeallocate</link> ()</para>

<para>Return number of times <link linkend="_classUtil_1_1Memory_1a3ded7c631c8cbdb6968f03f8084485a2">deallocate()</link> was called. </para>
</listitem>
            <listitem><para>static int <link linkend="_classUtil_1_1Memory_1adfde1ae02377c69ebb91f662600d87cd">total</link> ()</para>

<para>Return total amount of memory currently allocated. </para>
</listitem>
            <listitem><para>static int <link linkend="_classUtil_1_1Memory_1a52d87603f7bf2c9b39f4598aa05c6b0f">max</link> ()</para>

<para>Return the maximum amount of allocated heap memory thus far. </para>
</listitem>
            <listitem><para>static int <link linkend="_classUtil_1_1Memory_1a30fcfa71e89c3fa5327abfda1b2be711">max</link> (MPI::Intracomm &amp;communicator)</para>

<para>Return max for any processor in communicator. </para>
</listitem>
            <listitem><para>static void <link linkend="_classUtil_1_1Memory_1acefa80470b03b3ccc2469aad3d38cd04">initStatic</link> ()</para>

<para>Call this just to guarantee initialization of static memory. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Provides method to allocate array. </para>



<para>The <link linkend="_classUtil_1_1Memory_1af6003f193ae6c7a0fc049d7e443e0348">Memory::allocate()</link> method invokes the new operator within a try catch block, and keeps track of the total memory allocated. </para>
<para>
Definition at line 28 of file Memory.h.</para>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1Memory_1af6003f193ae6c7a0fc049d7e443e0348"/>    <section>
    <title>allocate()</title>
<indexterm><primary>allocate</primary><secondary>Util::Memory</secondary></indexterm>
<indexterm><primary>Util::Memory</primary><secondary>allocate</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void Util::Memory::allocate (Data *&amp; ptr, size_t size)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Allocate a C++ array. </para>
</para>

<para>Uses new to allocates a Data array of size elements, assigns ptr the address of the first element.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ptr</entry>
                                <entry>
<para>reference to pointer (output) </para>
</entry>
                            </row>
                            <row>
                                <entry>size</entry>
                                <entry>
<para>number of elements </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 132 of file Memory.h.</para>
<para>
References UTIL_THROW.</para>
<para>
Referenced by Pscf::Field&lt; T &gt;::Field(), and reallocate().</para>
    </section><anchor xml:id="_classUtil_1_1Memory_1a3ded7c631c8cbdb6968f03f8084485a2"/>    <section>
    <title>deallocate()</title>
<indexterm><primary>deallocate</primary><secondary>Util::Memory</secondary></indexterm>
<indexterm><primary>Util::Memory</primary><secondary>deallocate</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void Util::Memory::deallocate (Data *&amp; ptr, size_t size)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Deallocate a C++ array. </para>
</para>

<para>Uses free to deallocate a Data array of size elements.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ptr</entry>
                                <entry>
<para>reference to pointer (intput, ptr = 0 on output) </para>
</entry>
                            </row>
                            <row>
                                <entry>size</entry>
                                <entry>
<para>number of elements in existing array </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 152 of file Memory.h.</para>
<para>
References UTIL_CHECK.</para>
<para>
Referenced by reallocate(), Util::GPArray&lt; Data &gt;::~GPArray(), and Util::GStack&lt; Data &gt;::~GStack().</para>
    </section><anchor xml:id="_classUtil_1_1Memory_1ab2c695bb5d97abccbfff59e4fde16530"/>    <section>
    <title>reallocate()</title>
<indexterm><primary>reallocate</primary><secondary>Util::Memory</secondary></indexterm>
<indexterm><primary>Util::Memory</primary><secondary>reallocate</secondary></indexterm>
<computeroutput>template&lt;typename Data &gt; </computeroutput><para><computeroutput>void Util::Memory::reallocate (Data *&amp; ptr, size_t oldSize, size_t newSize)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Reallocate a C++ array. </para>
</para>

<para>This function calls allocate to allocate a new array, copies all existing elements and deallocates old and calls deallocate to free the old array. On outputs, ptr is the address of the new array.</para>

<para>Precondition: On input, newSize &gt; oldSize.</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ptr</entry>
                                <entry>
<para>reference to pointer (input/output) </para>
</entry>
                            </row>
                            <row>
                                <entry>oldSize</entry>
                                <entry>
<para>number of elements in existing array </para>
</entry>
                            </row>
                            <row>
                                <entry>newSize</entry>
                                <entry>
<para>number of elements in new array </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 168 of file Memory.h.</para>
<para>
References allocate(), deallocate(), and UTIL_CHECK.</para>
    </section><anchor xml:id="_classUtil_1_1Memory_1a8aa7aec77dc5cf6fe9da9c41ddc1293f"/>    <section>
    <title>nAllocate()</title>
<indexterm><primary>nAllocate</primary><secondary>Util::Memory</secondary></indexterm>
<indexterm><primary>Util::Memory</primary><secondary>nAllocate</secondary></indexterm>
<para><computeroutput>int Util::Memory::nAllocate ( )<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Return number of times <link linkend="_classUtil_1_1Memory_1af6003f193ae6c7a0fc049d7e443e0348">allocate()</link> was called. </para>
</para>

<para>Each call to <link linkend="_classUtil_1_1Memory_1ab2c695bb5d97abccbfff59e4fde16530">reallocate()</link> also increments <link linkend="_classUtil_1_1Memory_1a8aa7aec77dc5cf6fe9da9c41ddc1293f">nAllocate()</link>, because <link linkend="_classUtil_1_1Memory_1af6003f193ae6c7a0fc049d7e443e0348">allocate()</link> is called internally. </para>
<para>
Definition at line 34 of file Memory.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Memory_1afbb82ff54c3b15e33e4c1ac7d7501dc9"/>    <section>
    <title>nDeallocate()</title>
<indexterm><primary>nDeallocate</primary><secondary>Util::Memory</secondary></indexterm>
<indexterm><primary>Util::Memory</primary><secondary>nDeallocate</secondary></indexterm>
<para><computeroutput>int Util::Memory::nDeallocate ( )<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Return number of times <link linkend="_classUtil_1_1Memory_1a3ded7c631c8cbdb6968f03f8084485a2">deallocate()</link> was called. </para>
</para>

<para>Each call to <link linkend="_classUtil_1_1Memory_1ab2c695bb5d97abccbfff59e4fde16530">reallocate()</link> also increments <link linkend="_classUtil_1_1Memory_1afbb82ff54c3b15e33e4c1ac7d7501dc9">nDeallocate()</link>, because <link linkend="_classUtil_1_1Memory_1a3ded7c631c8cbdb6968f03f8084485a2">deallocate()</link> is called internally. </para>
<para>
Definition at line 40 of file Memory.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Memory_1adfde1ae02377c69ebb91f662600d87cd"/>    <section>
    <title>total()</title>
<indexterm><primary>total</primary><secondary>Util::Memory</secondary></indexterm>
<indexterm><primary>Util::Memory</primary><secondary>total</secondary></indexterm>
<para><computeroutput>int Util::Memory::total ( )<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Return total amount of memory currently allocated. </para>
</para>
<para>
Definition at line 46 of file Memory.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Memory_1a52d87603f7bf2c9b39f4598aa05c6b0f"/>    <section>
    <title>max()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>max</primary><secondary>Util::Memory</secondary></indexterm>
<indexterm><primary>Util::Memory</primary><secondary>max</secondary></indexterm>
<para><computeroutput>int Util::Memory::max ( )<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Return the maximum amount of allocated heap memory thus far. </para>
</para>

<para>This function returns the temporal maximum of <link linkend="_classUtil_1_1Memory_1adfde1ae02377c69ebb91f662600d87cd">total()</link>. </para>
<para>
Definition at line 52 of file Memory.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Memory_1a30fcfa71e89c3fa5327abfda1b2be711"/>    <section>
    <title>max()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>max</primary><secondary>Util::Memory</secondary></indexterm>
<indexterm><primary>Util::Memory</primary><secondary>max</secondary></indexterm>
<para><computeroutput>int Util::Memory::max (MPI::Intracomm &amp; communicator)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Return max for any processor in communicator. </para>
</para>
<para>
Definition at line 56 of file Memory.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1Memory_1acefa80470b03b3ccc2469aad3d38cd04"/>    <section>
    <title>initStatic()</title>
<indexterm><primary>initStatic</primary><secondary>Util::Memory</secondary></indexterm>
<indexterm><primary>Util::Memory</primary><secondary>initStatic</secondary></indexterm>
<para><computeroutput>void Util::Memory::initStatic ( )<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Call this just to guarantee initialization of static memory. </para>
</para>
<para>
Definition at line 28 of file Memory.cpp.</para>
<para>
Referenced by Util::initStatic().</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
Memory.hMemory.cpp</section>
</section>
