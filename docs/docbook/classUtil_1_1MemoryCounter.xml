<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1MemoryCounter">
<title>Util::MemoryCounter Class Reference</title>
<indexterm><primary>Util::MemoryCounter</primary></indexterm>
<para>

<para>Archive to computed packed size of a sequence of objects, in bytes. </para>
 
</para>
<para>
<computeroutput>#include &lt;MemoryCounter.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1MemoryCounter_1a13821417e8a3bfb7ba2bca537d2b7791">MemoryCounter</link> ()</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_classUtil_1_1MemoryCounter_1a6ffe7eb5edc22b50e57f94f958e37a5e">~MemoryCounter</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1MemoryCounter_1ae03ec27b0779743557d1e8c124c6d3d9">clear</link> ()</para>

<para>Resets the size counter to zero. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_classUtil_1_1MemoryCounter">MemoryCounter</link> &amp; <link linkend="_classUtil_1_1MemoryCounter_1aef2db38ea42c1cbea283773e485aeea3">operator&amp;</link> (T &amp;data)</para>

<para>Add packed size of one object. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para><link linkend="_classUtil_1_1MemoryCounter">MemoryCounter</link> &amp; <link linkend="_classUtil_1_1MemoryCounter_1a44a7775f6f978bc14a8ff8de17fb4feb">operator&lt;&lt;</link> (T &amp;data)</para>

<para>Add packed size of one object. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_classUtil_1_1MemoryCounter_1ab17b341f45b5c7158c10004812664df8">count</link> (const T &amp;data)</para>

<para>Add size of one object in memory. </para>
</listitem>
            <listitem><para>template&lt;typename T &gt; </para><para>void <link linkend="_classUtil_1_1MemoryCounter_1aef5e6e47953989419ae15c77f49373cf">count</link> (T *array, int n)</para>

<para>Compute the size in memory of a C array. </para>
</listitem>
            <listitem><para>size_t <link linkend="_classUtil_1_1MemoryCounter_1aaab06011b954c2be2b9fdff6be3ef0b1">size</link> () const</para>

<para>Return size required for archive, in Bytes. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static bool <link linkend="_classUtil_1_1MemoryCounter_1a9e18a988993cbbee5ea6b66b7019f979">is_saving</link> ()</para>

<para>Returns true. </para>
</listitem>
            <listitem><para>static bool <link linkend="_classUtil_1_1MemoryCounter_1a924d8362da343f48b5a2c0fc305bb2c0">is_loading</link> ()</para>

<para>Returns false. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Archive to computed packed size of a sequence of objects, in bytes. </para>



<para>This class computes the number of bytes required to pack a sequence of objects within a <link linkend="_classUtil_1_1MemoryOArchive">MemoryOArchive</link>. The interface is that of a loading Archive, but the &lt;&lt; and &amp; operators are overloaded to compute the size required for an object and to increment a size counter, rather than to actually save data.</para>

<para>The <link linkend="_classUtil_1_1MemoryCounter_1aaab06011b954c2be2b9fdff6be3ef0b1">size()</link> method returns the number of bytes required to pack all of the objects serialized thus far. The size counter is set to zero upon construction. The <link linkend="_classUtil_1_1MemoryCounter_1ae03ec27b0779743557d1e8c124c6d3d9">clear()</link> method resets the size counter to zero. </para>
<para>
Definition at line 35 of file MemoryCounter.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1MemoryCounter_1a13821417e8a3bfb7ba2bca537d2b7791"/>    <section>
    <title>MemoryCounter()</title>
<indexterm><primary>MemoryCounter</primary><secondary>Util::MemoryCounter</secondary></indexterm>
<indexterm><primary>Util::MemoryCounter</primary><secondary>MemoryCounter</secondary></indexterm>
<para><computeroutput>Util::MemoryCounter::MemoryCounter ( )</computeroutput></para><para>

<para>Constructor. </para>
</para>
<para>
Definition at line 16 of file MemoryCounter.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryCounter_1a6ffe7eb5edc22b50e57f94f958e37a5e"/>    <section>
    <title>~MemoryCounter()</title>
<indexterm><primary>~MemoryCounter</primary><secondary>Util::MemoryCounter</secondary></indexterm>
<indexterm><primary>Util::MemoryCounter</primary><secondary>~MemoryCounter</secondary></indexterm>
<para><computeroutput>Util::MemoryCounter::~MemoryCounter ( )</computeroutput></para><para>

<para>Destructor. </para>
</para>
<para>
Definition at line 24 of file MemoryCounter.cpp.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1MemoryCounter_1a9e18a988993cbbee5ea6b66b7019f979"/>    <section>
    <title>is_saving()</title>
<indexterm><primary>is_saving</primary><secondary>Util::MemoryCounter</secondary></indexterm>
<indexterm><primary>Util::MemoryCounter</primary><secondary>is_saving</secondary></indexterm>
<para><computeroutput>bool Util::MemoryCounter::is_saving ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Returns true. </para>
</para>
<para>
Definition at line 139 of file MemoryCounter.h.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryCounter_1a924d8362da343f48b5a2c0fc305bb2c0"/>    <section>
    <title>is_loading()</title>
<indexterm><primary>is_loading</primary><secondary>Util::MemoryCounter</secondary></indexterm>
<indexterm><primary>Util::MemoryCounter</primary><secondary>is_loading</secondary></indexterm>
<para><computeroutput>bool Util::MemoryCounter::is_loading ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Returns false. </para>
</para>
<para>
Definition at line 142 of file MemoryCounter.h.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryCounter_1ae03ec27b0779743557d1e8c124c6d3d9"/>    <section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>Util::MemoryCounter</secondary></indexterm>
<indexterm><primary>Util::MemoryCounter</primary><secondary>clear</secondary></indexterm>
<para><computeroutput>void Util::MemoryCounter::clear ( )</computeroutput></para><para>

<para>Resets the size counter to zero. </para>
</para>
<para>
Definition at line 30 of file MemoryCounter.cpp.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryCounter_1aef2db38ea42c1cbea283773e485aeea3"/>    <section>
    <title>operator&amp;()</title>
<indexterm><primary>operator&amp;</primary><secondary>Util::MemoryCounter</secondary></indexterm>
<indexterm><primary>Util::MemoryCounter</primary><secondary>operator&amp;</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1MemoryCounter">MemoryCounter</link> &amp; Util::MemoryCounter::operator&amp; (T &amp; data)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Add packed size of one object. </para>
</para>
<para>
Definition at line 155 of file MemoryCounter.h.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryCounter_1a44a7775f6f978bc14a8ff8de17fb4feb"/>    <section>
    <title>operator&lt;&lt;()</title>
<indexterm><primary>operator&lt;&lt;</primary><secondary>Util::MemoryCounter</secondary></indexterm>
<indexterm><primary>Util::MemoryCounter</primary><secondary>operator&lt;&lt;</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1MemoryCounter">MemoryCounter</link> &amp; Util::MemoryCounter::operator&lt;&lt; (T &amp; data)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Add packed size of one object. </para>
</para>
<para>
Definition at line 165 of file MemoryCounter.h.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryCounter_1ab17b341f45b5c7158c10004812664df8"/>    <section>
    <title>count()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>count</primary><secondary>Util::MemoryCounter</secondary></indexterm>
<indexterm><primary>Util::MemoryCounter</primary><secondary>count</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::MemoryCounter::count (const T &amp; data)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Add size of one object in memory. </para>
</para>

<para>This method just increments the size by sizeof(T). It is appropriate only for primitive C++ variables and POD types for which a bitwise copy is appropriate. </para>
<para>
Definition at line 177 of file MemoryCounter.h.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryCounter_1aef5e6e47953989419ae15c77f49373cf"/>    <section>
    <title>count()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>count</primary><secondary>Util::MemoryCounter</secondary></indexterm>
<indexterm><primary>Util::MemoryCounter</primary><secondary>count</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>void Util::MemoryCounter::count (T * array, int n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Compute the size in memory of a C array. </para>
</para>

<para>This method increments the size by n*sizeof(T). It is appropriate for C arrays of primitive variables and of POD types for which a bitwise copy is appropriate. </para>
<para>
Definition at line 184 of file MemoryCounter.h.</para>
    </section><anchor xml:id="_classUtil_1_1MemoryCounter_1aaab06011b954c2be2b9fdff6be3ef0b1"/>    <section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>Util::MemoryCounter</secondary></indexterm>
<indexterm><primary>Util::MemoryCounter</primary><secondary>size</secondary></indexterm>
<para><computeroutput>size_t Util::MemoryCounter::size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Return size required for archive, in Bytes. </para>
</para>
<para>
Definition at line 148 of file MemoryCounter.h.</para>
<para>
Referenced by Util::memorySize().</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
MemoryCounter.hMemoryCounter.cpp</section>
</section>
