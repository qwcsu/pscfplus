<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classUtil_1_1ScalarParam">
<title>Util::ScalarParam&lt; Type &gt; Class Template Reference</title>
<indexterm><primary>Util::ScalarParam&lt; Type &gt;</primary></indexterm>
<para>

<para>Template for a <link linkend="_classUtil_1_1Parameter">Parameter</link> object associated with a scalar variable. </para>
 
</para>
<para>
<computeroutput>#include &lt;ScalarParam.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for Util::ScalarParam&lt; Type &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="classUtil_1_1ScalarParam.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classUtil_1_1ScalarParam_1ae759a7df56b3ef0c8bc53406f8babd1a">ScalarParam</link> (const char *<link linkend="_classUtil_1_1Parameter_1a2e6a63d5a0827ee3de51d481aee38174">label</link>, Type &amp;value, bool <link linkend="_classUtil_1_1Parameter_1accdc4c9c774b9394b387277543c1ba74">isRequired</link>=true)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1ScalarParam_1ad3c118b4337e4e4f945eb44f741d1855">writeParam</link> (std::ostream &amp;out)</para>

<para>Write parameter to stream. </para>
</listitem>
            <listitem><para>void <link linkend="_classUtil_1_1ScalarParam_1a55e1724dd061dd1b7ade4932085cfccf">setValue</link> (Type &amp;value)</para>

<para>Set the pointer to point a specific variable. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>virtual void <link linkend="_classUtil_1_1ScalarParam_1a536edaca5a76b51f20e14f12f1ff944f">readValue</link> (std::istream &amp;in)</para>

<para>Read parameter value from an input stream. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1ScalarParam_1accc6024fbe49a8603392acaab1e30ce3">loadValue</link> (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp;ar)</para>

<para>Load bare parameter value from an archive. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1ScalarParam_1a5b7ebc18ee9d6e3c5bf866680e5aee1e">saveValue</link> (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp;ar)</para>

<para>Save parameter value to an archive. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_classUtil_1_1ScalarParam_1abf6b6231f7425ac95c9d38658ad2184a">bcastValue</link> ()</para>

<para>Broadcast parameter value within the ioCommunicator. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;class Type&gt;
class Util::ScalarParam&lt; Type &gt;</title></simplesect>


<para>Template for a <link linkend="_classUtil_1_1Parameter">Parameter</link> object associated with a scalar variable. </para>



<para>This template can be used to define a <link linkend="_classUtil_1_1Parameter">Parameter</link> subclass for any data type for which there exist inserter (&lt;&lt;) and extractor (&gt;&gt;) operators for stream io. </para>
<para>
Definition at line 34 of file ScalarParam.h.</para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classUtil_1_1ScalarParam_1ae759a7df56b3ef0c8bc53406f8babd1a"/>    <section>
    <title>ScalarParam()</title>
<indexterm><primary>ScalarParam</primary><secondary>Util::ScalarParam&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Util::ScalarParam&lt; Type &gt;</primary><secondary>ScalarParam</secondary></indexterm>
<computeroutput>template&lt;class Type &gt; </computeroutput><para><computeroutput><link linkend="_classUtil_1_1ScalarParam">Util::ScalarParam</link>&lt; Type &gt;::<link linkend="_classUtil_1_1ScalarParam">ScalarParam</link> (const char * label, Type &amp; value, bool isRequired = <computeroutput>true</computeroutput>
)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>label</entry>
                                <entry>
<para>label string const. </para>
</entry>
                            </row>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>reference to parameter value. </para>
</entry>
                            </row>
                            <row>
                                <entry>isRequired</entry>
                                <entry>
<para>Is this a required parameter? </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 111 of file ScalarParam.h.</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classUtil_1_1ScalarParam_1ad3c118b4337e4e4f945eb44f741d1855"/>    <section>
    <title>writeParam()</title>
<indexterm><primary>writeParam</primary><secondary>Util::ScalarParam&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Util::ScalarParam&lt; Type &gt;</primary><secondary>writeParam</secondary></indexterm>
<computeroutput>template&lt;class Type &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ScalarParam">Util::ScalarParam</link>&lt; Type &gt;::writeParam (std::ostream &amp; out)<computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Write parameter to stream. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>out</entry>
                                <entry>
<para>output stream </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implements <link linkend="_classUtil_1_1ParamComponent_1ac17d6ab63f9b0e5f966d6a3cfbc26d86">Util::ParamComponent</link>.</para>
<para>
Definition at line 139 of file ScalarParam.h.</para>
<para>
References Util::Parameter::Precision, and Util::Parameter::Width.</para>
    </section><anchor xml:id="_classUtil_1_1ScalarParam_1a55e1724dd061dd1b7ade4932085cfccf"/>    <section>
    <title>setValue()</title>
<indexterm><primary>setValue</primary><secondary>Util::ScalarParam&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Util::ScalarParam&lt; Type &gt;</primary><secondary>setValue</secondary></indexterm>
<computeroutput>template&lt;class Type &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ScalarParam">Util::ScalarParam</link>&lt; Type &gt;::setValue (Type &amp; value)</computeroutput></para><para>

<para>Set the pointer to point a specific variable. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>value</entry>
                                <entry>
<para>variable that holds the parameter value. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 155 of file ScalarParam.h.</para>
    </section><anchor xml:id="_classUtil_1_1ScalarParam_1a536edaca5a76b51f20e14f12f1ff944f"/>    <section>
    <title>readValue()</title>
<indexterm><primary>readValue</primary><secondary>Util::ScalarParam&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Util::ScalarParam&lt; Type &gt;</primary><secondary>readValue</secondary></indexterm>
<computeroutput>template&lt;class Type &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ScalarParam">Util::ScalarParam</link>&lt; Type &gt;::readValue (std::istream &amp; in)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Read parameter value from an input stream. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>in</entry>
                                <entry>
<para>input stream from which to read </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1Parameter_1a5817fa95bf2e32808d384a66e272dc37">Util::Parameter</link>.</para>
<para>
Definition at line 118 of file ScalarParam.h.</para>
    </section><anchor xml:id="_classUtil_1_1ScalarParam_1accc6024fbe49a8603392acaab1e30ce3"/>    <section>
    <title>loadValue()</title>
<indexterm><primary>loadValue</primary><secondary>Util::ScalarParam&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Util::ScalarParam&lt; Type &gt;</primary><secondary>loadValue</secondary></indexterm>
<computeroutput>template&lt;class Type &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ScalarParam">Util::ScalarParam</link>&lt; Type &gt;::loadValue (<link linkend="_classUtil_1_1Serializable_1ac6bcbf9bac926cada5a398804410e891">Serializable::IArchive</link> &amp; ar)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Load bare parameter value from an archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>input archive from which to load </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1Parameter_1a9e3d8dbd2198974017cd8711ae9c990d">Util::Parameter</link>.</para>
<para>
Definition at line 122 of file ScalarParam.h.</para>
    </section><anchor xml:id="_classUtil_1_1ScalarParam_1a5b7ebc18ee9d6e3c5bf866680e5aee1e"/>    <section>
    <title>saveValue()</title>
<indexterm><primary>saveValue</primary><secondary>Util::ScalarParam&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Util::ScalarParam&lt; Type &gt;</primary><secondary>saveValue</secondary></indexterm>
<computeroutput>template&lt;class Type &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ScalarParam">Util::ScalarParam</link>&lt; Type &gt;::saveValue (<link linkend="_classUtil_1_1Serializable_1aca43a1eea5ec5f13189a57892a7a6d04">Serializable::OArchive</link> &amp; ar)<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Save parameter value to an archive. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>ar</entry>
                                <entry>
<para>output archive to which to save </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_classUtil_1_1Parameter_1a61858c5163b492f2618689a35ff05044">Util::Parameter</link>.</para>
<para>
Definition at line 126 of file ScalarParam.h.</para>
    </section><anchor xml:id="_classUtil_1_1ScalarParam_1abf6b6231f7425ac95c9d38658ad2184a"/>    <section>
    <title>bcastValue()</title>
<indexterm><primary>bcastValue</primary><secondary>Util::ScalarParam&lt; Type &gt;</secondary></indexterm>
<indexterm><primary>Util::ScalarParam&lt; Type &gt;</primary><secondary>bcastValue</secondary></indexterm>
<computeroutput>template&lt;class Type &gt; </computeroutput><para><computeroutput>void <link linkend="_classUtil_1_1ScalarParam">Util::ScalarParam</link>&lt; Type &gt;::bcastValue<computeroutput>[protected]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Broadcast parameter value within the ioCommunicator. </para>
</para>
<para>
Reimplemented from <link linkend="_classUtil_1_1Parameter_1ad93ad2700686a5a32755fdb67b2a0792">Util::Parameter</link>.</para>
<para>
Definition at line 131 of file ScalarParam.h.</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
ScalarParam.h</section>
</section>
