<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group__Pointer__Array__Module">
<title>Pointer Arrays</title>
<indexterm><primary>Pointer Arrays</primary></indexterm>
<para>

<para><link linkend="_classUtil_1_1Array">Array</link> containers that store pointers to objects, and related iterators. </para>
 
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classUtil_1_1ArraySet">Util::ArraySet&lt; Data &gt;</link></para>

<para>A container for pointers to a subset of elements of an associated array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ArrayStack">Util::ArrayStack&lt; Data &gt;</link></para>

<para>A stack of fixed capacity. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1ConstPArrayIterator">Util::ConstPArrayIterator&lt; Data &gt;</link></para>

<para>Forward iterator for a <link linkend="_classUtil_1_1PArray">PArray</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1DPArray">Util::DPArray&lt; Data &gt;</link></para>

<para>A dynamic array that only holds pointers to its elements. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1FPArray">Util::FPArray&lt; Data, Capacity &gt;</link></para>

<para>Statically allocated pointer array. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1GPArray">Util::GPArray&lt; Data &gt;</link></para>

<para>An automatically growable <link linkend="_classUtil_1_1PArray">PArray</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1GStack">Util::GStack&lt; Data &gt;</link></para>

<para>An automatically growable Stack. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1PArray">Util::PArray&lt; Data &gt;</link></para>

<para>An array that only holds pointers to its elements. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1PArrayIterator">Util::PArrayIterator&lt; Data &gt;</link></para>

<para>Forward iterator for a <link linkend="_classUtil_1_1PArray">PArray</link>. </para>
</listitem>
            <listitem><para>class <link linkend="_classUtil_1_1SSet">Util::SSet&lt; Data, Capacity &gt;</link></para>

<para>Statically allocated array of pointers to an unordered set. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para><link linkend="_classUtil_1_1Array">Array</link> containers that store pointers to objects, and related iterators. </para>

<para>The one-dimensional array with names that contain a prefix &quot;P&quot; all store pointers to objects. This module also includes associated iterators.</para>

<para>The <link linkend="_classUtil_1_1DPArray">DPArray</link> and <link linkend="_classUtil_1_1FPArray">FPArray</link> class templates are dynamically and statically allocated pointer arrays, respectively. A <link linkend="_classUtil_1_1GPArray">GPArray</link> is a growable pointer array.</para>

<para>Each <link linkend="_classUtil_1_1DPArray">DPArray</link> &lt; T &gt;, <link linkend="_classUtil_1_1FArray">FArray</link> &lt;T, N&gt;, or GPArray&lt;T&gt; container has a private C array of T* pointers. These containers all overload the the [] operator so as to return a T&amp; reference, rather than a T* pointer. The append method takes a T&amp; reference as a parameter. The destructor for a pointer array deletes the underlying array of T* pointers, but not the T objects to which they point.</para>

<para>An <link linkend="_classUtil_1_1ArrayStack">ArrayStack</link> &lt; T &gt; container is a finite capacity stack that is implemented as a dynamically allocated array of T* pointers. Objects can be pushed onto or popped off the top of the stack using the push(T&amp;) and pop() methods. An <link linkend="_classUtil_1_1ArrayStack">ArrayStack</link> can be allocated only once, and cannot be resized.</para>

<para>An SSet&lt; T &gt; is a container that holds pointers to an unordered set of T objects. It provides fast addition and removal of single elements, and fast iteration through all elements. The indexing of elements is arbitrary and mutable, and may change when an element is deleted.</para>

<para>An <link linkend="_classUtil_1_1ArraySet">ArraySet</link> &lt; T &gt; is a container that holds pointers to a subset of the elements of an associated array of T objects. The indexing of elements within an <link linkend="_classUtil_1_1ArraySet">ArraySet</link> container is arbitrary and mutable. </para>
</section>
</section>
