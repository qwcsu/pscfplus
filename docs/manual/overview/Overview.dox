/*! \page overview_page  Overview
\ref index "Main Page"  (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_page  (Next)  
<BR>

PSCF+ is a software package for solving the polymer self-consistent field (SCF) theory in 
continuum. It is based on the nice GPU framework of <a href="https://github.com/dmorse/pscfpp">PSCF</a> 
(which is only for the "standard" or known as the Edwards-Helfand model, <i>i.e.</i>, incompressible melts of continuous Gaussian 
chains with the Dirac <i>&delta;</i>-function interactions, commonly used in polymer field theories) 
originally developed by Prof. David Morse and co-workers, but is improved with better 
numerical methods, less GPU memory usage and more flexible algorithms, and is extended to 
various discrete-chain models. Similar to the C++/CUDA version of PSCF, PSCF+ described here 
is written primarily in C++ with GPU accelerated code in CUDA.

Same as the C++/CUDA version of PSCF, PSCF+ is applicable to mixtures containing arbitrary 
acyclic copolymers, and preserves all of the nice features already implemented in the former, 
including the use of <a href="https://docs.nvidia.com/cuda/cufft/index.html">cuFFT</a> on GPU, 
the use of Anderson mixing (which is performed on GPU) 
combined with a variable-cell scheme to simultaneously solve the nonlinear SCF equations and 
find the bulk periodicity for the ordered phases formed by block copolymer self-assembly 
(which speeds-up the calculation by about one order of magnitude), and the documentation 
produced by <a href="https://www.doxygen.nl/">Doxygen</a>. Their differences and expected advantages of the latter include:
<ul>
<li> PSCF is only applicable to the "standard" model, while PSCF+ can also be applied to 
various discrete-chain models with finite-range non-bonded interactions commonly used 
in molecular simulations, thus providing the mean-field reference results for such 
simulations; see <a href="https://github.com/qwcsu/PSCFplus/blob/master/doc/notes/Models.pdf">Models.pdf</a> for more details.
</li>
<li> For the continuous-Gaussian-chain models, PSCF+ uses the Richardson-extrapolated pseudo-spectral methods 
(denoted by REPS-<i>K</i> with <i>K</i>=0,1,2,3,4) to solve the modified diffusion equations (which is the 
crux of SCF calculations of such models), while PSCF uses only REPS-1. A larger <i>K</i>-value gives more accurate 
result at larger computational cost; see <a href="https://github.com/qwcsu/PSCFplus/blob/master/doc/notes/REPS.pdf">REPS.pdf</a> for more details. 
</li>
<li> For 3D spatially periodic ordered phases such as those formed by block copolymer 
self-assembly, while PSCF uses fast Fourier transforms (FFTs) between a uniform grid in the 
real space and that in the reciprocal space, for the Pmmm supergroup PSCF+ uses discrete 
cosine transforms instead of FFTs to take advantage of the (partial) symmetry of 
an ordered phase to reduce the number of grid points, thus both speeding up the calculation 
and reducing the memory usage; see <a href="https://pubs.acs.org/doi/10.1021/acs.macromol.0c01974"><i>Qiang and Li</i>, <b>Macromolecules 53</b>, 9943 (2020)</a> for 
more details.
</li>
<li>
In SCF calculations the (one-end-integrated) forward and backward propagators \f$q\f$  and \f$q^{\dagger}\f$  of each 
block usually take the largest memory usage, but the GPU memory is rather limited. While in 
PSCF the size of these propagators is \f$MN_s\f$, where \f$M\f$ denotes the number of grid points in real 
space and \f$N_s\f$ the number of contour discretization points on a continuous Gaussian chain (or the number 
of segments on a discrete chain), in PSCF+ the "slice" algorithm proposed by Li and Qiang 
can be used to reduce the size of \f$q\f$ to \f$M\sqrt{N_s}\f$ and that of \f$q^{\dagger}\f$ to just \f$M\f$, thus greatly reducing the GPU 
memory usage at the cost of computing \f$q\f$ twice; see <a href="https://github.com/qwcsu/PSCFplus/blob/master/doc/notes/SavMem.pdf">SavMem.pdf</a> for more details.
</li>
<li>
Since SCF equations are highly nonlinear, having a good initial guess is very important 
in practice as it determines not only which final solution (corresponding to a phase in 
block copolymer self-assembly) can be obtained but also how many iteration steps the 
solver (<i>e.g.</i>, the Anderson mixing) takes to converge these equations. PSCF+ uses automated 
calculation along a path (ACAP), where the converged solution at a neighboring point is 
taken as the initial guess at the current point in the parameter space. While this is 
similar to the "SWEEP" command in PSCF, the key for ACAP to be successful and efficient 
is that it automatically adjusts the step size along the path connecting the two points. 
In PSCF+, ACAP is further 
combined with the phase-boundary calculation between two specified phases, making the 
construction of phase diagrams very efficient. See <a href="https://github.com/qwcsu/PSCFplus/blob/master/doc/notes/ACAP.pdf">ACAP.pdf</a> for more details.
</li>
<li>
The approach used by PSCF to solve the SCF equations (for an incompressible system) 
does not allow any athermal species in the system, which has no Flory-Huggins-type interactions 
with all other species. This problem is solved in PSCF+; see <a href="https://github.com/qwcsu/PSCFplus/blob/master/doc/notes/SlvSCF.pdf">SlvSCF.pdf</a> for more details.
</li>
</ul>

PSCF+ is free, open-source software. It is distributed under the terms of the GNU General 
Public License (GPL) as published by the Free Software Foundation, either version 3 of the 
License or (at your choice) any later version. PSCF+ is distributed without any warranty, 
without even the implied warranty of merchantability or fitness for a particular purpose. 
See the <a href="https://www.gnu.org/licenses/gpl-3.0.html#license-text">LICENSE file</a> 
or the <a href="https://github.com/qwcsu/PSCFplus/blob/master/LICENSE">gnu web page</a> for details.


<BR>
\ref index "Main Page"  (Up) &nbsp; &nbsp; &nbsp; &nbsp; 
\ref install_page  (Next)

*/

